<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>MOL</title>
        <generator uri="https://gohugo.io">Hugo</generator>
        <link>https://t32k.me/mol/categories/translation/</link>
        <language>ja</language>
        
        
        <updated>Wed, 20 May 2015 00:00:00 UTC</updated>
        
        <item>
            <title>【翻訳】Web世代のデベロッパーのためのmake</title>
            <link>https://t32k.me/mol/log/make-for-the-web-generation/</link>
            <pubDate>Wed, 20 May 2015 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/make-for-the-web-generation/</guid>
            <description>

&lt;p&gt;&lt;cite class=&#34;citation&#34;&gt;
&lt;img src=&#34;https://t32k.me/mol/mol/images/people/casper_beyer.png&#34; alt=&#34;Casper Beyer&#34; /&gt;
Original：&lt;a href=&#34;http://caspervonb.com/javascript/tools/make-for-the-web-generation/&#34;&gt;Make for the Web Generation
&lt;/a&gt;（&lt;time&gt;2015-02-28&lt;/time&gt;）by &lt;a href=&#34;https://twitter.com/caspervonb&#34;&gt;Casper Beyer&lt;/a&gt;
&lt;/cite&gt;&lt;/p&gt;

&lt;h2 id=&#34;イントロ&#34;&gt;イントロ&lt;/h2&gt;

&lt;p&gt;JavaScriptの普及に伴いビルドツールが盛んだ。人気なものをいくつか挙げれば、&lt;a href=&#34;http://gruntjs.com/&#34;&gt;grunt&lt;/a&gt;、&lt;a href=&#34;http://gulpjs.com/&#34;&gt;gulp&lt;/a&gt;、&lt;a href=&#34;http://slushjs.github.io/#/&#34;&gt;slush&lt;/a&gt;、&lt;a href=&#34;https://github.com/broccolijs/broccoli&#34;&gt;broccoli&lt;/a&gt;や&lt;a href=&#34;http://brunch.io/&#34;&gt;brunch&lt;/a&gt;などがあるが、結局、名前をつけただけにすぎない。&lt;/p&gt;

&lt;p&gt;多かれ少なかれ、これらのツールはファイルコピーからzipファイル作成のようなシンプルなタスク処理でさえ、すべてプラグインに依存しているので、それらのタスクを実行するためにプラグインを必要とするだろう。&lt;/p&gt;

&lt;p&gt;これらのツールは理想論的には大きな柔軟性をもたらすものとされているが、実際はUNIXのエコシステムをただ複製しているだけにすぎない。このために君のプロジェクトは早々に、大きな開発依存性のバンドルを持つことであろう、そして、やっているタスクは単なる普通のコピー、バンドルやミニファイだけだ。&lt;/p&gt;

&lt;h2 id=&#34;makeの導入&#34;&gt;makeの導入&lt;/h2&gt;

&lt;p&gt;makeはとても古いツールであり、ネイティブ開発畑出身のほとんどのデベロッパーにとって古き良き友であるが、コンピューターサイエンス出身ではない多くのWebデベロッパーにとっては、それを使おうとさえ思いもしないだろう。しかし、だからといって、それはmakeが良いツールではないということを意味していない、事実、最近はあまりにも過小評価されているように思う。&lt;/p&gt;

&lt;p&gt;君はすでにUNIXのエコシステムを持っている。パイプ、ストリーム、ユーティリティなどがすべてそこにある。ビルドする必要性のあるのツールのほとんどは、すでにそのエコシステムに存在している。もし、Windowsのような非UNIXのマシンで開発しているのなら、悪いことを言わないから適切なシェルと&lt;a href=&#34;https://github.com/bmatzelle/gow/wiki&#34;&gt;gow&lt;/a&gt;のようなバンドルをインストールするべきだろう。あるいは、&lt;code&gt;cmd.exe&lt;/code&gt;も同様に&lt;a href=&#34;http://bliker.github.io/cmder/&#34;&gt;cmder&lt;/a&gt;のような、よりよいターミナル端末に置き換えべきだろう。&lt;/p&gt;

&lt;p&gt;makeは一般的に&lt;code&gt;Makefile&lt;/code&gt;と呼ばれるファイルで定義、使用し、拡張子は必要ない、大文字に気をつけること。ルールはターゲットと依存するファイルから成り、シェルコマンドも有しており、普通それらはレシピと呼ばれる。&lt;/p&gt;

&lt;p&gt;一般的なルールは以下のような感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ターゲット: 依存するファイル
    レシピ
# 注意！スペースじゃなくてタブ！
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;では、以上の知識を使って簡単な例をやってみよう。依存するファイルである&lt;code&gt;input.txt&lt;/code&gt;をターゲットである&lt;code&gt;output.txt&lt;/code&gt;にコピーしたい場合、レシピは以下の様なシンプルなコマンドラインとなるだろう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;output.txt: input.txt
    cp $&amp;lt; $@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とってもシンプルだろう？&lt;a href=&#34;http://linux.die.net/man/1/cp&#34;&gt;cp(1)&lt;/a&gt;の起動といくつかの&lt;a href=&#34;https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html&#34;&gt;自動変数&lt;/a&gt;である、&lt;code&gt;$@&lt;/code&gt;はターゲットのファイル名を保持し、&lt;code&gt;$&amp;lt;&lt;/code&gt;は最初の依存するファイル名を保持する。&lt;/p&gt;

&lt;p&gt;では、次はもっと実践的な例をやってみよう。&lt;/p&gt;

&lt;h2 id=&#34;コードのコンパイル&#34;&gt;コードのコンパイル&lt;/h2&gt;

&lt;p&gt;Coffeescript、Typescriptや、&lt;a href=&#34;https://babeljs.io/&#34;&gt;babel&lt;/a&gt;のようなJavaScriptトランスパイラーは最近では普通に使われているので、モダンなJavaScriptから現在のブラウザで解釈できるようなスクリプトにコンパイルする必要がある。&lt;/p&gt;

&lt;p&gt;このルールを定義するには、&lt;code&gt;src&lt;/code&gt;ディレクトリにあるファイルを変換し、トランスパイルしたファイルを&lt;code&gt;lib&lt;/code&gt;ディレクトリに保存することだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# まず、JavaScriptコンパイラを変数として割り当てる
# この場合babelで、厳密には必要ないが
# あったほうがメンテナンス性が少し良くなるだろう
JC            = babel

# looseトランスパイルを有効にする
JCFLAGS       = --loose

# 次にsrcディレクトリからソースとなるファイルを見つける
SRC           = $(shell find src -name &amp;quot;*.js&amp;quot;)

# それから取得した文字列を置き換え、
# ソースディレクトリとライブラリディレクトリでマップする
LIB           = $(SRC:src/%.js=lib/%.js)

# 最後に、ソースからライブラリにコンバートするルールを定義する
# これはコンパイラをそのオプションとその依存ファイルで起動させるためである
# ようやく定義したルールで、ターゲットを出力する
$(LIB): $(SRC)
  mkdir -p $(@D)
  $(JC) $(JCFLAGS) $&amp;lt; -o $@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すべてbashスクリプトに似ていると思う、 &lt;code&gt;$(VARIABLE)&lt;/code&gt; は変数を展開し、&lt;code&gt;$(@D)&lt;/code&gt; は別の自動変数で、ターゲットファイル名のディレクトリ部分を保持する。&lt;/p&gt;

&lt;h2 id=&#34;コードのバンドル&#34;&gt;コードのバンドル&lt;/h2&gt;

&lt;p&gt;Browserify、Webpackまたは単なるコンキャットもまたブラウザ環境にコードをディストリビュートするためには必要な作業と言える。このため、すべてのソースファイルを依存ファイルとし、１つのターゲットを持ち、それらをバンドラーに渡すレシピを持つルールを定義しなければならない。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 以前と同様に、バンドラーを変数として持つ
BUNDLE        = browserify

# 加えて、起動フラグも設定する
# これは変数を使って簡単にする例である
# すでに変数を定義してあるので、
# babelとbabelify transformで同じフラグを共有したい
BUNDLEFLAGS   = --transform babelify [$(JCFLAGS)]

# 次にバンドルファイル名を定義する
DIST          = dist.js

# ようやく、ルールを定義する、要は全てのを依存ファイルを
# バンドラーに渡し、ターゲットに出力する
# 既にコンパイルしたライブラリファイルがあるが
# コンパイラーはよくヘルパーを生成するので、
# 一般的にこの成果物はいくぶんか大きいファイルになる
$(DIST): $(SRC)
  $(BUNDLE) $(BUNDLEFLAGS) -o $@ $^
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;コードの最適化&#34;&gt;コードの最適化&lt;/h2&gt;

&lt;p&gt;ミニファイと不必要なコードの除去もまた一般的なビルドステップだ。今回のケースの場合、以前に定義したバンドルターゲットを依存ファイルとしてuglifyするだけだ。あとはミニファイしていないバンドル名をもとにミニファイしたバンドル名を置換するだけだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;DIST_MIN            = dist.min.js

# ミニファイツールとしてuglifyjsを使用
MIN                 = uglifyjs

# 今のところ、フラッグは必要としない
MINFLAGS            = 

# このルールはとてもシンプルである
# １つのターゲットと依存ファイルををオプティマイザーに通すだけだ
$(DIST_MIN): $(DIST)
  $(MIN) $(MINFLAGS) $&amp;lt; -o $@
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ビルドクリーン&#34;&gt;ビルドクリーン&lt;/h2&gt;

&lt;p&gt;makeは&lt;code&gt;.PHONY&lt;/code&gt;と呼ばれる&lt;a href=&#34;https://www.gnu.org/software/make/manual/html_node/Special-Targets.html&#34;&gt;特別なターゲット&lt;/a&gt;を持っており、この依存ファイルは偽りのターゲットとみなされる。&lt;code&gt;make&lt;/code&gt;は、その名前のファイルが存在しているかどうか、最終更新時刻がどうかに関わらず、無条件にこのレシピを実行する。これはファイルが生成されたかどうかに関係なくスクリプトを実行したいケースで役立つだろう。ビルドをクリーンしたい場合の例は以下。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;clean:
  rm $(LIB)
  rm $(DIST)
  rm $(DIST_MIN)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;makeは難しいためか少し不当な評価をされているように思えるが、実際はシェルスクリプトとたいして変わりはない。私の考えでは、シンタックスはとても明解で簡潔であり、ストリームであり、パイプであり&lt;code&gt;unix&lt;/code&gt;と呼ばれる大きなエコシステムとの大きな相互運用性も手に入る。make万歳！Makefileを書こう！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/caspervonb/d2f4ea03c8166eef7d01&#34;&gt;この記事のサンプルコードはこちら&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;記事に対する意見はご自由に&lt;a href=&#34;http://twitter.com/caspervonb&#34;&gt;@caspervonb on Twitter&lt;/a&gt;に。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;私はWebデザイナー出身なので、おっさんだけどmakeを知らない方のおっさん。そうゆう人も多いのではないかな。まぁプロジェクトメンバーによってビルドツールを選べば良いと思うけど、makeも憶えておいて損はないと思う、ってじっちゃんが言ってた。&lt;/p&gt;

&lt;h4 id=&#34;関連エントリ&#34;&gt;関連エントリ&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://t32k.me/mol/mol/log/npm-run-script/&#34;&gt;Grunt/Gulpで憔悴したおっさんの話 - MOL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
        <item>
            <title>【翻訳】ビジュアルデザインはつまらなくなってしまったのか？</title>
            <link>https://t32k.me/mol/log/has-visual-design-fallen-flat/</link>
            <pubDate>Wed, 11 Feb 2015 01:08:56 -0800</pubDate>
            
            <guid>https://t32k.me/mol/log/has-visual-design-fallen-flat/</guid>
            <description>

&lt;p&gt;&lt;cite class=&#34;citation&#34;&gt;
&lt;img src=&#34;https://t32k.me/mol/mol/images/people/emmet_connolly.jpg&#34; alt=&#34;Emmet Connolly&#34; /&gt;
Original：&lt;a href=&#34;http://blog.intercom.io/has-visual-design-fallen-flat/&#34;&gt;HAS VISUAL DESIGN FALLEN FLAT?
&lt;/a&gt;（&lt;time&gt;2015-01-20&lt;/time&gt;）by &lt;a href=&#34;https://twitter.com/thoughtwax&#34;&gt;Emmet Connolly&lt;/a&gt;
&lt;/cite&gt;&lt;/p&gt;

&lt;h2 id=&#34;2013年から2014年の劇的なuiフラット化により無数のピクセルが流れ落ちていった&#34;&gt;2013年から2014年の劇的なUIフラット化により無数のピクセルが流れ落ちていった&lt;/h2&gt;

&lt;p&gt;それはビジュアルデザインにおいて非常に大きな変化だった。Microsoftの急進的でモダンなMetro UIはその前兆だった。iOS7のリリースよって大衆化し、UIのトレンドは2極化した。Google Material Designによって、おおかた完成した。&lt;/p&gt;

&lt;p&gt;フラットデザイン（未完成であるけれど便利な表現）はスキューモーフィズム（同前）を駆逐するだけでなく、それの墓の上で踊り、すべてのべべル、影、墓石のテクスチャさえ消し去ってしまった。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2015/0211-01.png&#34; alt=&#34;Google Calendar&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上図のようなデザインである。 発展、変化、流行は避けられないものだ。このような最新スタイルもまた、いつの日か廃れていくだろう。未来のトレンドを予測することはつまらないゲームかもしれないが、今日の私たちの現在位置を確認し、未来の方向性に思いをめぐらすのは興味深い。何がフラットデザインを延命させるのか？何が次のソフトウエアのビジュアルデザインを代表するものになるのか？&lt;/p&gt;

&lt;h2 id=&#34;最近のビジュアルデザインの傾向&#34;&gt;最近のビジュアルデザインの傾向&lt;/h2&gt;

&lt;p&gt;現在のソフトウエアにおける一般的なビジュアルデザインの傾向をリストにした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iOSとMaterial Designに過度に影響を受けており、それらのガイドラインに奴隷のように執着している。&lt;/li&gt;
&lt;li&gt;最小限の影を伴ったフラットレクタングルは頻繁に大きな写真やビデオで使用される。&lt;/li&gt;
&lt;li&gt;コンテンツ周りのネガティブスペース、密度の低い情報とグリッドレイアウト、大胆さにフォーカス、簡潔なタイポグラフィ。&lt;/li&gt;
&lt;li&gt;ボーダレス、アクセントとしてビビッドな色が使われるがだいたいプレーンな白いブロックが並んでいる、ポップなカラー配色、低彩度色は写真でよく使われる。&lt;/li&gt;
&lt;li&gt;ブラー効果の多用、寒色で目立つネオン、これらはマーケティング上有用かもしれないが、コミュニケーション　上は必要ではない。&lt;/li&gt;
&lt;li&gt;ビジュアル的な装飾を外せば、なめらかなアニメーションとでしゃばらないトランジション効果によってモダンデザインの新鮮さと洗練した印象を与える。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つまり、現在のビジュアル言語の多くは簡潔なシンプリシティのことであり、それはうまく機能している。そこには少なからずトレンドという意味合いがあるかもしれないが、もちろん、これらは一般的に望ましい結果だと言える。アマチュア精神またはソフトウエアにおける簡潔さとデザインの過小評価によって足止めされながらも数十年間にわたって発展してきたデジタルデザインの成熟を意味している。趣味の悪いデザインに見ずにインターネットを楽しむことができる。1つの産業として私たちはこれを誇りに思うべきだろう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2015/0211-04.png&#34; alt=&#34;デザイントレンドの例&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ミニマム化の傾向はユーザーがより成熟してきた表れと主張するものもいる。つまり、UIがどのように作用するのか分かっているユーザーにとっては、明らかに押せるとわかるようなベベルボタンはもはや必要とされない。補助輪が外されたことにより、デザイナーはユーザーの教育義務から開放され自由に表現できるようになった。最終的にモバイル画面の小ささは、より使いやすくシンプルに、ごちゃごちゃしないデザインの実現に貢献した。&lt;/p&gt;

&lt;h2 id=&#34;デザインのコモディティ化&#34;&gt;デザインのコモディティ化&lt;/h2&gt;

&lt;p&gt;目を細めて頭をかしげながら見れば、これらのデザインはどれもひどいものに見えるだろうか？それともよいものだろうか？もしくは同じように見えないだろうか？確かにキレイだけど、少しつまらなくはないだろうか？&lt;/p&gt;

&lt;p&gt;多くのIT企業が最新のトレンドを取り入れたデザインをこぞって採用すれば、それはたちまちコモディティ化する。目新しい見た目はクリシェ（仏：陳腐な決まり文句）になる。このスタイルが安っぽくまねされやすいために、このようなデザインの単調な流れとなった。つまり、背景にブラー効果の写真を添え、Helvetica Neueの文字をセンター揃えでトップに置けば、ほとんどできたようなものだ。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p&gt;some beautiful agency sites. but we may be approaching a singularity in the design of ourselves. &lt;a href=&#34;http://t.co/ZgvdrMLS81&#34;&gt;pic.twitter.com/ZgvdrMLS81&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tim Caynes (@timcaynes) &lt;a href=&#34;https://twitter.com/timcaynes/status/554593526034731008&#34;&gt;January 12, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;私たちが見落としている他のデザインの可能性とはなんだろうか？インターネットとそれを囲むテクノロジーは私たちの世代の文化を作ってきた。個々のデザインを取り上げて見れば美しいだろうが、一体誰が１種類の美しさしかない世界で暮らしたいと思うのだろうか？&lt;/p&gt;

&lt;p&gt;ソフトウエアにおける現状のビジュアルデザインは心地よく不快感のない一方で、いくぶんか退屈である。一時的に心地よいスタイルに行き着くのはもちろん、自然なことである。これらは流行のサイクルに入っており、モバイルUIデザインは明らかに多くの手がかりを与え続けている。私たちがトレンドのピークまできていることを誰が知ってるだろうか、それはもしかしたらピークフラットかもしれない。&lt;/p&gt;

&lt;p&gt;タッチスクリーンデバイスの登場によってこのスタイルが引き起こされたのなら、より新しいテクノロジーがまた全く新しいビジュアルスタイルのトリガーとなるかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;デザインにおける技術的な触媒&#34;&gt;デザインにおける技術的な触媒&lt;/h2&gt;

&lt;p&gt;新たな素材がこういったトレンドの引き金となるなら、過去や他のデザインスクールを振り返り、技術的な挑戦にどのようにデザイナーが答えを出してきたのか探ることは、現在の私たちにとって良いヒントになるかもしれない。&lt;/p&gt;

&lt;p&gt;1900年代初期に、スイス系フランス人建築家のル・コルビュジエが鉄筋コンクリートの新しい建築スタイルを確立し、今まで構造的に不可能だったデザインが可能になった。絶対的な美とミニマリズムを追いかける彼の作品において、建物の構造は削減され、劇的で魅力的な現代建築の新しいスタイルを作った。彼にとって必要のないものと思われるすべては無用であるか、不快なものでしかないように思われた。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2015/0211-02.png&#34; alt=&#34;サヴォア邸&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ル・コルビュジエのスタイルが与えた影響は大きかったけれども、現代でこのような建築物を見かけることない。なぜだろうか？1つの理由として、これらのデザインは単独で見ると素晴らしいものであるが、延々と続く場合はすべてが死んだように見える。ル・コルビジェの未完成プランである、60階建の住宅地『輝ける都市』（&lt;a href=&#34;http://www.archdaily.com/411878/ad-classics-ville-radieuse-le-corbusier/&#34;&gt;Radiant City&lt;/a&gt;、パリ）は、実現していたら間違いないく&lt;a href=&#34;http://en.wikipedia.org/wiki/Pruitt%E2%80%93Igoe&#34;&gt;社会的なデザイン惨事&lt;/a&gt;となっていただろう。それはもはやモダニティによる圧政に等しく、偉大な都市としての魂が失われていると言うまでもない。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2015/0211-03.png&#34; alt=&#34;輝ける都市&#34; /&gt;&lt;/p&gt;

&lt;p&gt;代替案はデザインに対してよりボトムアップであり、有機的であり、ミックスされたアプローチが必要である。ジャーナリストのジェイン・ジェイコブズ氏は彼女の素晴らしい著書である『アメリカ大都市の死と生』（The Death and Life of Great American Cities）において、こう記している。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;醜悪や無秩序よりもたちの悪いものがある。これは一見して秩序があるように見せかけているが、それは現実世界の秩序、存在する混乱や苦悩を無視・抑制することによって成し遂げられたものであり、それは偽りの仮面でしかない。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;延々と繰り返せば美しくてシンプルなデザインも、良くてつまらないもの、悪くて醜いものへと変貌してしまう。もしすべてのソフトウエアが同じスタイルとなれば、私たちは多様性を認めない愚か者になってしまう。&lt;/p&gt;

&lt;p&gt;私たちが都市に住んでるように、デジタル空間にも生きている。この空間が私たちに与える影響は重要であり、もしそれが本当に特別なものになるのであれば、不確かな要素を取り込むことによってバランスを整える必要性があるのではないだろうか。他のものとの兼ね合いにおいてプロダクトが突出するのは美の豊かさと多様性を認めることであり、そうすることで、真の美しいデザイン表現に近づくことができるのだ。&lt;/p&gt;

&lt;h2 id=&#34;次になにが来るのか&#34;&gt;次になにが来るのか？&lt;/h2&gt;

&lt;p&gt;以下の問いかけに思慮をめぐらすのは価値のあることであり、その過程において、より成熟したソフトウエアのビジュアルデザインがどうなっているか想像してみてほしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デスクトップで、ドラッグ可能なパネル操作は、2Dポインティングデバイスに対する自然な補完といえるかもしれない。現在のトレンドは、なめらかで身動きの取れない石版のようなデバイス（モニターやタブレット）によって、さまざまな影響を受けている。そういう意味では、フラットデザインというのは、初期のスマートフォンの過剰なメタファーよりもタッチスクリーンに対して『ネイティブ』と言えるのかもしれない。たぶん、&lt;a href=&#34;http://worrydream.com/ABriefRantOnTheFutureOfInteractionDesign/&#34;&gt;ガラスの下にある画像&lt;/a&gt;がそう見えるべきである正直な本音かもしれない。ツールが私たちを形作る、それから私たちがどのようにデザインするかデザインする。デバイスの特性が変わることで私たちの見ているものに、どのような影響をあたえるだろうか？どのくらいの期間フラットデザインが続くのだろうか？&lt;/li&gt;
&lt;li&gt;すべてのトレンドは大衆の反発によって引きずられる。自然の流行の満引きによれば、ミニマム至上主義が終わる日が来るだろう。90年代のデスクトップ印刷ソフトウエアはグランジ雑誌をリードした。00年代の家電としてのコンピューターはオーバーサイズピクセルの表現をリードした。現在はタッチスクリーンとフラットデザインがある。また次があるだろうし常にトレンドは存在する。&lt;/li&gt;
&lt;li&gt;私たちが触れるデータはますます小さなコンテンツの塊となっており、それは&lt;a href=&#34;http://blog.intercom.io/why-cards-are-the-future-of-the-web/&#34;&gt;カード&lt;/a&gt;の形をしている。アプリの機能の多くは&lt;a href=&#34;http://blog.intercom.io/the-end-of-apps-as-we-know-them/&#34;&gt;OSレベル&lt;/a&gt;まで内包するようになるだろうか？もしそうであれば、さらに同質的なUIへとなっていくのか？今度はそのトレンドに反する動きがあるのだろうか？&lt;/li&gt;
&lt;li&gt;テクノロジーはいまも山火事がごとく世界中に広がっている。オンラインの数億の人々の世界は、現在の代表的なデザインであるDesigned-in-Californiaとはまったく異なる、彼らのスタイル、志向、文化的影響とともに、いったい何をもたらすのだろうか？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;さて、これの予想のどれが現実となるだろうか？思えば遠くに来たものだ。わたしはこれから嘘をつくつもりはない。&lt;/p&gt;

&lt;p&gt;実際のところ私は知らないのだ。&lt;/p&gt;

&lt;p&gt;たぶん今後、大きなシフトチェンジは起こらないだろう。デスクトップメタファーが生まれて以来、UIにおける現実世界のつまらないオブジェクト表現は長い間、変わりなかった。一体誰がこの最小限に装飾されたデジタルオブジェクトを操作する新しいアプローチが長くつづくと言えるだろうか？&lt;/p&gt;

&lt;p&gt;私はいくぶんか懐疑的である。&lt;/p&gt;

&lt;h2 id=&#34;君は答えを持っているか&#34;&gt;君は答えを持っているか？&lt;/h2&gt;

&lt;p&gt;あなたの考えをコメントに書いてほしい。最近あなたが見たとてもユニークなデザインはなんだろうか？私たちはあなたが考える『次』がどんなものか知りたい。&lt;/p&gt;

&lt;p&gt;もしくは一緒に考えてみないだろうか？私たちは新しいデザインスタイルを創り、それを一貫性がある洗練されたマルチプラットフォームデザインシステムに落としこめる&lt;a href=&#34;http://intercom.workable.com/jobs/31953&#34;&gt;Senior Visual Designerを募集している&lt;/a&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;[翻訳ここまで]&lt;/p&gt;

&lt;p&gt;エンジニアの書く文章と違ってデザイナーの英語は難しい。そんなことはどうでもいいが、毎度すてきなデザイン記事を書くことに定評のある&lt;a href=&#34;http://blog.intercom.io/category/design/&#34;&gt;Intercom&lt;/a&gt;でデザインディレクターをしている&lt;a href=&#34;https://twitter.com/thoughtwax&#34;&gt;Emmet Connolly&lt;/a&gt;氏の記事。日本のデザイナーからどんな反応があるのか、彼は楽しみにしていたので、よかったらここにコメントしてくださいませ。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>【翻訳】移民は安価な労働力のためではなく優秀な人材の確保のため</title>
            <link>https://t32k.me/mol/log/immigration-is-about-talent-not-costs/</link>
            <pubDate>Wed, 07 Jan 2015 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/immigration-is-about-talent-not-costs/</guid>
            <description>

&lt;p&gt;&lt;cite class=&#34;citation&#34;&gt;
&lt;img src=&#34;https://t32k.me/mol/mol/images/people/yuri_sagalov.jpg&#34; alt=&#34;Yuri Sagalov&#34; /&gt;
Original：&lt;a href=&#34;https://www.aerofs.com/blog/immigration-is-about-talent-not-costs/&#34;&gt;Immigration is about talent, not costs&lt;/a&gt;（&lt;time&gt;2014-12-02&lt;/time&gt;）by &lt;a href=&#34;https://twitter.com/yuris&#34;&gt;Yuri Sagalov&lt;/a&gt;
&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;先週、BusinessWeekは『&lt;a href=&#34;http://www.businessweek.com/articles/2014-11-24/the-tech-worker-shortage-doesnt-really-exist&#34;&gt;テックワーカー不足問題は本当は存在しない&lt;/a&gt;』という記事を出した。FacebookやMicrosoftのような企業は実際のところ低賃金労働者を探しているだけだと、テックワーカー不足問題に異論を唱える識者に彼らはインタビューをしていた。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;一般的な認識として、人手不足である証拠はまったくもってない、とラトガース大学で公共政策の教鞭をとっているHal Salzman教授は語っている。彼らは自分たちが提示するサラリーでの働いてくれる労働者を見つけることが出来ないだけかもしれない。しかし、私が半額のテレビを見つけられないと同じようにそれが人手不足として認められるとは思わない。&lt;br /&gt;
    …&lt;br /&gt;
    FacebookとMicrosoftは低賃金労働者を多く雇いたいだけという事実に私たちは異論はないと、Salzman氏と共同著者であるDaniel Kuehn氏は答える。またUrban Instituteの助教授の調査によると『しかし、それは人手不足とはみなされない』&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ほんの数時間後、Voxは『&lt;a href=&#34;http://www.vox.com/xpress/2014/11/24/7275635/tech-intern-salary&#34;&gt;テック企業のインターンはあなたよりも稼ぐ？&lt;/a&gt;』という記事を出した。彼らはあけっぴろげにいくつかのIT企業の給料をツイートしていた。なかには高額のもあったし、思ったほどでもないものある。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2015/0107-01.png&#34; alt=&#34;Tiffany Zhong&#34; /&gt;  Friend made a list of top internship offers ― &lt;a href=&#34;https://twitter.com/tzhongg/status/536565474041937921/photo/1&#34;&gt;Tiffany Zhong on Twitter&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;低賃金労働者論争の話はここでおしまいだ。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;コスト削減でなく優秀な人材確保のために雇う&#34;&gt;コスト削減でなく優秀な人材確保のために雇う&lt;/h2&gt;

&lt;p&gt;私はアメリカで事業を始めるために引っ越してきた創業者のひとりである。長い間、移民政策について特に関心はなかったが、最近の出来事がそれについてもう一度考えるときが来たようだ。このタイミングで私の考えを共有することが適切かと思う。&lt;/p&gt;

&lt;p&gt;私は共同創業者とAeroFSをスタートさせるためにカナダからアメリカ合衆国に来た。私たちはベンチャーキャピタルをたて、従業員を雇用し（現地採用・外国人採用両方）、ここカリファルニアである程度の成功を手に入れた。&lt;/p&gt;

&lt;p&gt;AeroFS設立時、H1-B（特殊技能職：プログラマー等が該当する）ビザの上限数は問題ではなかった。一般的に、H1-Bの申請期間は毎年4月から始まり10月までエントリーできる。2010年に私が申請したとき、ちょうど10月にその年のビザを申請したが、12月には申請が受理され、無事に2011年初頭から米国で働けるようになった。&lt;/p&gt;

&lt;p&gt;数年後、私たちは外国人と現地人を雇用した。もちろんその目的は良い人材を獲得するためであり、上記で述べられているような安い労働力という観点は一切なかった。事実、H-1Bビザの制限により高度な技術を持った人材はアメリカ政府によって労働者を雇う州の賃金相場に基づいて厳格に賃金が決められるので、先のトピック自体意味のないものとなる。&lt;/p&gt;

&lt;p&gt;いくつかの理由によって、大抵の場合、外国人労働者の採用には多くのコストがかかる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;面接のための交通費や宿泊費&lt;/li&gt;
&lt;li&gt;移民手続きにかかる費用（最高$8000の法的手続き費用）&lt;/li&gt;
&lt;li&gt;引越し費用の補助（運搬コスト、赴任手当等）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つまり、現地採用したほうがコストは低く抑えられて好ましいと考えるかもしれないが、すべてのエンジニアは全員同じ能力なわけがあるはずはないし、優秀なエンジニアは世界的に見ても少ない。したがって、外国で優秀なエンジニアを見つけた場合、なんとしても彼らにオファーを出し、雇うよう努めなければならない。&lt;/p&gt;

&lt;p&gt;しかしながら不幸にもこれらは昨年から変わった。私たちは、まずH-1Bの定員について確認しなければならない。&lt;/p&gt;

&lt;h2 id=&#34;h-1bビザの定員数の推移&#34;&gt;H-1Bビザの定員数の推移&lt;/h2&gt;

&lt;p&gt;H-1Bビザの定員65,000人は、1990年の議会で移民法の一部として導入され、翌年度の1992年度(1991年10月1日)より施行。最初の5年間は定員に達しなかったが1997年度に初めて定員に達し翌1998年度もITブームの影響で定員を達した。&lt;/p&gt;

&lt;p&gt;移民需要の高まりにより、アメリカ政府は米国の競争力及び労働力改善法（ACWIA）を1998年に承認した。これにより1999年度と2000年度のH-1Bビザの定員は115,000人まで一時的に拡大された。&lt;/p&gt;

&lt;p&gt;2番目の法、21世紀における米国の競争力法（AC21）は2000年に承認され、H-1Bビザの定員は195,000人まで2001年度から2003年度まで引き上げられた。&lt;/p&gt;

&lt;p&gt;この一時的な増加は2004年度までで、それ以降は195,000人から、また65,000人に戻った。&lt;/p&gt;

&lt;h2 id=&#34;私たちがしなければいけなかったこと&#34;&gt;私たちがしなければいけなかったこと&lt;/h2&gt;

&lt;p&gt;アメリカ経済が回復するにつれて、私たちは候補者のためにH-1Bビザを獲得するのはコイン投げのようなものだと理解した。2013年において、政府が申請受け入れをストップするまでに65,000人の定員に対して124,000人の申請があった。それも4月が始まって、たったの5日間でだ。2014年は65,000人の定員に対して172,000人の申請があった。申請にあたっての時間的コストや候補者をリクルーティングする労力を考えてみて欲しい。そのようなコストを支払っても、いざ彼らを雇うときに私たちには、なにもできることがないのだ。&lt;/p&gt;

&lt;p&gt;あるケースにおいて、私たちはこの宝くじに外れた。私たちのH1-Bの申請書は封も明けられないまま返却され、残ったのは私たちが必要としている分野で素晴らしいエキスパートである候補者だけである。しかし彼は合法的に私たちの会社では働けない。&lt;/p&gt;

&lt;p&gt;私たちはこの候補者を犠牲にはしたくなかったので代替手段を模索し始めた。O-1（科学、芸術、教育、ビジネス、またはスポーツの分野で「卓越した能力を有する者」に発給される）ビザは彼に適用できるだろうか、いや資格を満たしていない。&lt;a href=&#34;http://japanese.japan.usembassy.gov/j/visa/tvisaj-ivcategories.html#dv&#34;&gt;グリーンカード抽選&lt;/a&gt;は？当てにならない。他に使えそうなビザはないだろうか？悲しきことにない。彼はフランス人だ。そのため、カナダ人専用のTNビザ、オーストラリア人専用のE3ビザも該当しない。&lt;/p&gt;

&lt;p&gt;最終的に、新しい支社を違う国で立ち上げ、そこで候補者を雇い入れるしか方法がないことを理解した。&lt;/p&gt;

&lt;p&gt;それが私たちがやったことである。新しい従業員とのコミュニケーションのために、出来る限りアメリカから近いカナダに子会社を設立した。彼が最初の社員になるが、たぶん、最初で最後とはならないだろう。&lt;/p&gt;

&lt;p&gt;これまで私たちは会社を運営してきて、コスト削減のために採用に関する決定がおこなわれたことはない。私たちが誰かを雇用しなければならないとき、私たちは採用する。なぜなら、彼らがどこの国の出身であろうが、私たちが求めるスキルを持って面接に臨んでいるからだ。&lt;/p&gt;

&lt;p&gt;プロフェッショナルな外国人労働者がアメリカで働けないことは、単純に彼らが私たちの国の代わりに他の国で貢献することを意味する。&lt;/p&gt;

&lt;p&gt;テックタレントの獲得競争は現実に今まさに起きているのである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=8687804&#34;&gt;Hacker Newsで議論する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;カナダ人でベイエリアで&lt;a href=&#34;https://www.aerofs.com/&#34;&gt;AeroFS&lt;/a&gt;という会社を経営している&lt;a href=&#34;https://twitter.com/yuris&#34;&gt;Yuri Sagalov&lt;/a&gt;氏の記事。翻訳にあたっては&lt;a href=&#34;https://twitter.com/yuris/status/551865534888038403&#34;&gt;氏の同意を得ている&lt;/a&gt;。Hacker Newsのスレッドを見てもらえれば分かるが、結構盛り上がってたので翻訳してみた。&lt;/p&gt;

&lt;p&gt;アメリカで働くことは非常に難しいとは聞いていたが、やっぱり、そのようだ。&lt;a href=&#34;http://chikawatanabe.com/2010/03/09/visa-2/&#34;&gt;アメリカの就労ビザが欲しければ留学せよ&lt;/a&gt;との記事を見たことはあるが、そんな金持ってない。&lt;/p&gt;

&lt;p&gt;記事で代替案と提示してある方法として&lt;a href=&#34;http://www.cbc.ca/news/canada/british-columbia/silicon-valley-north-vancouver-tech-surges-as-u-s-immigration-reform-idles-1.2732667&#34;&gt;Facebookもそのような事をしている&lt;/a&gt;。そう考えると、ベストなのは北のシリコンバレーであるバンクーバーなのであろう。アメリカほどではないにしろ、カナダでの就労ビザ獲得も難しいけど。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>【翻訳】デザインエンジニアリング</title>
            <link>https://t32k.me/mol/log/design-engineering/</link>
            <pubDate>Mon, 05 Jan 2015 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/design-engineering/</guid>
            <description>

&lt;p&gt;&lt;cite class=&#34;citation&#34;&gt;
&lt;img src=&#34;https://t32k.me/mol/mol/images/people/jonathan_snook.jpg&#34; alt=&#34;Jonathan Snook&#34; /&gt;
Original：&lt;a href=&#34;http://snook.ca/archives/opinion/design-engineering&#34;&gt;Design Engineering&lt;/a&gt;（&lt;time&gt;2014-11-25&lt;/time&gt;）by &lt;a href=&#34;http://snook.ca/about/&#34;&gt;Jonathan Snook&lt;/a&gt;
&lt;/cite&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScriptだけがフロントエンド開発ではない。それはデザインとディベロップメントの技術が人種のるつぼのように融合したものである。それはアクセシブルなUIを実装するためであり、Web標準を受け入れるものである。  — &lt;a href=&#34;https://twitter.com/matthillco/status/480986847473303552&#34;&gt;Matt Hill&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Shopify Adminの開発に関して言えば、最近まで2つの専門職、つまりデザイナーとエンジニアを受け入れていた。今では3つめの専門職がある、しかしながらそれが確かなものとして認識されるまで時間がかかった、フロントエンドデベロッパーである。フロントエンドデベロッパーのスキルはデザインとエンジニアリング両方にまたがっている。これまでクオリティの高いフロントエンドコードをフロントエンドデベロッパーの助けもなしに書けるデザイナーを雇えて、私たちは非常にラッキーだった。&lt;/p&gt;

&lt;p&gt;フロントエンドデベロッパーの精鋭チームの作り方に関してはいくつかの異論がある。『もし彼らがデベロッパーであるのなら、彼らはエンジニアチームに所属しているだろう。』つまり逆を言えば、バックエンドデベロッパーはフロントエンドデベロッパーでもあるということだ。Shopifyは彼らデベロッパーに対してフルスタックであることを期待している。しかし、フロントエンド開発がディベロップメントであるのなら、なぜ私たちはデザイナーにもそれを求めないのか？&lt;/p&gt;

&lt;p&gt;私たちは&lt;strong&gt;フロントエンド開発&lt;/strong&gt;と&lt;strong&gt;バックエンド開発&lt;/strong&gt;という用語を使うが、フロントエンドデベロッパーが開発に着手する段階とバックエンドデベロッパーが開発を終える段階を多くの人がよく勘違いしていることが問題だ。&lt;/p&gt;

&lt;p&gt;開発プロセスを考えてみれば、そこには3つの段階、デザイン（Design）、デザイン実装（Design Implementation）、アプリケーション開発（Application Development）が存在する。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2015/0105-01.png&#34; alt=&#34;Spectrum of Application Development&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;デザイン&#34;&gt;デザイン&lt;/h2&gt;

&lt;p&gt;デザイナーは多くのツールを使い、彼らはデザインがどのように実装されているか理解すべきだが、HTML/CSS、JavaScriptを使って彼ら自身のデザインを実装する必要はない（ちょうど印刷デザイナーに印刷を任せる必要がないのと同じようにだ。なぜなら私たちはプリンターを持っているから）。デザイナーが複数のデザインの試行錯誤に集中できる、もしくはデザイン的問題に本格的に取り組むことができることはアドバンテージであり、結果としてデザイン実装（デザインをプロダクト前段階のHTML/CSSに落としこむこと）に集中する必要性はない。&lt;/p&gt;

&lt;p&gt;デザイナーはコードの書き方を知るべきと私は強く信じているが、組織の拡大によっては専門性を高める必要もあると述べたい。&lt;/p&gt;

&lt;h2 id=&#34;アプリケーション開発&#34;&gt;アプリケーション開発&lt;/h2&gt;

&lt;p&gt;アプリケーション開発とはインターフェースとサービングをベストの方法で繋げることである。私たちはクライアントサイドMVCもしくはサーバーサイドレンダリングをどちらを使うべきか？キャッシュもしくはストレージシステムとは何か？データモデルとは何か？これらの問いはHTTPの境界線を超えた問題であり、どちらか片方の領域だけで考えるべきことではない。&lt;/p&gt;

&lt;p&gt;OOPとプロトタイプ継承を理解することは、複数ブラウザでのCSSプロパティのレンダリングと、多様な入力方法、マウス、キーボード、ジェスチャーまたはスクリーンリーダーにアクセシブルでありつつ、さまざまな携帯端末、タブレット、またはデスクトップでベストな実装の仕方を理解することとは違うスキルセットを必要とする。&lt;/p&gt;

&lt;h2 id=&#34;デザイン実装&#34;&gt;デザイン実装&lt;/h2&gt;

&lt;p&gt;デザインを実装することはHTML/CSSといくぶんかのJavaScriptを書くことを意味し、さまざまなデザイン上の制約、つまり異なるブラウザ、異なるサイズ、異なる解像度、異なるインタラクションの方法（マウス、キーボード、ジェスチャー、スクリーンリーダー）を克服しデザインを確かなものとすることである。またそれはUX検証のためにプロトタイプを作成することでもある。これらの領域を担当するものはデザイナーである必要はないが、デザイン思考を持っており、かつデベロッパーである必要はないが、テクニカル思考を持っている。&lt;/p&gt;

&lt;p&gt;この役割の人たちはデザインとエンジニアリングの間に立ち、見事な架け橋を作ってくれる。私はよくこの人たちのことを『デザインの調停者（arbiters of design）』と呼んでいる。彼らはそのデザインが実装可能かどうか、制約がどんなものか教えてくれたり、可能な限り多くのユーザーが使いやすいインターフェースと一貫性を構築するために手助けをしてくれる。彼らはビジュアルワークをコードに変換してくれる。彼らはデベロッパーのマインドセットであるレンダリングのパフォーマンスや、読み込み時間に関心があり、ハイパフォーマンスなフロントエンドを実装するためにエンジニアリングをもちいて解決してくれる。&lt;/p&gt;

&lt;h2 id=&#34;役割&#34;&gt;役割&lt;/h2&gt;

&lt;p&gt;これらの境界を超えて仕事ができるジェネラリストとそれぞれのセクションで専門性を発揮できるスペシャリスト両方を揃えることが重要である。ほんのすこし前まで、Shopify Admin内で、私たちはデザイン実装を担当する者の育成に力を入れてこなかった。この理由は、私たちがスペシャリストを超えたジェネラリストを求めているためであり、デザイナーはデザインに集中するべきとと考えているためだ。&lt;/p&gt;

&lt;h2 id=&#34;彼らをなんと呼べばいいのか&#34;&gt;彼らをなんと呼べばいいのか？&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;フロントエンドはデザインエンジニアリングと言い換えることができるか？  — &lt;a href=&#34;https://twitter.com/hereinthehive/status/481509193774792705&#34;&gt;Dan Donald&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;私たちはこの役割の人をなんと呼ぶべきか議論した。&lt;strong&gt;デザインインプリメンター（Design Implementors）&lt;/strong&gt;はあまりしっくりこない。&lt;strong&gt;デザインエンジニア（Design Engineers）&lt;/strong&gt;と呼ぼうと私たちはほぼ決めていたが、やはりそれではいささか『ディズニー』すぎるのだ。&lt;/p&gt;

&lt;p&gt;私たちは既にShopify.comを担当する優秀なフロントエンドデベロッパーチームをトロントとほかの進行中のプロジェクトに持っていた。彼らはどちらかと言うとバックエンド開発寄りだったため、私たちのそれとはすこしばかり違っていた。&lt;/p&gt;

&lt;p&gt;結局、私たちは&lt;strong&gt;フロントエンドデベロッパー（Front-End Developer）&lt;/strong&gt;に戻ってきた。&lt;/p&gt;

&lt;p&gt;彼らが担当する領域の端にも関わらず、それは一般的であり、すべてのフロントエンダーを内包する。&lt;/p&gt;

&lt;p&gt;産業として、私たちがこれまでほかのテクノロジーで見てきたように私たちは&lt;a href=&#34;https://github.com/micahgodbolt/front-end-architecture&#34;&gt;デザイン・コードの設計&lt;/a&gt;においてより専門性を高める方向にシフトしていく傾向があり、プロダクトをスケールし、大規模なコードベースと大人数でのサイト開発においての新しいワークフローを見守り続けている。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.shopify.com/&#34;&gt;Shopify&lt;/a&gt;のWebデベロッパー・デザイナーであり、&lt;a href=&#34;https://smacss.com/ja&#34;&gt;SMACSS&lt;/a&gt;の提唱者でもあるJonathan Snook氏の記事。翻訳にあたっては氏の同意を得ている。&lt;/p&gt;

&lt;p&gt;個人的には自分の肩書に関してはあまり興味はないが、名前があやふやなものに対して世間一般の認知は得られない。どういったものかよくわからないものにはお金は回らない。かける労力に対して見合った見返りがなければ理不尽であろう。もしフロントエンド周りで仕事をしているのであれば、自分たちの職種を定義し主張することが存在価値を認めさせる一歩だと思う。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>【翻訳】document.writeでSCRIPTを書き出すなやで！</title>
            <link>https://t32k.me/mol/log/dont-docwrite-scripts/</link>
            <pubDate>Wed, 11 Apr 2012 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/dont-docwrite-scripts/</guid>
            <description>&lt;p&gt;&lt;cite class=&#34;citation&#34;&gt;
&lt;img src=&#34;https://t32k.me/mol/mol/images/people/steve_souders.jpg&#34; alt=&#34;Steve Souders&#34; /&gt;
Original：&lt;a href=&#34;http://www.stevesouders.com/blog/2012/04/10/dont-docwrite-scripts/&#34;&gt;Don’t docwrite scripts&lt;/a&gt;（&lt;time&gt;2012-04-10&lt;/time&gt;）by &lt;a href=&#34;http://stevesouders.com/&#34;&gt;Steve Souders&lt;/a&gt;
&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;昨日のブログ記事の&lt;a href=&#34;http://www.stevesouders.com/blog/2012/04/09/making-the-http-archive-faster/&#34;&gt;HTTP Archiveが速くなっている&lt;/a&gt;、大きな要因の一つとしてはスクリプトローダーを&lt;strong&gt;使用しない&lt;/strong&gt;ことです。そのスクリプトローダーとはスクリプトを動的に読み込むためにdocument.writeを使用しているものです。振り返れば、私は2009年4月の&lt;a href=&#34;http://www.stevesouders.com/blog/2009/04/27/loading-scripts-without-blocking/&#34;&gt;ブロッキングなしのスクリプト読み込み&lt;/a&gt;、&lt;a href=&#34;http://www.amazon.co.jp/dp/4873114462/&#34;&gt;続・ハイパフォーマンスWebサイト(4章)&lt;/a&gt;において、document.writeテクニックについて記述していました。それは以下のようなものです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;document.write(&#39;&amp;lt;script src=&amp;quot;&#39; + src + &#39;&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;\/script&amp;gt;’);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;document.writeを使ったスクリプトローダーの問題点：
&lt;ul&gt;
    &lt;li&gt;挿入したスクリプトより下の全てのDOM要素はスクリプトのダウンロードが完了するまでレンダリングがブロックされます。 (&lt;a href=&#34;http://stevesouders.com/cuzillion/?c0=bi1hfff0_0_f&amp;amp;c1=bj1wfff4_0_f&amp;amp;c2=bi1hfff0_0_f&#34;&gt;example&lt;/a&gt;).&lt;/li&gt;
    &lt;li&gt;また、ほかの動的読み込みもブロックします (&lt;a title=&#34;document.write script blocks async script&#34; href=&#34;http://stevesouders.com/cuzillion/?c0=hj1wfff2_0_f&amp;amp;c1=bj1dfff2_0_f&#34;&gt;example&lt;/a&gt;)。例外としては、複数のスクリプトが同一のSCRIPTブロック内にdocument.writeを使用して注入された場合です(&lt;a title=&#34;Two document.write scripts in one SCRIPT block&#34; href=&#34;http://stevesouders.com/cuzillion/?c0=hj1wfff2_0_f&amp;amp;c1=hj1wfff2_0_f&#34;&gt;example&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;document.writeを使用したスクリプトローダーのため、私が最適化しようとしたページのレンダリングは遅れ、同じページ内の他の非同期スクリプトに関しても読み込みに時間がかかるようになりました。私はこのスクリプトローダーをはずし、非同期にスクリプトを読み込むために代わりのコードを書きました。それはGoogle アナリティクスの非同期スニペットで有名になった createElement-insertBefore パターンです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var sNew = document.createElement(&amp;quot;script&amp;quot;);
sNew.async = true;
sNew.src = &amp;quot;http://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js&amp;quot;;
var s0 = document.getElementsByTagName(&#39;script&#39;)[0];
s0.parentNode.insertBefore(sNew, s0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なぜdocument.writeによる非同期読み込みはこのような悪いパフォーマンスになってしまうのでしょうか？&lt;/p&gt;

&lt;p&gt;順を追って考えて見れば、そんなに不思議なことではありません。通常のマークアップによるSCRPT SRC=読み込みは後続のDOM要素のレンダリングを止めることを既に私たち知っています。また、スクリプト実行段階を抜ける前にdocument.writeは評価され、その後、ページのパースが再開されることも理解しています。したがって、通常のSCRPT SRC=をスニペットとした document.writeテクニックは残りのページのレンダリングをブロックしてしまいます。&lt;/p&gt;

&lt;p&gt;反対に、createElement-insertBeforeテクニックはレンダリングを&lt;strong&gt;ブロックしません&lt;/strong&gt;。事実、document.writeでcreateElement-insertBefore スニペットを生成しても、そのときレンダリングはブロックされません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.stevesouders.com/blog/2009/04/27/loading-scripts-without-blocking/&#34;&gt;ブロッキングなしのスクリプト読み込み&lt;/a&gt;記事での私の結論はスクリプトロード手法を選択するための&lt;a href=&#34;http://stevesouders.com/efws/images/0405-load-scripts-decision-tree-04.gif&#34;&gt;決定木&lt;/a&gt;を使用することです。そうすれば異なるシナリオにおいてどの非同期読み込みテクニックを選択するか困らないでしょう。また注意深く見れば、document.writeの使用は決して推奨されないこともお分かりになるでしょう。Webの世界はたいへん多くのものが移り変わりますが、私が2009年に出したアドバイスは今日においても正しいのです。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;改めて、続・ハイパフォーマンスWebサイトを読んでみるとdocument.writeテクニックはIEのときだけ並列ダウンロードされますと書いてある。しかもスクリプトのダウンロード中は他のリソースはブロックされるとも書いてあり、そもそも使う用途が限定的だなと印象。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>【翻訳】サイトカタリストとGoogle アナリティクスの比較</title>
            <link>https://t32k.me/mol/log/omniture-sitecatalyst-vs-google-analytics/</link>
            <pubDate>Wed, 22 Feb 2012 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/omniture-sitecatalyst-vs-google-analytics/</guid>
            <description>

&lt;p&gt;&lt;cite class=&#34;citation&#34;&gt;
Original：&lt;a href=&#34;http://www.slideshare.net/Semetis/omniture-sitecatalyst-vs-google-analytics-an-objective-comparison-7814945&#34;&gt;Omniture SiteCatalyst vs. Google Analytics&lt;/a&gt;（&lt;time&gt;2011-05-03&lt;/time&gt;）by &lt;a href=&#34;http://stevesouders.com/&#34;&gt;Semetis&lt;/a&gt;
&lt;/cite&gt;&lt;/p&gt;

&lt;div class=&#34;fluid&#34;&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/7814945&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/Semetis/omniture-sitecatalyst-vs-google-analytics-an-objective-comparison-7814945&#34; title=&#34;Omniture SiteCatalyst vs. Google Analytics - An Objective Comparison&#34; target=&#34;_blank&#34;&gt;Omniture SiteCatalyst vs. Google Analytics - An Objective Comparison&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/Semetis&#34; target=&#34;_blank&#34;&gt;Semetis&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;SiteCatalyst (´・ω・｀) BAD&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;複雑な実装（evars, props&amp;hellip;）&lt;/li&gt;
&lt;li&gt;カスタマイズの必要性&lt;/li&gt;
&lt;li&gt;要：テクニカルスーパーバイザー&lt;/li&gt;
&lt;li&gt;メンテナンスのために要：ITサポート&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;→ かなり複雑（実装&amp;amp;メンテナンス）&lt;br /&gt;
 → セットアップに週/月単位でかかる&lt;br /&gt;
 → 非常に高価なソリューション￥￥￥&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google Analytics (・∀・) GOOD!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;すべてのページに（ユニークな）1つのタグを入れるだけ&lt;/li&gt;
&lt;li&gt;オプション実装が可能

&lt;ul&gt;
&lt;li&gt;カスタム変数&lt;/li&gt;
&lt;li&gt;イベントトラッキング&lt;/li&gt;
&lt;li&gt;仮想ページビュー&lt;/li&gt;
&lt;li&gt;Eコマース, &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;→ 基本的な実装は簡単（1日もかからない）&lt;br /&gt;
 → 高度な実装に関してはそれなりに複雑&lt;br /&gt;
 → 無料であり、すべての人が使える&lt;/p&gt;

&lt;h2 id=&#34;input&#34;&gt;Input&lt;/h2&gt;

&lt;h3 id=&#34;input-traffic-filtering&#34;&gt;Input: Traffic filtering&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;SiteCatalyst (´・ω・｀) BAD&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;フィルタリングオプションに制限がある&lt;/li&gt;
&lt;li&gt;いくつかのフィルタは追加のコスト発生&lt;/li&gt;
&lt;li&gt;フィルタはプロファイルではなくレポート毎に設定する必要がある&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Google Analytics (・∀・) GOOD!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;あらかじめ定義したカスタムフィルタをプロファイルレベルで適用可能&lt;/li&gt;
&lt;li&gt;簡単な設定&lt;/li&gt;
&lt;li&gt;例：IP除外、サイトの一部分だけ含める、特定の地域だけ含めるなど&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;input-tracking-traffic-sources-campaigns&#34;&gt;Input: Tracking – Traffic sources/Campaigns&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;SiteCatalyst (´・ω・｀) BAD&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;トラッキングコードはすべてのリンクに設定しなければならない&lt;/li&gt;
&lt;li&gt;その時、トラッキングコードをSiteCatalystレポート上で確認するために分類用のファイルを送信しなければならない（SAINT 分類） 追加のステップとしてキャンペーントラッキングも同様&lt;/li&gt;
&lt;li&gt; AdWordsの費用データはトラッキングコードに統合されていない&lt;/li&gt;
&lt;li&gt;Google AdWordsとの統合はこれまた追加のコストでAdobe SearchCenterというのが存在&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Google Analytics (・∀・) GOOD!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;費用データも含めてGoogle Adowordsとの完全なる統合（無料）&lt;/li&gt;
&lt;li&gt;その他のリンク（バナーやメルマガ&amp;hellip;）もまた、キャンペーン名やソース、メディアを含んだurmパラメータで手動でトラッキングすべき&lt;/li&gt;
&lt;li&gt;フィルタを使用することでレポート上でリネームや複数のキャンペーン/流入元をまとめることが可能&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;input-tracking-goals-events-custom-variables&#34;&gt;Input: Tracking – Goals/Events/Custom Variables&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;SiteCatalyst (・∀・) GOOD!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;複数の変数をトラッキング可能、いくつかの計算指標ではブレイクダウンでレポート可能&lt;/li&gt;
&lt;li&gt;カスタムイベント、コンバージョン、トラフィック（要：カスタマイズ実装）をトラッキング可能&lt;/li&gt;
&lt;li&gt;CVファネルレポートはSCレポートインターフェース上からセットアップ可能（イベント指標に関して。計算指標はできない）&lt;/li&gt;
&lt;li&gt;ファネルレポートは事前に設定する必要はなく遡って評価可能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Google Analytics (´・ω・｀) BAD&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ゴール設定は特に実装の手間はない（URLベースのため）&lt;/li&gt;
&lt;li&gt;ファネルパスとビジュアリゼーションレポートの設定は追加のコード実装無しで簡単にセットアップ可能&lt;/li&gt;
&lt;li&gt;ファネルレポートは過去に遡れない&lt;/li&gt;
&lt;li&gt;Eコマーストラッキングは追加のタグ実装が必要&lt;/li&gt;
&lt;li&gt;カスタム変数（最大で5つ）とイベントトラッキングは異なるセグメントやインタラクションタイプをトラッキング可能&lt;/li&gt;
&lt;li&gt;イベントをゴールとして設定できる（新GA）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;interpretation&#34;&gt;Interpretation&lt;/h2&gt;

&lt;h3 id=&#34;interpretation-metrics&#34;&gt;Interpretation: Metrics&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;SiteCatalyst (・∀・) GOOD!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;指標の計算が可能。これらの指標はSC上で事前に定義された重要指標（例：直帰率、離脱率、ページビュー/訪問数、訪問者あたりの訪問数、ランディングページ、イベントコンバージョンレート,&amp;hellip;）とは別の重要指標として定義が可能&lt;/li&gt;
&lt;li&gt;データウェアハウス全ての生データを蓄積可能、カスタム・複雑なレポートも実行可能(72時間はかかる)&lt;/li&gt;
&lt;li&gt;クリックスルー、インスタンスはデフォルトの指標として使用される&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Google Analytics (´・ω・｀) BAD&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;指標を計算することができない&lt;/li&gt;
&lt;li&gt;しかし、最も重要な指標に関してはGAで事前に定義されておりすべての（カスタム）レポートで閲覧可能&lt;/li&gt;
&lt;li&gt;訪問は最も使用されるデフォルト指標&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;interpretation-dashboards&#34;&gt;Interpretation: Dashboards&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;SiteCatalyst (・∀・) GOOD!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;いちから作成可能&lt;/li&gt;
&lt;li&gt;ダッシュボードは全てのレポートを取り込むことが可能&lt;/li&gt;
&lt;li&gt;フィルタとセグメント設定も保持可能&lt;/li&gt;
&lt;li&gt;複数のフォーマットで共有可能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Google Analytics (・∀・) GOOD!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;最大でプロファイルごとに20ダッシュボードまで作成可能&lt;/li&gt;
&lt;li&gt;ユーザーフレンドリーで簡単にカスタマイズ可能&lt;/li&gt;
&lt;li&gt;ダッシュボードレポートにもフィルタが適用されるようになった&lt;/li&gt;
&lt;li&gt;新GAでは一瞬で他のユーザーへ複製が可能&lt;/li&gt;
&lt;li&gt;複数のフォーマットで共有可能&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;interpretation-on-site-performance-reporting&#34;&gt;Interpretation: On-site performance reporting&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;SiteCatalyst (・∀・) GOOD!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;柔軟なカスタムレポートで訪問者の行動を分析可能&lt;/li&gt;
&lt;li&gt;ページレベルの遷移、累積的なパスレポート&lt;/li&gt;
&lt;li&gt;内部キャンペーンのためのトラッキングコード追加可能（分類ファイルは不要）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Google Analytics (´・ω・｀) BAD&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;指定したページの前後しか分析できない&lt;/li&gt;
&lt;li&gt;ページ内（例：ヘッダー、メニュー&amp;hellip;）のインタラクションはイベントトラッキングで評価可能&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;other-differentiating-specificities&#34;&gt;Other Differentiating Specificities&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;SiteCatalyst&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;カスタマイズ性が高い（ユーザー行動、ネガティブ分析, &amp;hellip; ）&lt;/li&gt;
&lt;li&gt;サードパーティや外部システムとの統合（SAINT classification）&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Data Sources&amp;rdquo;経由でデータのインポートが可能（インポート後は削除できない）&lt;/li&gt;
&lt;li&gt;ページ遷移:ページレベルの遷移と累積的なパスレポート（GAは前後しか見れない）&lt;/li&gt;
&lt;li&gt;カスタマーサポート&lt;/li&gt;
&lt;li&gt;計算指標&lt;/li&gt;
&lt;li&gt;複数サイトで同様のレポートが比較可能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Google Analytics&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;生データの利用性、フィルタオプションの拡張性によって複数のプロファイルを作成可能&lt;/li&gt;
&lt;li&gt;簡単なCVファネルレポート vs. SCのフォールアウトレポートとイベントコンバージョンファネル&lt;/li&gt;
&lt;li&gt;追加のタグ実装なしでのGoogle AdWordsとの統合&lt;/li&gt;
&lt;li&gt;簡単に使える！しかも理解しやすい！&lt;/li&gt;
&lt;li&gt;共有設定が簡単（但しサブセットデータのみ）&lt;/li&gt;
&lt;li&gt;新・ベータバージョンの機能&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;もし、ある解析ツールから他のツールへ変更するならば、これまでに貯めたデータはあきらめなければならない&lt;/li&gt;
&lt;li&gt;新たな機能は移行コストに見合うものですか？またこれからも投資し続けますか（SiteCatalyst）？&lt;/li&gt;
&lt;li&gt;決定は見積もり次第です

&lt;ul&gt;
&lt;li&gt;実装コストは？&lt;/li&gt;
&lt;li&gt;新たなデータの解釈の必要性は？&lt;/li&gt;
&lt;li&gt;導入するためのリソースと時間は？&lt;/li&gt;
&lt;li&gt;サードパーティのデータとの連携によるポテンシャルは？（統合の必要性）&lt;/li&gt;
&lt;li&gt;自社の要件とSLAの条件は？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;というわけで、2011年5月のスライドということでちょいちょい古い部分もありますが、なんとなく理解。これにGoogleアナリティクスPremiumとかも入ってくると話は変わってくるだろうなと。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>【翻訳】なぜシリコンバレーはコードの書けるデザイナーを求めているのか？</title>
            <link>https://t32k.me/mol/log/why-valley-wants-designers-can-code/</link>
            <pubDate>Wed, 03 Aug 2011 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/why-valley-wants-designers-can-code/</guid>
            <description>&lt;p&gt;&lt;cite class=citation&gt;
&lt;img src=&#34;https://t32k.me/mol/mol/images/people/jared_spool.jpg&#34; alt=&#34;Jared Spool&#34; /&gt;
Original：&lt;a href=&#34;http://www.uie.com/brainsparks/2011/05/31/why-the-valley-wants-designers-that-can-code/&#34;&gt;Why The Valley Wants Designers That Can Code&lt;/a&gt;（&lt;time&gt;2011-05-31&lt;/time&gt;）by Jared Spool
&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;もし周りにデザイナーが大勢いるのなら、デザイナーがコードも書けることは価値のあることかどうか話題に挙げてみてください。すぐに、モーゼが紅海を2つに割ったよりも早くデザイナー達の意見は分かれるでしょう。片方はプログラミングは必要不可欠なスキルだと主張し、もう片方はプロミグラミングはデザイナーの価値を下げてしまうと猛烈に論じるでしょう。&lt;/p&gt;

&lt;p&gt;興味深いことに、プログラミングもできるデザイナーが価値があるかどうかはデザイナーの決めることではありません。それは採用マネージャーの仕事です。今日の雇用市場に基づけば、彼らがどの立場なのかは非常に明白です。多くの採用マネージャーは &lt;strong&gt;スーパーデザイナー&lt;/strong&gt; を求めています。スーパーデザイナーというのはもちろんプログラミングもできるデザイナーのことです。&lt;/p&gt;

&lt;p&gt;雇うべきスーパーデザイナーはそこら中にいる一方で、最近、シリコンバレーのスタートアップ企業から実際の需要が起きています。 AppleやMint.comのようなデザイン評価の高い成功事例に伴って、シリコンバレーの投資家や事業家はデザイナーの仕事に対して新しい理解を持つようになってきました。&lt;/p&gt;

&lt;p&gt;しかしながら、スタートアップ企業というのはできる限りムダのない経営を心がけているので、幅広いスキルを持ったタレントを探しています。シリコンバレーの住人の考えでは、もしデザインとプログラミング両方出来る人を雇うことができれば、最小限のリソースでコンセプトをプロダクトに落としこみリリースできると考えています。さもなければ、デザイナーとプログラマーの2人を雇わなければならません、もしくは誰もいなくてもやらなければなりません。&lt;/p&gt;

&lt;p&gt;私たちはここ数年間でデザイナーがいなくてもプロダクトをリリースできると証明してきました。多くの企業はこれと同じようなことをしてきましたが、リリースできたとしても素晴らしい成果をあげているとは言えません。しかしながら、プログラマーなしでプロダクトをリリースすることは不可能ではないかもしれませんが、難しいことでしょう。&lt;/p&gt;

&lt;p&gt;そうゆうわけで、プログラミングもできるデザイナーを見つけるために大金を支払うようなスタートアップ企業が数十は存在します。需要は多いですし、デザイナーでプログラミング経験者と証明できれば、プログラミングのできないデザイナーよりも給料は高くなります。&lt;/p&gt;

&lt;p&gt;スタートアップではない企業での需要はどうでしょうか？伝統的な大企業ではプログラマー、デザイナーを分けた大きなチームを簡単に作ることが可能です。&lt;/p&gt;

&lt;p&gt;しかしだからといって、コードの書けるデザイナーの価値がないというわけではありません。2人のスーパーデザイナーがいるチームでは、普通のデザイナー、プログラマーが1人づついるチームよりもフレキシブルで可能性を秘めています。フレキシブルなチームはより良いデザインされたプロダクトをより早く作ることができます&lt;/p&gt;

&lt;p&gt;プログラミングとデザインはスキルの集合です。私たちが学んだことは、役割によって分けられてない、うまくスキルが配分されたチームがより良い結果を生み出すということです。プログラミングもデザインもできる人材に恵まれたチームは、長期的に見ればスキルによって分けられたチームよりも効率的でしょう。&lt;/p&gt;

&lt;p&gt;もしあなたがデザイナーならプログラミングを学ばなくてもよいでしょう。しかし、学んで身につければ時が経つにつれてより多くのチャンスにめぐりあうことでしょう。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;次のポストではなぜデザイナーがコードを書けたほうが良いのか３つの理由を述べています。&lt;/p&gt;

&lt;p&gt;&lt;cite class=citation&gt;
&lt;img src=&#34;https://t32k.me/mol/mol/images/people/jared_spool.jpg&#34; alt=&#34;Jared Spool&#34; /&gt;
Original：&lt;a href=&#34;http://www.uie.com/brainsparks/2011/06/06/3-reasons-why-learning-to-code-makes-you-a-better-designer/&#34;&gt;3 Reasons Why Learning To Code Makes You A Better Designer&lt;/a&gt;（&lt;time&gt;2011-06-31&lt;/time&gt;）by Jared Spool
&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;
あなたが働いている領域の中間についてより深く理解できるでしょう。もし効率的なデータベース処理をできるクエリーが書ければ、トレードオフに必要な適切なレスポンス時間を設定できます。なにがコードを簡単にし、難しくするのか理解していれば、アイデアをより速く実装できるでしょう。（開発工数は限られているので工数削減以上のものが得られるかもしれません。）中間領域を知ることは事をうまく運び、 より考えられたデザインの決定をする上で役立つでしょう。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;
プログラミングを理解することで、より良いプロトタイプ作ることができます。デザインアイデアをチームメイトやクライアントに伝えるための最適な方法は、動くプロトタイプを作ることです。素早くプロトタイプを作ることであなたのアイデアに命が吹き込まれ、内なる素晴らしいアイデアを解き放たれ、あなたのデザインの本当の意味を皆が理解するのに役立つでしょう。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;
プログラミングを理解することで、製品コードのバグや欠陥を特定するのに役立つでしょう。チームメイトのデザイナーが活気づくにつれて、あなたはUIインタラクションの問題に取り掛かっているプログラマーを助ける重要な役割を担うことができるでしょう。つまりそれは、最終プロダクトがこれ以上無いほどの出来になるということです。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;実際にコードを書かなくても、どのように動くのか理解してるだけでも全然効率は違うと思うし、話も進めやすいと思うYO（個人経験談）&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>【翻訳】色のスピード</title>
            <link>https://t32k.me/mol/log/color-of-speed/</link>
            <pubDate>Thu, 09 Dec 2010 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/color-of-speed/</guid>
            <description>&lt;p&gt;色とWebパフォーマンスという奇妙な組み合わせの面白い記事を見つけたので紹介をば。&lt;/p&gt;

&lt;p&gt;&lt;cite class=&#34;citation&#34;&gt;
&lt;img src=&#34;https://t32k.me/mol/mol/images/people/tim_kadlec.jpg&#34; alt=&#34;Steve Souders&#34; /&gt;
Original：&lt;a href=&#34;http://timkadlec.com/2010/12/the-color-of-speed/&#34;&gt;The Color of Speed&lt;/a&gt;（&lt;time&gt;2010-12-02&lt;/time&gt;）by &lt;a href=&#34;http://timkadlec.com/&#34;&gt;Tim Kadlec&lt;/a&gt;
&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;3秒間は必ずしも3秒とは限らない。私たちの時間感覚は、一見無関係に思える要因によって大いに歪められており、3秒間を5秒と感じたり、もしくは1秒と感じるのは容易なことだ。最終的に、ユーザーが私たちのサイトをどのくらい速いと感じるかが問題なので、各種統計情報に関係なく、私たちはユーザーの知覚に影響する外的要因について深く理解する必要性がある。&lt;/p&gt;

&lt;p&gt;そのような1つの要因として色が挙げられる。様々な色相・明度・彩度は人間の体感時間に関わるすべてに影響する。一般的に、ユーザーが待ち時間の間にいかにストレスになっていたか、リラックスしていたのかと関係してくる。リラックスした状態になればなるほど待ち時間は短く感じられる。これは、ストレスを感じているユーザーがまるで遅いサイトと感じている一方で、リラックスしたユーザーは同じサイトだけれども反応が良いと感じる可能性がある。&lt;/p&gt;

&lt;p&gt;それで、私たちはリラックした状態を色を使ってどのように引き起こしたらよいのだろうか？まず第一に、ユーザーの最もリラックスした状態を引き出すために青系の色を選ぶことができる。対照的に、黄、赤系の色は刺激を与えるので、ストレスにつながる。特に赤色は逃避や失敗といった感情を引き起こし、さらに強いレベルでのストレスとにつながる。&lt;/p&gt;

&lt;p&gt;他の考慮すべきこととして、彩度が挙げられる。低彩度な色を見たユーザーは高彩度を見たユーザーよりもリラックスした状態が観察された。この効果は、コントラストが強い環境（コンピュータ画面のような）において、より顕著になる。&lt;/p&gt;

&lt;p&gt;最後に、明度について私たちは考えなければならない、パステルカラー（高明度）はリラックスした状態をもたらすので、低明度（暗い色）な色よりも体感時間を短くすることができる。&lt;/p&gt;

&lt;p&gt;これらの知識を使えば、私たちは本質的に速さをほのめかすデザインができ、反応のよい体験をユーザーに提供できる。決して、これはサイトのパフォーマンスをチューニングする作業に置き換わるものではない。しかしながら、もしこれらの知識をパフォーマンス最適化の技術と一緒に利用すれば、実測値と同じくらい速く感じるサイトを作成可能で、ユーザーの体験をより最適化できるだろう。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;実験データなどの参照元が明記されてなかったので、鵜呑みにするのはちょっと抵抗ありますが、本文自体も、あくまで色だけで速くできるのではなく、HTTPリクエストを減らすとかそういった基本的なパフォーマンス対策をおこなった上でのさらなる対策として提示していますので、青色にしたからといって万事OKなわけではありませんｗ&lt;/p&gt;

&lt;p&gt;色とスピードに関しては、Yahoo!のエンジニアでパフォーマンスについても講演している@stoyanstefanovもブログで以下のようなことを記述しています。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Google Reader used to have this blue background on the left hand side menu (where the list of feeds is), but it&amp;rsquo;s now white. Turns out they made a user study to ask people what they think given the two options and nothing else changed in the app. People consistently said that the version with the white background was faster, although it&amp;rsquo;s the same page. How crazy is this?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.phpied.com/psychology-of-performance/&#34;&gt;Psychology of performance / Stoyan&amp;rsquo;s phpied.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Google Readerで青背景から白背景に変更した例を挙げています。なぜ白い色にしたのかというとユーザーが白色のほうが速いと感じたからそうです。青系の色はリラックスさせるのでパフォーマンス的に有効だと翻訳した記事には書いてありましたが、まぁ白色は明度は高いですし、背景以外のバーなど青色基調ですし、理にかなっているかなと思います。&lt;/p&gt;

&lt;p&gt;そうでなくても、Googleは全体を通して白地にブルーのイメージがあります。あ、速いと噂の Facebookもそういえば青色基調ですね。彼らはそういった点も気づいているのかもしれませんね。&lt;/p&gt;

&lt;p&gt;個人的な考えを述べるのであれば、Webパフォーマンスは数年前と比べて改善されてきています。以前はサイトの応答速度の8秒ルールといったものがありましたが、現在では4秒、3秒といったことが言われおり、どんどん0に近づいてきています。つまり、これ以上ない限界が見えはじめてきた現在では、他のサイトとパフォーマンス（秒数）を競いあっても数百、数十ミリ秒の違いしか出せなくなってきています。そういった面からみれば、こういった人間の心理・知覚から考えて差別化するのも重要なパフォーマンス対策になってくるのかなと考えます。（この辺に関しては、こちらを参照：&lt;a href=&#34;https://t32k.me/mol/mol/log/long-life-web-performance-optimization/&#34;&gt;心理学から考えるWebパフォーマンス&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;そうゆうわけで、Webデザイナーさんは制作しているサイトのブランドイメージにこれらの知識が応用できるのであれば採用すれば良いと思いますよ。（ブランドイメージをねじ曲げてまで対応する必要はないと思いますけど）&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>【翻訳】Facebookのデザイン</title>
            <link>https://t32k.me/mol/log/design-at-facebook/</link>
            <pubDate>Sun, 22 Nov 2009 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/design-at-facebook/</guid>
            <description>

&lt;p&gt;&lt;cite class=&#34;citation&#34;&gt;
Original：&lt;a href=&#34;http://www.lukew.com/ff/entry.asp?879&#34;&gt;Design at Facebook&lt;/a&gt;（&lt;time&gt;2009-04-26&lt;/time&gt;）by Luke Wroblewski
&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;パロ・アルト本社にて、Facebookデザインチームの理念や2.5億人にも及ぶユーザーに対してのデザインアプローチを確認し合った。彼らはコードを書くことの重要性、デザインを早い段階でこまめに共有すること、最初から最後までプロジェクトに関わること、そして自らの仕事に固執しないことを力説した。デザイナーがコードを書くのに十分にテクニカルであると確認した。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facebookデザインチームはプロダクトデザイン、マーケティング、UIパターン、ブランディングやフロントエンドのコーディングに取り組んでいる。チームは、15人のプロダクトデザイナー、5人のUIエンジニア、5人のUXリサーチャー、4人のコミュニケーションデザイナーと、1人のコンテンツストラテジストからなる。1000人の従業員あたり25人のデザイナーがいる。&lt;/li&gt;
&lt;li&gt;フロントエンドコーディングはエンジニア文化にデザインを結びつける。&lt;/li&gt;
&lt;li&gt;2.5億人のユーザーのためにどのようにチームはデザインをしているのか？4つの仮説：最初から最後まで携わること、早くまめに共有すること、泥臭いこともやる、愛着を持たない。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;1-デザイナーは戦略からローンチの瞬間までそこにいる必要がある-これは他の企業とは異なる&#34;&gt;1) デザイナーは戦略からローンチの瞬間までそこにいる必要がある。これは他の企業とは異なる。&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Facebookはデザイナーが最初から最後まで立ち会うのを確認することに多くの時間を費やす。&lt;/li&gt;
&lt;li&gt;例：3月に公開されたホームページのリデザイン。単純化し、情報をあちこち探さなくてもいいように合理化する必要があった。これはデータ構造とビジュアル構造を含んだ問題だ。&lt;/li&gt;
&lt;li&gt;ビジョンが決定された後、スケッチを作るためにコードを書き始めた。コードでデザインすることで実際のデータがレイアウトの中でどのように動くのか簡単に理解できる。&lt;/li&gt;
&lt;li&gt;安定したトレードオフ - ホームページのデザインについて、インタラクションやビジュアルの詳細まで繰り返し調査をした。&lt;/li&gt;
&lt;li&gt;会議に様々なチームを席につかせるために：デザインを伝えるためにモックアップを用意した。大抵の場合、静的なデザインはお勧めしない。&lt;/li&gt;
&lt;li&gt;コードを書けるデザイナーを持つことは理解と実装を早めることができる。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;2-こまめに共有する-チームでユーザーヘルプを共有すればデザインがより良くなる&#34;&gt;2) こまめに共有する。チームでユーザーヘルプを共有すればデザインがより良くなる。&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Facebookにクリエィティブディレクターはいない、その代わりにボトムアッププロセスの採用で調整をしている。つまり、自分たちが何をしているのか共有することはチームにとって重要な意味を持つ。&lt;/li&gt;
&lt;li&gt;自社開発されたツールを共有することはもっと効果的だ。Pixelcloudと呼ばれるツールはオンライン上のコメント付きギャラリーだ。3月のリリース以来、1日毎に15の画像が追加されている。&lt;/li&gt;
&lt;li&gt;ワーキンググループはビジュアルデザインをカバーし、フロントエンドコーディングはFacebookのデザインの一貫性を維持するのに役立つ。すべてのワーキンググループは残りのデザイナーにフィードバックを知らせる時間を与えられている。&lt;/li&gt;
&lt;li&gt;例：プライバシーウィザードのデザイン。キックオフの段階で12人のユーザーを招いプロジェクトの方向性を理解するために30のモックアップを見せた。開発段階においてはもうちょっと少ないユーザーに7個のモックアップを見せた。&lt;/li&gt;
&lt;li&gt;フィードバックは良いことだ。できるだけ早くできるだけ多くを得るべき。時間を節約できる。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;3-泥臭いこともやる-webのコードがどのように動いているのか理解することは重要だ-全てのデザイナーはhtml-cssを書くことができる-あと-たぶんphpも&#34;&gt;3) 泥臭いこともやる。Webのコードがどのように動いているのか理解することは重要だ。全てのデザイナーはHTML/CSSを書くことができる。あと、たぶんPHPも。&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;デザインとエンジニアリングの関係を緩和させる。デザイナーはバグを作りがちだが、プロトタイプを早く作る。&lt;/li&gt;
&lt;li&gt;デザイナーはシンプルにしすぎる傾向がある。エンジニアは機能をつけすぎる傾向がある。&lt;/li&gt;
&lt;li&gt;この中間を理解することはデザインの役に立つ。&lt;/li&gt;
&lt;li&gt;素早い対応は重要。Facebookは多くのエリアで競争をしていて、ユーザーのWebの使い方は常に変化している。これらに素早く対応していくことは極めて重要なことだ。&lt;/li&gt;
&lt;li&gt;Facebookが信じるコアな部分、つまりプロダクトをユーザーがどのように使うか理解するために早くリリースすることは重要だということ。&lt;/li&gt;
&lt;li&gt;モックアップは嘘っぱちだ、それらにはコンテンツと文脈が欠落している。デザインがどのように機能しているか理解するためにも実際のコンテンツ、ページデザインでのテストが求められている。&lt;/li&gt;
&lt;li&gt;素早い対応をするためにはプロトタイプは早期に必要。例：ユーザーにリリースする前に内部でUIテストすることで批評を受け修正できる。The new design broke the existing scan line in the news stream.&lt;/li&gt;
&lt;li&gt;Facebookのデザイナーは1週間におおよそ40コミットする。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;4-愛着を持つな-ソフトウェアは永遠ではない-常に変わり続けるものでありそれを受け入れる必要がある&#34;&gt;4) 愛着を持つな。ソフトウェアは永遠ではない、常に変わり続けるものでありそれを受け入れる必要がある。&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;ゴールは絶え間なく変化する。&lt;/li&gt;
&lt;li&gt;現状満足でいれば、あなたは出遅れるだろう。デザイナーとして、これからの1年について考え、予測する必要がある。&lt;/li&gt;
&lt;li&gt;Facebookで最も長い期間、変更しなかったデザインは2004年のトップページで、それは18ヶ月間だった。&lt;/li&gt;
&lt;li&gt;例：グローバルナビゲーションのリデザイン。数ヶ月間かけて多くのアイデアを試した。昨日でさえ、サイトのヘッダーを変更した。&lt;/li&gt;
&lt;li&gt;これまで以上に、私たちの仕事は終わらない。&lt;/li&gt;
&lt;li&gt;ほとんどの機能がA/Bテストされている。前もって明確に評価指標を定義する。そして測定する。決して指標にデザインを決定させてはいけない。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>