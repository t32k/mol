<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on MOL</title>
    <link>https://t32k.me/mol/categories/javascript/</link>
    <description>Recent content in Javascript on MOL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 06 Sep 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://t32k.me/mol/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cascading Style Sheets</title>
      <link>https://t32k.me/mol/log/cascading-style-sheets/</link>
      <pubDate>Fri, 06 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/cascading-style-sheets/</guid>
      <description>CSS - Imgur</description>
    </item>
    
    <item>
      <title>grunt-contribさえあればOK！</title>
      <link>https://t32k.me/mol/log/grunt-contrib/</link>
      <pubDate>Tue, 05 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/grunt-contrib/</guid>
      <description>世の中、Grunt0.4が出たって持ちきりでやんス。
 Grunt 0.4.0 released - Grunt: The JavaScript Task Runner  今までビルトインタスクだった下記はことごとくgrunt-contrib-*シリーズと呼ばれるプラグインに置き換わってしまった。
 concat grunt-contrib-concat plugin init stand-alone grunt-init utility lint grunt-contrib-jshint plugin min grunt-contrib-uglify plugin qunit grunt-contrib-qunit plugin server grunt-contrib-connect plugin test grunt-contrib-nodeunit plugin watch grunt-contrib-watch plugin  もし諸君がconcat、lint、minといったタスクをGrunt 0.4でも使いたい場合は、このように書いてないだろうか。
 Upgrading from 0.3 to 0.4 - Grunt: The JavaScript Task Runner  module.exports = function(grunt) { // Project configuration. grunt.initConfig({ pkg: grunt.file.readJSON(&#39;package.json&#39;), uglify: { .... }, min: { .</description>
    </item>
    
    <item>
      <title>html5shim vs html5shiv</title>
      <link>https://t32k.me/mol/log/html5shim-vs-html5shiv/</link>
      <pubDate>Mon, 12 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/html5shim-vs-html5shiv/</guid>
      <description>JavaScript Advent Calendar 2011 (オレ標準コース) 12日目の id:t32k です。去年も参加しましたがなんでもありと聞いて今年も懲りずに参加！

はじめに言っておきますが、html5shimもhtml5shivどっちもまったく同じです。違いなんて無いので、こんなことに頭を悩ませる暇があったらさっさとコードでも書いてろ！以上！うんこ(・∀・)!
そんなこと言っても世の中結果じゃない、過程が大切だと思うんだ先生！ってことで今回は調べてみます。
html5shi(m|v)、めんどくさいので以下html5.jsは&amp;rdquo;HTML5 IE enabling script&amp;rdquo;の名の通り、IE8以下でarticleなどの新要素が正しく認識されずスタイル(CSS)がうまく適用されない問題を解決しそれらのブラウザでも利用可能にしてくれます。
document.createElement(&amp;quot;article&amp;quot;);  こんな感じにDOMで要素を生成すると、IEでもHTML5の要素にスタイルを効くようになります。実際のhtml5.jsはもっと複雑だけど基本的にはこんなことをやってます。詳しいことは下記スライド参照で。
 HTML5.jsの中身を見てみよう by @kamiyam   What&amp;rsquo;s the difference? そろそろHTML5でサイト作ってみっかーということでいろいろググってたら前述の問題に引っかかり、さらにググってみると同じ機能なのに名前が違う2つのスクリプトがあることを認識たのが今回の経緯です。
 html5shim - HTML5 IE enabling script - Google Project Hosting html5shiv - HTML5 IE enabling script - Google Project Hosting   Google Codeにホスティングされている2つのコードを見比べても全く同じです。謎です。   Common question: what&amp;rsquo;s the difference between the html5shim and the html5shiv? Answer: nothing, one has an m and one has a v - that&amp;rsquo;s it.</description>
    </item>
    
    <item>
      <title>querySelectorとquerySelectorAllというかLive NodeListとStatic NodeList</title>
      <link>https://t32k.me/mol/log/live-or-static/</link>
      <pubDate>Sun, 02 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/live-or-static/</guid>
      <description>先日、getElementsByClassName便利だぜ！とブログに書いたら、to-Rの西畑先生よりquerySelectorAllアルヨ！と言われたので、調べてみる。
querySelectorとquerySelectorAll  IE8 で実装された Selectors API とは何か？ - IT戦記  まぁ上記エントリにほぼ全てが書かれているので、特に今さら書くことはないのですが、自分メモのために。
なにはともあれ、サポート状況をば。
 DOM Core  Fx3.0は対応していないけど、IE8は対応してるのか。素敵！
element = document.querySelector(selectors);   Document.querySelector() - Web API Interfaces | MDN  querySelectorってのもある。基本的な使い方は両方一緒でselectors&amp;lt;/emの引数に、取得したい要素のCSSセレクタ書いてあげればいい。querySelectorは最初に見つけてきた単一の要素を返すのに対して、
 elementList = document.querySelectorAll(selectors);  elementList is a non-live NodeList of element objects.
  Document.querySelectorAll() - Web APIs | MDN  querySelectorAll はノードリストを返す。
var node = document.querySelectorAll(&#39;#hoge &amp;gt; h2&#39;);  つまり、#hogeの中の子供のh2だけを取ってくるなんてことも、上記のようにCSSセレクタで簡単に書けちゃう。jQueryライクに書けちゃう。だから、これまでFirefoxのグリモンとかChromeの拡張機能を作成するときは僕はjQuery読み込んでいたんだけど、簡単なものであればSelectors API使えば、jQueryに頼らなくても良くなった。
Live NodeListとStatic NodeList はい、そんなわけでSelectors API＼(-o-)／なんですけども、ひとつ気になる点がありました。querySelectorAllが返すのはnon-liveなノードリストと書いてあります。non-liveって何よ？ってことで、仕様書、仕様書</description>
    </item>
    
    <item>
      <title>getElementsByName と getElementsByClassName</title>
      <link>https://t32k.me/mol/log/getelementsbyname-and-getelementsbyclassname/</link>
      <pubDate>Mon, 27 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/getelementsbyname-and-getelementsbyclassname/</guid>
      <description>&lt;p&gt;ちょっと気になったのでメモメモ。&lt;/p&gt;

&lt;p&gt;普段、jQueryなど使っているときは特に気にしなくてもいいのですが、フレームワークなしでなんかしらの要素取ってくるのって結構大変というか、document.getElementById しか頭に思いつかないのです。&lt;/p&gt;

&lt;p&gt;最近というか先々々月ぐらいのことですが、document.getElementsByName なるものを知りました。このメソッドはどんなものかと言いますと、&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WebデザイナーだけどiPhoneカメラアプリ、リリースできました！</title>
      <link>https://t32k.me/mol/log/nyars/</link>
      <pubDate>Thu, 09 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/nyars/</guid>
      <description>  あたしWebデザイナーだけど、制作期間実質1週間（コードだけなら3日）でiPhoneカメラアプリを制作して、今日リリースまでこぎつけることができました。
単にネコミミ画像をオーバーレイして写真が撮れるだけのアプリだけど、Objective-Cなにそれ？おいしいの？ってくらいのレベルでしかなかったデザイナーが、なにゆえ作れたか？
Titanium Mobile! はい、ひとえにTitanium Mobile様々でございます。
思いおこせば、iPhoneアプリ開発できたらカッコイイだろうなと思ってObjective-Cの本を何冊か買ったのが1年前。当然、全く分かることもなくすぐさま放置でした。それからiPhoneアプリ開発の情熱は消えつつあったのですが、今年の2月に@astronaughtsに「JavaScriptでiPhoneアプリ開発できるTitaniumえーわーめっちゃえーわー！」と言われて、本腰を入れて勉強したらすぐさまカメラなど起動させることができて楽しかったっす。ほんとスピーディーに、それこそグリモンのユーザースクリプトを作ってるような感覚でiPhoneアプリを制作できたことはまさに感動です。
手間取るのは、アプリの認証とか開発者登録だけでコード書く分にはJavaScriptある程度分かってたらホント楽しいよ！これで僕も肩書きだけはiPhoneアプリデベロッパーだ！（ごめん、もの投げないで(/ω＼)ｲﾔﾝ）
ってことで、Webでべろっぱーのみんなもれっつたいたん！
参考リソース  アプリのソースコード（t32k/Nyars）  </description>
    </item>
    
  </channel>
</rss>