<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>MOL</title>
        <generator uri="https://gohugo.io">Hugo</generator>
        <link>https://t32k.me/mol/categories/javascript/</link>
        <language>ja</language>
        
        
        <updated>Fri, 06 Sep 2013 00:00:00 UTC</updated>
        
        <item>
            <title>Cascading Style Sheets</title>
            <link>https://t32k.me/mol/log/cascading-style-sheets/</link>
            <pubDate>Fri, 06 Sep 2013 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/cascading-style-sheets/</guid>
            <description>&lt;p&gt;&lt;a href=&#34;http://imgur.com/Q3cUg29&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-5340&#34; alt=&#34;css&#34; src=&#34;https://t32k.me/mol/static/blog/2013/05/css.gif&#34; width=&#34;640&#34; height=&#34;480&#34; /&gt;&lt;/a&gt;
&lt;ul&gt;
    &lt;li&gt; &lt;a href=&#34;http://imgur.com/Q3cUg29&#34;&gt;CSS - Imgur &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>grunt-contribさえあればOK！</title>
            <link>https://t32k.me/mol/log/grunt-contrib/</link>
            <pubDate>Tue, 05 Mar 2013 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/grunt-contrib/</guid>
            <description>&lt;p&gt;世の中、Grunt0.4が出たって持ちきりでやんス。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gruntjs.com/blog/2013-02-18-grunt-0.4.0-released&#34;&gt;Grunt 0.4.0 released - Grunt: The JavaScript Task Runner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今までビルトインタスクだった下記はことごとくgrunt-contrib-*シリーズと呼ばれるプラグインに置き換わってしまった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;concat&lt;/strong&gt;  grunt-contrib-concat plugin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;init&lt;/strong&gt;  stand-alone grunt-init utility&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;lint&lt;/strong&gt;  grunt-contrib-jshint plugin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;min&lt;/strong&gt;  grunt-contrib-uglify plugin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;qunit&lt;/strong&gt;  grunt-contrib-qunit plugin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;server&lt;/strong&gt;  grunt-contrib-connect plugin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;test&lt;/strong&gt;  grunt-contrib-nodeunit plugin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;watch&lt;/strong&gt;  grunt-contrib-watch plugin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もし諸君がconcat、lint、minといったタスクをGrunt 0.4でも使いたい場合は、このように書いてないだろうか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gruntjs.com/upgrading-from-0.3-to-0.4&#34;&gt;Upgrading from 0.3 to 0.4 - Grunt: The JavaScript Task Runner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;module.exports = function(grunt) {
  // Project configuration.
  grunt.initConfig({
    pkg: grunt.file.readJSON(&#39;package.json&#39;),
    uglify: { .... },
    min: { .... },
    concat: { .... },
    lint: { .... },
    }
  });
  // Load the plugins
  grunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);
  grunt.loadNpmTasks(&#39;grunt-contrib-min&#39;);
  grunt.loadNpmTasks(&#39;grunt-contrib-concat&#39;);
  grunt.loadNpmTasks(&#39;grunt-contrib-lint&#39;);
  // Default task.
  grunt.registerTask(&#39;default&#39;, [&#39;uglify&#39;]);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;contribシリーズのタスクを利用したいのなら、全部入りの&lt;strong&gt;&lt;a href=&#34;https://github.com/gruntjs/grunt-contrib&#34;&gt;grunt-contrib&lt;/a&gt;&lt;/strong&gt;をひとつ読みこむだけで利用できる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Load the plugin
grunt.loadNpmTasks(&#39;grunt-contrib&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;grunt-contribなかに全部入ってるんだね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/file/2013/03/ss.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;※ とはいえgrunt-contribだとアップデートはひとまとめになるので、各contribの最新版を使いたいのなら個別に管理したほうがいいかも&lt;/p&gt;

&lt;p&gt;そんだけ。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>html5shim vs html5shiv</title>
            <link>https://t32k.me/mol/log/html5shim-vs-html5shiv/</link>
            <pubDate>Mon, 12 Dec 2011 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/html5shim-vs-html5shiv/</guid>
            <description>

&lt;p&gt;&lt;a href=&#34;http://atnd.org/events/21980&#34;&gt;JavaScript Advent Calendar 2011 (オレ標準コース) &lt;/a&gt;12日目の id:t32k です。去年も参加しましたがなんでもありと聞いて今年も懲りずに参加！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://keycss.com/html5/html5shim-vs-html5shiv.html&#34;&gt;&lt;img title=&#34;Don’t lose any more time.&#34; src=&#34;https://t32k.me/mol/static/blog/2011/12/same.png&#34; alt=&#34;Don’t lose any more time. html5shim and html5shiv are exactly the same thing.&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;はじめに言っておきますが、html5shimもhtml5shivどっちもまったく同じです。違いなんて無いので、こんなことに頭を悩ませる暇があったらさっさとコードでも書いてろ！以上！うんこ(・∀・)!&lt;/p&gt;

&lt;p&gt;そんなこと言っても世の中結果じゃない、過程が大切だと思うんだ先生！ってことで今回は調べてみます。&lt;/p&gt;

&lt;p&gt;html5shi(m|v)、めんどくさいので以下html5.jsは&amp;rdquo;HTML5 IE enabling script&amp;rdquo;の名の通り、IE8以下で&lt;em&gt;article&lt;/em&gt;などの新要素が正しく認識されずスタイル(CSS)がうまく適用されない問題を解決しそれらのブラウザでも利用可能にしてくれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;document.createElement(&amp;quot;article&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じにDOMで要素を生成すると、IEでもHTML5の要素にスタイルを効くようになります。実際のhtml5.jsはもっと複雑だけど基本的にはこんなことをやってます。詳しいことは下記スライド参照で。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://prog.re-d.net/demo/slide/20101218/index.html&#34;&gt;HTML5.jsの中身を見てみよう&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/#!/kamiyam&#34;&gt;@kamiyam&lt;/a&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-s-the-difference&#34;&gt;What&amp;rsquo;s the difference?&lt;/h2&gt;

&lt;p&gt;そろそろHTML5でサイト作ってみっかーということでいろいろググってたら前述の問題に引っかかり、さらにググってみると同じ機能なのに名前が違う2つのスクリプトがあることを認識たのが今回の経緯です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/html5shim/&#34;&gt;html5shim - HTML5 IE enabling script - Google Project Hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/html5shiv/&#34;&gt;html5shiv - HTML5 IE enabling script - Google Project Hosting &lt;/a&gt;
&lt;/ul&gt;
Google Codeにホスティングされている2つのコードを見比べても全く同じです。謎です。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Common question:&lt;/strong&gt; what&amp;rsquo;s the difference between the html5shim and the html5shiv?
&lt;strong&gt;Answer:&lt;/strong&gt; nothing, one has an m and one has a v - that&amp;rsquo;s it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と思ったら、似たような疑問を持つ人も多いのかよくある質問が用意されていました。&lt;/p&gt;

&lt;p&gt;”違いなんて無いよ！片方はmで、片方がvなだけ。それだけ！”&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;!--[if lt IE 9]&amp;amp;gt;
 &amp;amp;lt;script src=&amp;quot;/common/js/html5shiv.js&amp;quot;&amp;amp;gt;&amp;amp;lt;/script&amp;amp;gt;
&amp;amp;lt;![endif]--&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;※最近ではGoogle Codeにホスティングされているものを参照するのではなく、自鯖に落としてきて使用することが&lt;a href=&#34;http://www.skyward-design.net/blog/archives/000134.html&#34;&gt;推奨されています&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;お&amp;hellip; また敷かれたレールを疑問も持たずに走ってればいいんだよ的な回答ですね。そんなの求めていないんだ！僕は！じゃーなぜ2つあるんだよ！どっち使えばいいんだよ！と遅れてきた反抗期によって僕はあきらめません。&lt;/p&gt;

&lt;p&gt;まずは単語の意味から&amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;【名詞】【可算名詞】
(ものを水平にしたり，すき間などに入れる)詰め木[金]
&lt;a href=&#34;http://ejje.weblio.jp/content/shim&#34;&gt; shimの意味 - 英和辞典 Weblio辞書 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;【名詞】【可算名詞】
《米俗》 (ジャック)ナイフ
&lt;a href=&#34;http://ejje.weblio.jp/content/shiv&#34;&gt; shivの意味 - 英和辞典 Weblio辞書 &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ふむふむ、&amp;rdquo;shim&amp;rdquo; の方は詰め木ということで足りない機能を補完（カバー）する意味合いでも取れて、&lt;a href=&#34;https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills&#34;&gt;polyfill&lt;/a&gt;みたいな感じですかね？。&amp;rdquo;shiv&amp;rdquo; はナイフ&amp;hellip;どーゆこっちゃ＞＜&lt;/p&gt;

&lt;h2 id=&#34;the-story-of-the-html5-shiv&#34;&gt;The Story of the HTML5 Shiv&lt;/h2&gt;

&lt;p&gt;行き詰まり感たっぷりだったところに、&lt;a href=&#34;https://t32k.me/mol/log/trackhtml5inga-with-modernizr/&#34;&gt;Modernizr&lt;/a&gt; の開発者でも有名なPaul Irishさんが、&lt;a href=&#34;http://paulirish.com/2011/the-history-of-the-html5-shiv/&#34;&gt;The Story of the HTML5 Shiv &lt;/a&gt;というドンピシャなタイトルの記事をあげていました。&lt;/p&gt;

&lt;p&gt;この記事の前半部分をざっくりまとめてみると、&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2007年くらい&lt;/strong&gt;
■ developers:
新要素にCSS効かなくね？やばくねｗ？あれれｗｗ？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2008年&lt;/strong&gt;&lt;br /&gt;
■ &lt;a href=&#34;http://intertwingly.net/blog/2008/01/22/Best-Standards-Support#c1201006277&#34;&gt; Sjoerd Visscher&lt;/a&gt;（初めてこのテクニックを披露した人）：
createElementしたらええで〜ｗｗｗ&lt;/p&gt;

&lt;p&gt;■ &lt;a href=&#34;http://ln.hixie.ch/?start=1201080691&amp;amp;count=1&#34;&gt; Ian Hickson&lt;/a&gt;（HTML5のエライ人）：
これマジパネェｗｗｗこれ使ったらIE7の互換shim簡単に作れるわーｗｗｗｗ&lt;/p&gt;

&lt;p&gt;■ &lt;a href=&#34;http://ejohn.org/blog/html5-shiv/&#34;&gt;John Resig&lt;/a&gt;（jQuery作った人）：
CSS効かせる方法、HTML5 Shivって名前つけたわーｗｗ（shimだけど）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2009年&lt;/strong&gt;
■ &lt;a href=&#34;http://remysharp.com/2009/01/07/html5-enabling-script/&#34;&gt; Remy Sharp&lt;/a&gt;（初めてhtml5.jsをディストリビュートした人）：
HTML5 ShivのやつGoogle Codeにホスティングしといたわーｗｗ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2010年&lt;/strong&gt;
■ &lt;a href=&#34;http://code.google.com/p/html5shim/source/detail?r=2&#34;&gt;Remy Sharp&lt;/a&gt;：
html5shimでミラー作っておいたわーｗｗｗ&lt;/p&gt;

&lt;p&gt;だいたいこんな感じですな。&lt;/p&gt;

&lt;h2 id=&#34;shiv&#34;&gt;Shiv?&lt;/h2&gt;

&lt;p&gt;ここで問題なのは、なんでRemy Sharpさんあとからhtml5shimのミラーを 公開したのか？ということですね。&lt;/p&gt;

&lt;p&gt;&amp;ldquo;shiv&amp;rdquo; って単語がコンピューター用語で言う互換性のため回避策といった意味が一般認識されていなかったのではないかという仮説が僕の中で湧いてきました。&lt;/p&gt;

&lt;p&gt;試しに&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;で &lt;a href=&#34;https://github.com/search?q=shiv&amp;amp;type=Everything&amp;amp;repo=&amp;amp;langOverride=&amp;amp;start_value=1&#34;&gt;&amp;ldquo;shiv&amp;rdquo; で レポジトリ検索&lt;/a&gt;をしてみると17件、&lt;a href=&#34;https://github.com/search?type=Everything&amp;amp;language=&amp;amp;q=shim&amp;amp;repo=&amp;amp;langOverride=&amp;amp;x=0&amp;amp;y=0&amp;amp;start_value=1&#34;&gt;&amp;ldquo;shim&amp;rdquo;で検索&lt;/a&gt;すると93件ヒットしました。&amp;rdquo;shiv&amp;rdquo; に関してはhtml5shivに関しての内容ばかりで、他のものも新しいライブラリです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ejohn.org/blog/html5-shiv/#comment-296934&#34;&gt;2008年のJohn Resig氏のエントリのコメント&lt;/a&gt;においても、「shimじゃなくてshiv?」といった内容が見受けられます。&lt;/p&gt;

&lt;p&gt;しかし、Wikipediaの&lt;a href=&#34;http://en.wikipedia.org/wiki/Shim_(computing)&#34;&gt;Shim (computing)&lt;/a&gt;の項目には、&amp;rdquo;a shim (from shim) or &lt;strong&gt;shiv&lt;/strong&gt; is a small library which&amp;hellip;&amp;ldquo;とまぁなんか互換性のため回避策の意味として記述されています&amp;hellip;&lt;/p&gt;

&lt;p&gt;え、そうなの？なんでじゃ！ということで、例によって反抗期の僕には&lt;a href=&#34;http://en.wikipedia.org/w/index.php?title=Shim_(computing)&amp;amp;action=history&#34;&gt;wikiの変更履歴&lt;/a&gt;を見てみるとありました。21:20, 16 November 2011‎ までは Shim (computing)の項目に &amp;rdquo;shiv&amp;rdquo; って単語はなかった。なんだ最近、追記されてんじゃん！&lt;/p&gt;

&lt;p&gt;まぁ少なくとも2008年のJohn Resigが書いたエントリの時点では &amp;ldquo;shiv&amp;rdquo; に「互換性のため回避策」といった意味がなかったのではないかと推測できます。&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;で結局、&lt;strong&gt;ここからは妄想&lt;/strong&gt;になるんだけど、&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2008年&lt;/strong&gt;
■ &lt;a href=&#34;http://ejohn.org/blog/html5-shiv/&#34;&gt;John Resig&lt;/a&gt;（jQuery作った人）：
CSS効かせる方法、HTML5 Shivって名前つけたわーｗｗ
やってることはshimだけど、shivの方が武器っぽくって強そうじゃんｗｗｗドヤｗｗ&lt;/p&gt;

&lt;p&gt;■ developers1:
shivじゃなくてshimだろｗｗワロスｗｗｗ&lt;/p&gt;

&lt;p&gt;■ developers2:
html5shivいいねｗｗｗｗｗイカスｗｗｗｗｗ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2010年&lt;/strong&gt;
■ &lt;a href=&#34;http://code.google.com/p/html5shim/source/detail?r=2&#34;&gt;Remy Sharp&lt;/a&gt;：
html5shivでホスティングしたったーけどｗｗｗｗ
html5shimの方が意味的に分かりやすいし一応こっちも作っとくかーｗｗ&lt;/p&gt;

&lt;p&gt;そんな経緯ですかね&amp;hellip;&lt;strong&gt;”なぜ”&lt;/strong&gt;そうしたのかって部分が言及されて（見つから）なかったので、あくまで上記は僕の&lt;strong&gt;妄想&lt;/strong&gt;ですからあしからず。知ってる人いたら教えてください。&lt;/p&gt;

&lt;p&gt;てか、&lt;a href=&#34;http://www.modernizr.com/download/&#34;&gt;Modernizrにバンドリングされてる&lt;/a&gt;し、そっち使ったらいいんじゃないっすかねー（by &lt;a href=&#34;https://twitter.com/#!/5509&#34;&gt;@5509&lt;/a&gt;）&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/HTML5_Shiv&#34;&gt;HTML5 Shiv - Wikipedia, the free encyclopedia &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ejohn.org/blog/html5-shiv/&#34;&gt;John Resig - HTML5 Shiv &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://remysharp.com/2009/01/07/html5-enabling-script/&#34;&gt;HTML5 enabling script | remy sharp&amp;rsquo;s b:log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://paulirish.com/2011/the-history-of-the-html5-shiv/&#34;&gt;The Story of the HTML5 Shiv « Paul Irish &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Shim_(computing)&#34;&gt;Shim (computing) - Wikipedia, the free encyclopedia &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
        <item>
            <title>querySelectorとquerySelectorAllというかLive NodeListとStatic NodeList</title>
            <link>https://t32k.me/mol/log/live-or-static/</link>
            <pubDate>Sun, 02 Jan 2011 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/live-or-static/</guid>
            <description>

&lt;p&gt;先日、&lt;code&gt;getElementsByClassName&lt;/code&gt;便利だぜ！とブログに書いたら、to-Rの西畑先生より&lt;code&gt;querySelectorAll&lt;/code&gt;アルヨ！と言われたので、調べてみる。&lt;/p&gt;

&lt;h2 id=&#34;queryselectorとqueryselectorall&#34;&gt;querySelectorとquerySelectorAll&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/amachang/20080306/1204787459&#34;&gt;IE8 で実装された Selectors API とは何か？ - IT戦記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まぁ上記エントリにほぼ全てが書かれているので、特に今さら書くことはないのですが、自分メモのために。&lt;/p&gt;

&lt;p&gt;なにはともあれ、サポート状況をば。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://quirksmode.org/dom/core/&#34;&gt;DOM Core&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fx3.0は対応していないけど、IE8は対応してるのか。素敵！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;element = document.querySelector(selectors);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector&#34;&gt;Document.querySelector() - Web API Interfaces | MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;querySelector&lt;/code&gt;ってのもある。基本的な使い方は両方一緒で&lt;code&gt;selectors&amp;lt;/em&lt;/code&gt;の引数に、取得したい要素のCSSセレクタ書いてあげればいい。&lt;code&gt;querySelector&lt;/code&gt;は最初に見つけてきた単一の要素を返すのに対して、&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;elementList = document.querySelectorAll(selectors);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;elementList is a non-live NodeList of element objects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll&#34;&gt;Document.querySelectorAll() - Web APIs | MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;querySelectorAll はノードリストを返す。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var node = document.querySelectorAll(&#39;#hoge &amp;gt; h2&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;つまり、&lt;code&gt;#hoge&lt;/code&gt;の中の子供のh2だけを取ってくるなんてことも、上記のようにCSSセレクタで簡単に書けちゃう。jQueryライクに書けちゃう。だから、これまでFirefoxのグリモンとかChromeの拡張機能を作成するときは僕はjQuery読み込んでいたんだけど、簡単なものであればSelectors API使えば、jQueryに頼らなくても良くなった。&lt;/p&gt;

&lt;h2 id=&#34;live-nodelistとstatic-nodelist&#34;&gt;Live NodeListとStatic NodeList&lt;/h2&gt;

&lt;p&gt;はい、そんなわけでSelectors API＼(-o-)／なんですけども、ひとつ気になる点がありました。&lt;code&gt;querySelectorAll&lt;/code&gt;が返すのはnon-liveなノードリストと書いてあります。non-liveって何よ？ってことで、仕様書、仕様書&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;querySelectorAll() メソッドから返される NodeList オブジェクトは 動的 (live) ではなく、静的 (static) である必要があります ([DOM-LEVEL-3-CORE], section 1.1.1) (must)。元文書の構造が変化しても、その変化が NodeList オブジェクトに反映されることは許されていません (must not)。つまり、返されるオブジェクトは、リストが生成された時点で文書に存在していたノードに対しクエリをかけ、マッチする Element ノードを取得することを意味します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://standards.mitsue.co.jp/resources/w3c/TR/selectors-api/&#34;&gt;セレクタ API Level 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;静的なノードリストなわけですね。具体的な例だと、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var divs = document.getElementsByTagName(&#39;div&#39;),
    i = 0;
while(i &amp;gt; divs.length) {
 document.body.appendChild(document.createElement(&#39;div&#39;));
 i++;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;getElementsByTagName()で返される値は動的なノードリストですので、上記のスクリプトは無限ループになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var divs = document.querySelectorAll(&#39;div&#39;),
    i = 0;
while(i &amp;lt; divs.length) {
 document.body.appendChild(document.createElement(&#39;div&#39;));
 i++;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代わって、&lt;code&gt;querySelectorAll&lt;/code&gt;で返される値は静的なノードリストで、取得してきた時点での数になります。つまり、divが10個そのときあったのであれば、その後に何個divを生成しようが10回でこのループは止まります。&lt;/p&gt;

&lt;p&gt;違いが分かりましたけど、なんでちゃうのん?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://web.g.hatena.ne.jp/vantguarde/20081114/1226673398&#34;&gt;querySelectorAllがliveじゃないNodeList返すのはなんで？ - vantguarde - web:g&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コメント欄にuupaaせんせがDOMアクセスを減らすためと書いてある。&lt;/p&gt;

&lt;p&gt;おーなるほど、パフォーマンスのためか？と思ったのでもうちっと調べてみると、こんな記事があった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nczonline.net/blog/2010/09/28/why-is-getelementsbytagname-faster-that-queryselectorall/&#34;&gt;Why is getElementsByTagName() faster than querySelectorAll()? - NCZOnline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://news.mynavi.jp/articles/2010/10/01/javascript-nodelist-difference/&#34;&gt;getElementsByTagName()がquerySelectorAll()より高速な理由 | マイナビニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vwxyz.hateblo.jp/entries/2010/10/05&#34;&gt;2010-10-05 - 以下斜め読んだ内容&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記ブログに書いてあることをなんとなく理解すると、静的リストはまるまるコピーするから事前にやることが多いので、動的リストよりも遅くなる。けども、取ってきたノードリストをイテレートする分には動的リストは毎回チェックするのに対して、静的リストはしないから速い。とのことみたいな事言ってるんだけど、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jsperf.com/&#34;&gt;jsPerf: JavaScript performance playground&lt;/a&gt;でパフォーマンスチェックしてみたのが以下のテスト。ついでに、ほかの&lt;code&gt;getElementsBy*&lt;/code&gt;メソッドもテストしてみた。&lt;/p&gt;

&lt;h3 id=&#34;getelementsbytagname-vs-queryselectorall-jsperf&#34;&gt;getElementsByTagName VS querySelectorAll · jsPerf&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jsperf.com/getelementsbytagname-vs-queryselectorall&#34;&gt;getElementsByTagName VS querySelectorAll · jsPerf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jsperf.com/getelementsbytagname-vs-queryselectorall/2&#34;&gt;getElementsByTagName VS querySelectorAll · jsPerf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;getelementsbyname-vs-queryselectorall-jsperf&#34;&gt;getElementsByName VS querySelectorAll · jsPerf&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jsperf.com/getelementsbyname-vs-queryselectorall&#34;&gt;getElementsByName VS querySelectorAll · jsPerf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jsperf.com/getelementsbyname-vs-queryselectorall/2&#34;&gt;getElementsByName VS querySelectorAll · jsPerf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;getelementsbyclassname-vs-queryselectorall-jsperf&#34;&gt;getElementsByClassName VS querySelectorAll · jsPerf&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jsperf.com/getelementsbyclassname-vs-queryselectorall&#34;&gt;getElementsByClassName VS querySelectorAll · jsPerf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jsperf.com/getelementsbyclassname-vs-queryselectorall/2&#34;&gt;getElementsByClassName VS querySelectorAll · jsPerf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なんか全部のテストで、（Operaを除いて）&lt;code&gt;getElementsBy*&lt;/code&gt;（動的）が速いんですけど.でも、&lt;a href=&#34;http://jsperf.com/getelementsbytagname-a-0-vs-queryselector-a/4&#34;&gt;このテスト&lt;/a&gt;だとQSAの方が速い&amp;hellip;うんーわからん。だれかおせーてエロい人！&lt;/p&gt;

&lt;p&gt;結局、&lt;code&gt;getElementsBy*&lt;/code&gt;で取れるもんはわざわざ、QSAでやらないほうがいいよ。ってことかな。あ、だからってQSAをディスってないよ。クラスの複数付けとか取ってくるときはQSAでやったほうが楽チンだし速い。と思ったけど、&lt;a href=&#34;http://jsperf.com/the-benefit-of-using-the-selectors-api&#34;&gt;このテスト&lt;/a&gt;だとgetElementsByTagNameの方が速いじゃん（High Perfromace JavaScriptにはQSAのほうが2-6倍速いって書いてあるのに&amp;hellip;）&lt;/p&gt;

&lt;p&gt;とりあえず、よく分かりません!&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>getElementsByName と getElementsByClassName</title>
            <link>https://t32k.me/mol/log/getelementsbyname-and-getelementsbyclassname/</link>
            <pubDate>Mon, 27 Dec 2010 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/getelementsbyname-and-getelementsbyclassname/</guid>
            <description>&lt;p&gt;ちょっと気になったのでメモメモ。&lt;/p&gt;

&lt;p&gt;普段、jQueryなど使っているときは特に気にしなくてもいいのですが、フレームワークなしでなんかしらの要素取ってくるのって結構大変というか、document.getElementById しか頭に思いつかないのです。&lt;/p&gt;

&lt;p&gt;最近というか先々々月ぐらいのことですが、document.getElementsByName なるものを知りました。このメソッドはどんなものかと言いますと、&lt;/p&gt;

&lt;p&gt;
&lt;blockquote&gt;document.getElementsByName は、name 属性に与えられた値を持つ全ての要素の NodeList を返します。
&lt;a href=&#34;https://developer.mozilla.org/ja/DOM/document.getElementsByName&#34;&gt;&lt;span style=&#34;font-size: x-small;&#34;&gt;document.getElementsByName - MDC Doc Center&lt;/span&gt;&lt;/a&gt;&lt;/blockquote&gt;
ほうほう、なるほど。でも、これと似たような名前のメソッドなかったけ？
&lt;blockquote&gt;document.getElementsByClassNameは、与えられたクラス名で得られる要素の集合を返します。
&lt;a href=&#34;https://developer.mozilla.org/ja/DOM/document.getElementsByClassName&#34;&gt;&lt;span style=&#34;font-size: x-small;&#34;&gt;document.getElementsByClassName - MDC Doc Center&lt;/span&gt;&lt;/a&gt;&lt;/blockquote&gt;
おう、これこれ。でも getElementsByClassName のほうはＩＥ対応してないっぽいし、どんな要素にでもname属性つけれたら、getElementsByName で十分じゃね？という疑問が湧いてきたのですが、そうでもないみたいです。&lt;/p&gt;

&lt;p&gt;HTML4.01でname属性が設定できるのは以下の要素だけ。
&lt;blockquote&gt;
&lt;ul style=&#34;-moz-column-count: 3; -webkit-column-count: 3;&#34;&gt;
    &lt;li&gt;a&lt;/li&gt;
    &lt;li&gt;applet&lt;/li&gt;
    &lt;li&gt;button&lt;/li&gt;
    &lt;li&gt;form&lt;/li&gt;
    &lt;li&gt;frame&lt;/li&gt;
    &lt;li&gt;iframe&lt;/li&gt;
    &lt;li&gt;img&lt;/li&gt;
    &lt;li&gt;input&lt;/li&gt;
    &lt;li&gt;map&lt;/li&gt;
    &lt;li&gt;meta&lt;/li&gt;
    &lt;li&gt;object&lt;/li&gt;
    &lt;li&gt;param&lt;/li&gt;
    &lt;li&gt;select&lt;/li&gt;
    &lt;li&gt;textarea&lt;/li&gt;
&lt;/ul&gt;
&lt;a href=&#34;http://www.mitsue.co.jp/glossary/html/attribute/name.html&#34;&gt;&lt;span style=&#34;font-size: x-small;&#34;&gt;name属性 | HTML用語集 | ミツエーリンクス&lt;/span&gt;&lt;/a&gt;&lt;/blockquote&gt;
ぷらす&amp;hellip;
&lt;blockquote&gt;IE、Netscape系共通で使えるのは、JavaScriptの基礎部分でname指定取りができるHTMLタグに限られます。 IMG、FORM、FORM部品、などです。ま、時代的にname属性はフォーム以外ではあり得ない時代でもありますので、使えなくても差し支えないでしょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.artemis.ac/contents/javascript/javascript11.htm#names&#34;&gt;&lt;span style=&#34;font-size: x-small;&#34;&gt;初心者のJavaScript HTMLエレメントのオブジェクト指定方法 各種 [ ARTEMIS ] &lt;/span&gt;&lt;/a&gt;&lt;/blockquote&gt;
つまり、&amp;lt;div name=&amp;ldquo;hoge&amp;rdquo;&amp;gt;の要素をgetElementsByNameで取りたいと思っても必ずしも全てのブラウザで正常に動作することもないし、そもそも文法的にやっちゃだめてことで。。。&lt;/p&gt;

&lt;p&gt;そうなってくると、どんな要素にでもclass属性がつけれるので、getElementsByClassName がやっぱり重要というか、こっちを使っていくほうがベターなんだと理解しました。&lt;/p&gt;

&lt;p&gt;ちなみに、getElementsByClassNameの各ブラウザのサポート状況はこんな感じ。IE以外OKってな感じで。
&lt;blockquote&gt;&lt;a href=&#34;https://t32k.me/mol/static/blog/2010/12/gebcn.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-2240&#34; title=&#34;gebcn&#34; src=&#34;https://t32k.me/mol/static/blog/2010/12/gebcn-300x50.png&#34; alt=&#34;&#34; width=&#34;550&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.quirksmode.org/dom/w3c_core.html&#34;&gt;&lt;span style=&#34;font-size: x-small;&#34;&gt;W3C DOM Compatibility - Core&lt;/span&gt;&lt;/a&gt;&lt;/blockquote&gt;
ちなみに、似たような名前のメソッドでgetElementsByTagNameてのもある。
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ja/DOM/document.getElementsByTagName&#34;&gt;document.getElementsByTagName - MDC Doc Center&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
結論：jQueryないと僕生きていけません :(&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>WebデザイナーだけどiPhoneカメラアプリ、リリースできました！</title>
            <link>https://t32k.me/mol/log/nyars/</link>
            <pubDate>Thu, 09 Dec 2010 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/nyars/</guid>
            <description>

&lt;div class=&#34;fluid&#34;&gt;
&lt;iframe src=&#34;//player.vimeo.com/video/23317105?title=0&amp;amp;byline=0&amp;amp;portrait=0&#34; width=&#34;640&#34; height=&#34;360&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;あたしWebデザイナーだけど、制作期間実質1週間（コードだけなら3日）でiPhoneカメラアプリを制作して、今日リリースまでこぎつけることができました。&lt;/p&gt;

&lt;p&gt;単にネコミミ画像をオーバーレイして写真が撮れるだけのアプリだけど、Objective-Cなにそれ？おいしいの？ってくらいのレベルでしかなかったデザイナーが、なにゆえ作れたか？&lt;/p&gt;

&lt;h2 id=&#34;titanium-mobile&#34;&gt;Titanium Mobile!&lt;/h2&gt;

&lt;p&gt;はい、ひとえに&lt;a href=&#34;http://www.appcelerator.com/&#34;&gt;Titanium Mobile&lt;/a&gt;様々でございます。&lt;/p&gt;

&lt;p&gt;思いおこせば、iPhoneアプリ開発できたらカッコイイだろうなと思ってObjective-Cの本を何冊か買ったのが1年前。当然、全く分かることもなくすぐさま放置でした。それからiPhoneアプリ開発の情熱は消えつつあったのですが、今年の2月に@astronaughtsに「JavaScriptでiPhoneアプリ開発できるTitaniumえーわーめっちゃえーわー！」と言われて、本腰を入れて勉強したらすぐさまカメラなど起動させることができて楽しかったっす。ほんとスピーディーに、それこそグリモンのユーザースクリプトを作ってるような感覚でiPhoneアプリを制作できたことはまさに感動です。&lt;/p&gt;

&lt;p&gt;手間取るのは、アプリの認証とか開発者登録だけでコード書く分にはJavaScriptある程度分かってたらホント楽しいよ！これで僕も肩書きだけはiPhoneアプリデベロッパーだ！（ごめん、もの投げないで(/ω＼)ｲﾔﾝ）&lt;/p&gt;

&lt;p&gt;ってことで、Webでべろっぱーのみんなもれっつたいたん！&lt;/p&gt;

&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/t32k/Nyars&#34;&gt;アプリのソースコード（t32k/Nyars）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>