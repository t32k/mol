<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>MOL</title>
        <generator uri="https://gohugo.io">Hugo</generator>
        <link>https://t32k.me/mol/categories/development/</link>
        <language>ja</language>
        
        
        <updated>Tue, 30 Jan 2018 00:00:00 UTC</updated>
        
        <item>
            <title>CircleCI 2.0でGAE/Node.jsのプロジェクトをデプロイ（改）</title>
            <link>https://t32k.me/mol/log/circleci2-yml-nodejs/</link>
            <pubDate>Tue, 30 Jan 2018 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/circleci2-yml-nodejs/</guid>
            <description>

&lt;p&gt;&lt;a href=&#34;https://t32k.me/mol/mol/log/circleci2-yml/&#34;&gt;前回の記事&lt;/a&gt;で、CircleCIからGAEにNode.jsアプリをデプロイ方法を説明したのだけど、もっといい方法があるのではないかと思ってた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version: 2
jobs:
  build:
    working_directory: ~/repo
    docker:
      - image: circleci/node:8

    steps:
      - checkout
      - run:
          name: System information
          command: |
            echo &amp;quot;Node $(node -v)&amp;quot;
            echo &amp;quot;Yarn v$(yarn --version)&amp;quot;
      - run:
          name: Install dependencies
          command: yarn
      - run:
          name: Build
          command: yarn run build
      - run:
          name: Test
          command: yarn test
      - save_cache:
          key: cache-{{ .Branch }}-{{ checksum &amp;quot;yarn.lock&amp;quot; }}
          paths:
            - ~/repo/.cache/yarn
            - ~/repo/dist
            - ~/repo/node_modules
            - ~/repo/package.json  
  
  deploy:
    working_directory: ~/repo
    docker:
      - image: google/cloud-sdk

    steps:
      - checkout
      - restore_cache:
          key: cache-{{ .Branch }}-{{ checksum &amp;quot;yarn.lock&amp;quot; }}
      - run:
          name: Deploy to Google App Engine
          command: |
            echo &amp;quot;$GOOGLE_AUTH&amp;quot; | base64 -i --decode &amp;gt; &amp;quot;$HOME/gcp-key.json&amp;quot;
            gcloud auth activate-service-account --key-file &amp;quot;$HOME/gcp-key.json&amp;quot;
            gcloud --quiet config set project &amp;quot;$GOOGLE_PROJECT_ID&amp;quot;
            gcloud --quiet app deploy app.yaml --version $(echo $CIRCLE_BRANCH | sed &amp;quot;s/\//\-/g&amp;quot;)
          no_output_timeout: 20m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;build&lt;/code&gt;と&lt;code&gt;deploy&lt;/code&gt;でDockerイメージが違うのが嫌だなーって思っていて、これをどうすうるのがいいんだろうと考えたら、やっぱり &lt;code&gt;circleci/node&lt;/code&gt;のイメージをベースに&lt;a href=&#34;https://cloud.google.com/sdk/downloads?hl=ja&#34;&gt;Google Cloud SDKをインストール&lt;/a&gt;したイメージを用意するのがいいんだろうと思ったけど、ぼくのDocker力が足りないので、うまくいかず、すぐ諦めた。&lt;/p&gt;

&lt;h2 id=&#34;google-cloud-sdk-インストール&#34;&gt;Google Cloud SDK インストール&lt;/h2&gt;

&lt;p&gt;そしたら去年の10月頃にこうゆうものが出ていたことを知る。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/cloud-sdk-npm-package&#34;&gt;GoogleCloudPlatform/cloud-sdk-npm-package: A metapackage that installs Google Cloud Platform&amp;rsquo;s gcloud CLI through NPM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;npmインストールでCloud SDKをインストールできる代物。うん便利。ローカルで試したところ本当にnpmインストールで、PATHも設定してないのに、&lt;code&gt;gcloud&lt;/code&gt;コマンドが打てた。&lt;/p&gt;

&lt;p&gt;CI上で試してみるとなぜかうまくいかない。&lt;code&gt;gcloud&lt;/code&gt;コマンドなんてないよ！と怒られる。どうやら、CircleCI上の&lt;code&gt;$SHELL&lt;/code&gt;の環境変数が&lt;code&gt;/bin/bash&lt;/code&gt;になってないと、うまく環境を認識できず（&lt;code&gt;zsh&lt;/code&gt;とか&lt;code&gt;fish&lt;/code&gt;と区別できない）、&lt;a href=&#34;https://github.com/GoogleCloudPlatform/cloud-sdk-npm-package/blob/master/helpers-unix.js#L93&#34;&gt;PATHが設定できてないっぽい&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;なので、↓みたいに明示的に指定してあげる必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;source ~/node_modules/@google-cloud/cloud-sdk/google-cloud-sdk/path.bash.inc&#39; &amp;gt;&amp;gt; $BASH_ENV
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というわけで、無事打てました。&lt;/p&gt;

&lt;h2 id=&#34;job間のデータ共有&#34;&gt;Job間のデータ共有&lt;/h2&gt;

&lt;p&gt;これで&lt;code&gt;circleci/node&lt;/code&gt;のイメージひとつだけ使えるようになった。勘違いしてたのだけど、前回のyamlでJob間dでデータ共有できなかったのはJobのDockerイメージが異なるものだからだと思っていたけど、そうではなかった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://circleci.com/blog/persisting-data-in-workflows-when-to-use-caching-artifacts-and-workspaces/&#34;&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2018/0130-01.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;同じ（種類の）イメージでも、&lt;code&gt;build&lt;/code&gt;Jobで生成したデータを次の&lt;code&gt;deploy&lt;/code&gt;Jobには持ち越せない。通常データの共有はできない。そうゆうときはCachingを使えばよいのかと思っていたけど、微妙に違ってた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://circleci.com/blog/persisting-data-in-workflows-when-to-use-caching-artifacts-and-workspaces/&#34;&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2018/0130-00.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cachingは異なるWorkflow間でのデータ共有であり、異なるJob間のデータ共有はWorkspaceという機能を使うのが正しい。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;persist_to_workspace&lt;/code&gt;という項目で、共有したいデータを指定し、&lt;code&gt;attach_workspace&lt;/code&gt;で取り出す。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version: 2

# =============================================
# References: Reusable Sets
# =============================================
references:
  container_config: &amp;amp;container_config
    docker:
      - image: circleci/node
    working_directory: ~/repo

  restore_npm: &amp;amp;restore_npm
    restore_cache:
      keys:
        - v1-cache-{{ arch }}-{{ .Branch }}-{{ checksum &amp;quot;package-lock.json&amp;quot; }}
        - v1-cache-{{ arch }}-{{ .Branch }}
        - v1-cache

# =============================================
# Jobs: Build and Deploy
# =============================================
jobs:
  build:
    &amp;lt;&amp;lt;: *container_config
    steps:
      - checkout
      - *restore_npm
      - run:
          name: Install Dependencies
          command: npm install
      - save_cache:
          key: v1-cache-{{ arch }}-{{ .Branch }}-{{ checksum &amp;quot;package-lock.json&amp;quot; }}
          paths:
            - node_modules
      - run:
          name: Build
          command: npm run build
      - persist_to_workspace:
          root: dist
          paths:
            - . 
      - run:
          name: Test
          command: npm test

  deploy:
    &amp;lt;&amp;lt;: *container_config
    steps:
      - checkout
      - *restore_npm
      - run:
          name: Set $PATH for `gcloud` command
          command: echo &#39;source /home/circleci/repo/node_modules/@google-cloud/cloud-sdk/google-cloud-sdk/path.bash.inc&#39; &amp;gt;&amp;gt; $BASH_ENV
      - attach_workspace:
          at: dist
      - run:
          name: Deploy to Google App Engine
          command: gcloud app deploy app.yaml
          no_output_timeout: 20m
          
# Workflowsの設定・・・
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というわけで、こんな感じになった。&lt;code&gt;&amp;amp;&lt;/code&gt;と&lt;code&gt;*&lt;/code&gt;は&lt;a href=&#34;https://qiita.com/gctfuji/items/5f8e4c5795ce41b214d1&#34;&gt;YAML記法&lt;/a&gt;アンカーとエイリアスで、変数っぽく使える。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/circleci/frontend/blob/master/.circleci/config.yml&#34;&gt;frontend/config.yml at master · circleci/frontend&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あと、本家の本気のconfig.ymlを見て参考にしたが、Jobが分割されすぎて震えた。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>SeverとClientでレンダリング結果が違う</title>
            <link>https://t32k.me/mol/log/full-icu/</link>
            <pubDate>Fri, 19 Jan 2018 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/full-icu/</guid>
            <description>&lt;p&gt;Reactをアイソモーフィックに実行しているのだけど、下記のようなエラーが出てた。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Warning: Text content did not match. Server: &amp;ldquo;1970-1-18 22:09&amp;rdquo; Client: &amp;ldquo;1970/1/18 22:09&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SeverとClientでレンダリング結果が微妙に違うとのこと。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new Intl.DateTimeFormat(locales, {
  year: &amp;quot;numeric&amp;quot;,
  month: &amp;quot;numeric&amp;quot;,
  day: &amp;quot;numeric&amp;quot;,
  hour: &amp;quot;numeric&amp;quot;,
  minute: &amp;quot;numeric&amp;quot;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;該当のコード。&lt;/p&gt;

&lt;p&gt;Node.js側の&lt;code&gt;Intl&lt;/code&gt;オブジェクトが対応していないのかなと思いつつ、Node v8だし結構新しいしなーと思っていて、原因がわからず、しばらく放っておいた。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2018/0119-00.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/api/intl.html#intl_options_for_building_node_js&#34;&gt;Internationalization Support | Node.js v9.4.0 Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あとで国際化のサポートがビルドの設定ごとで違うらしいと気づいた。デフォルトのビルドでは&lt;code&gt;--with-intl=small-icu&lt;/code&gt;というもので、部分的なサポートでしかない。それとは別に&lt;code&gt;full-icu&lt;/code&gt;という全サポートがあるらしく、これ入れたら、サーバーとクライアントでの差異はなくなった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nodejs/node/wiki/Intl&#34;&gt;Intl · nodejs/node Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちなみにICUとは&lt;a href=&#34;http://site.icu-project.org/&#34;&gt;International Components for Unicode&lt;/a&gt;の略らしい。確かに全言語対応のデータ毎回入れてたら重いよね。&lt;/p&gt;

&lt;p&gt;Node.jsのバージョンマネージャーは&lt;code&gt;nvm&lt;/code&gt;使ってるんだけど、nvmインストールするときに下記のようなオプションつけると&lt;code&gt;full-icu&lt;/code&gt;でビルドしたものをインストールできる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nvm install -s v9.4.0 --with-intl=full-icu --download=all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でもこれだと毎バージョンごとにICUのデータ入れないといけないからめんどいよね。あとGAE Node.jsのインスタンスとかどこでNode.jsのビルドしてんだ？って感じなので、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/unicode-org/full-icu-npm&#34;&gt;unicode-org/full-icu-npm: npm module to autoload full ICU data.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;後づけで言語データをインストールができるnpmがある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NODE_ICU_DATA=node_modules/full-icu/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは環境変数&lt;code&gt;NODE_ICU_DATA&lt;/code&gt;にfull-icuの言語データへのパスを設定するだけでよい。&lt;/p&gt;

&lt;p&gt;国際化とかホント苦手だわと思ったけど、今回の場合、日付の&lt;code&gt;/&lt;/code&gt;と&lt;code&gt;-&lt;/code&gt;が違うだけだったので、あんまり考えがめぐらなかったのが反省点。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>CircleCI 2.0でGAE/Node.jsのプロジェクトをデプロイ</title>
            <link>https://t32k.me/mol/log/circleci2-yml/</link>
            <pubDate>Thu, 14 Sep 2017 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/circleci2-yml/</guid>
            <description>

&lt;p&gt;基本、ずっとTravisかWerckerを使ってたんだけど、CircleCIデビューしてみた。今年の7月にCircleCI 2.0がリリースされ、config.ymlの記法も刷新されたとかで、ググって出て来るのは1.0の記法ばかりで苦労したので、メモ代わりに残しとく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.stormcat.io/post/entry/circleci2.0-overview01/&#34;&gt;CircleCI2.0事始め -新しいcircle.ymlとworkflows編 · tehepero note(・ω&amp;lt;) 2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基本は上記のブログがわかりやすい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version: 2
jobs:
  build:
    working_directory: ~/repo
    docker:
      - image: circleci/node:8

    steps:
      - checkout
      - run:
          name: System information
          command: |
            echo &amp;quot;Node $(node -v)&amp;quot;
            echo &amp;quot;Yarn v$(yarn --version)&amp;quot;
      - run:
          name: Install dependencies
          command: yarn
      - run:
          name: Build
          command: yarn run build
      - run:
          name: Test
          command: yarn test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;version: 2&lt;/code&gt; で2.0でやりまっせーって宣言して、dockerイメージとか指定していく。&lt;code&gt;yarn&lt;/code&gt; がデフォルトで入ってるらしく、GAE/Node.jsも&lt;code&gt;yarn&lt;/code&gt;が使えるので&lt;code&gt;yarn&lt;/code&gt;を使っていく。&lt;/p&gt;

&lt;p&gt;あとは&lt;code&gt;run&lt;/code&gt;でステップを指定していく。&lt;code&gt;command&lt;/code&gt;は&lt;code&gt;|&lt;/code&gt;を置けば、複数行でも書ける。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      - save_cache:
          key: cache-{{ .Branch }}-{{ checksum &amp;quot;yarn.lock&amp;quot; }}
          paths:
            - ~/repo/.cache/yarn
            - ~/repo/dist
            - ~/repo/node_modules
            - ~/repo/package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://circleci.com/docs/2.0/caching/#using-keys-and-templates&#34;&gt;Using Keys and Templates - Caching Dependencies - CircleCI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;{{ hoge }}&lt;/code&gt;はテンプレートで、&lt;code&gt;checksum&lt;/code&gt; は base64でハッシュを作ってくれる。
ここではユニークなkey名を指定したくて、こんな風にしている。あとはキャッシュさせたいパス。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;build&lt;/code&gt;ステップは終わり。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  deploy:
    working_directory: ~/repo
    docker:
      - image: google/cloud-sdk

    steps:
      - checkout
      - restore_cache:
          key: cache-{{ .Branch }}-{{ checksum &amp;quot;yarn.lock&amp;quot; }}
      - run:
          name: Deploy to Google App Engine
          command: |
            echo &amp;quot;$GOOGLE_AUTH&amp;quot; | base64 -i --decode &amp;gt; &amp;quot;$HOME/gcp-key.json&amp;quot;
            gcloud auth activate-service-account --key-file &amp;quot;$HOME/gcp-key.json&amp;quot;
            gcloud --quiet config set project &amp;quot;$GOOGLE_PROJECT_ID&amp;quot;
            gcloud --quiet app deploy app.yaml --version $(echo $CIRCLE_BRANCH | sed &amp;quot;s/\//\-/g&amp;quot;)
          no_output_timeout: 20m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;つぎに、&lt;code&gt;deploy&lt;/code&gt;ステップ。&lt;code&gt;gcloud app deploy&lt;/code&gt;のコマンドでデプロイするので、&lt;code&gt;gcloud&lt;/code&gt;が入ったdockerイメージを指定。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;restore_cache&lt;/code&gt; で先のステップで保存しといたファイルを呼び出す。&lt;/p&gt;

&lt;p&gt;あとはデプロイコマンド。CI上でデプロイするので権限をもったサービスアカウントを作らなければならない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://int128.hatenablog.com/entry/2017/08/12/153538&#34;&gt;Circle CIでCloud Functionをデプロイする - GeekFactory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記はCloud Functionだけど、認証の部分は同じなので真似するとよい。んで、エンコードしたものをCircleCIの環境変数として登録しておく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://circleci.com/docs/2.0/env-vars/#build-details&#34;&gt;Using Environment Variables - CircleCI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$CIRCLE_BRANCH&lt;/code&gt;はCircleCIが設定している環境変数。ビルド番号とかもある。&lt;/p&gt;

&lt;p&gt;あと&lt;code&gt;no_output_timeout&lt;/code&gt;は、GAE/Node.jsへのデプロイがくっそ遅くて、タイムアウト（デフォルト10分）になるので20分に伸ばしてる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後はワークフローの設定。&lt;a href=&#34;https://circleci.com/docs/2.0/configuration-reference/#filters&#34;&gt;フィルター&lt;/a&gt;とかでmasterブランチのときだけ実行とか、必須条件とか決めれる。便利。&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://engineer.crowdworks.jp/entry/2017/04/04/202719&#34;&gt;CircleCI 2.0に移行して新機能を活用したらCIの実行時間が半分になった話 - クラウドワークス エンジニアブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
        <item>
            <title>Reactコンポーネントを外から操作したい</title>
            <link>https://t32k.me/mol/log/react-custom-event/</link>
            <pubDate>Fri, 05 May 2017 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/react-custom-event/</guid>
            <description>

&lt;p&gt;最近、Reactを触っているのだけど、Reactコンポーネント外から任意のReactコンポーネントを操作したい事情に駆られた（何を言ってるのか分からねぇと思うが俺も（ｒｙ）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export default class Hoge extends Component {
  constructor(props) {
    super(props);
    this.state = { text: &#39;&#39; };
    this.handleClick = this.handleClick.bind(this);
  }
  handleClick(e) {
      this.setState({ text: &#39;unko&#39; });
  }
  render() {
      ...
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;普通のケースだと、こんな感じで&lt;code&gt;Hoge&lt;/code&gt;のコンポーネントのどっかをクリックしたら、&lt;code&gt;state&lt;/code&gt;の&lt;code&gt;text&lt;/code&gt;に&lt;code&gt;unko&lt;/code&gt;をセットすることによって、&lt;code&gt;render&lt;/code&gt;がはしるみたいな、わかりやすい。なんの問題ない。&lt;/p&gt;

&lt;p&gt;ただ、このコンポーネントを、&lt;code&gt;window.Hoge.setState({ text: &#39;unko&#39; })&lt;/code&gt;みたいに、グローバルから操作したい場合ってどうしたらいいんだろうかとけっこう悩んだ。&lt;/p&gt;

&lt;h2 id=&#34;re-render&#34;&gt;re-render&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export default class Hoge extends Component {
  render() {
      return(&amp;lt;span id=&#39;hoge&#39;&amp;gt;{ this.props.text }&amp;lt;/span&amp;gt;)
  }
}
window.Hoge = Hoge;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とりあえず、&lt;code&gt;Hoge&lt;/code&gt;をグローバルの&lt;code&gt;window&lt;/code&gt;に生やす。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export default class Fuga extends Component {
  constructor(props) {
    super(props);
    window.createHoge = (value) =&amp;gt; {
      const Hoge = window.Hoge;
      const elm = document.getElementById(&#39;hoge&#39;);
      elm.innerHTML = &#39;&#39;;
      ReactDOM.render(&amp;lt;Hoge text={value} /&amp;gt;, elm);
    };
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;親のコンポーネントなり、なんなりで、新規に&lt;code&gt;Hoge&lt;/code&gt;を作るグローバル関数を定義する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;window.createHoge(&#39;unko&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、&lt;code&gt;Hoge&lt;/code&gt;コンポーネントの&lt;code&gt;props&lt;/code&gt;に&lt;code&gt;unko&lt;/code&gt;渡して、上書きすることでできた。なんか無理矢理感あるけど&amp;hellip;&lt;/p&gt;

&lt;p&gt;既にレンダリングしてある&lt;code&gt;Hoge&lt;/code&gt;コンポーネントってどうやって取得したらいいんだろうか？(
謎&lt;/p&gt;

&lt;h2 id=&#34;custom-event&#34;&gt;custom event&lt;/h2&gt;

&lt;p&gt;とりあえず&lt;code&gt;unko&lt;/code&gt;を表示できてホッとしてたけど、今度はこの&lt;code&gt;unko&lt;/code&gt;を他のコンポーネントに伝えたいって場合どうすればいいんだろうと悩んだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export default class Fuga extends Component {
  constructor(props) {
    super(props);
    window.createHoge = (value) =&amp;gt; {
     const event = new CustomEvent(&#39;createHoge&#39;, { &#39;detail&#39;: value });
      document.getElementById(&#39;piyo&#39;).dispatchEvent(event);
      ...
    };
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;createHoge&lt;/code&gt;のときに、&lt;code&gt;createHoge&lt;/code&gt;イベントを発火させる。んで伝えたい値もセットしておく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export default class Piyo extends Component {
  constructor(props) {
    super(props);
    this.state = { text: &#39;&#39; };
        this.handleHoge= this.handleHoge.bind(this);
  }
  componentDidMount() {
    this.refs.piyo.addEventListener(&#39;createHoge&#39;, this.handleHoge);
  }
  componentWillUnmount() {
    this.refs.piyo.removeListener(&#39;createHoge&#39;, this.handleHoge);
  }
  handleHoge(e) {
    this.setState({ text: e.detail });
  }
  render() {
      return(&amp;lt;span ref=&#39;piyo&#39; id=&#39;piyo&#39;&amp;gt;{this.state.text}&amp;lt;/span&amp;gt;);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;受け手のコンポーネント&lt;code&gt;Piyo&lt;/code&gt;でリッスン♪これで、&lt;code&gt;window.createHoge(&#39;unko&#39;);&lt;/code&gt;することで、&lt;code&gt;Hoge&lt;/code&gt;コンポーネントが作られ上書きし、&lt;code&gt;Piyo&lt;/code&gt;コンポーネントにも&lt;code&gt;unko&lt;/code&gt;が表示される。&lt;/p&gt;

&lt;p&gt;なんか&lt;a href=&#34;https://mobx.js.org/&#34;&gt;MobX&lt;/a&gt;みたいなストア管理のライブラリ使えば、もっとシュッとできるんだろうなと思いつつ、しかし、そこまでの規模じゃないと思い、この結果に至りました。ちーん( ˘ω˘)&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Deploying Multiple Instances for Next.js</title>
            <link>https://t32k.me/mol/log/nextjs-invalid-build-id/</link>
            <pubDate>Tue, 25 Apr 2017 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/nextjs-invalid-build-id/</guid>
            <description>&lt;p&gt;年始に立てた目標『&lt;a href=&#34;https://t32k.me/mol/mol/log/new-years-resolutions-2017/&#34;&gt;SFC会員になる！&lt;/a&gt;』も達成してしまい、そろそろちゃんとデベロッパーに戻るかーと思いリハビリながらメモを上げていこうと思う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nkzawa/items/1e0e93efd13fb982c8c0&#34;&gt;Next.js - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近、v2.0もリリースされたことだし、&lt;a href=&#34;https://zeit.co/blog/next2&#34;&gt;Next.js&lt;/a&gt;を触っている。ほぼゼロ設定で、サーバーサイドでReactをレンダリングできたり、ルーティングがめちゃ簡単だったり、今のところいい感じである。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An unexpected error has occurred.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ローカルで開発をしているときは問題ないんだいけど、本番環境でたまに、というか、けっこうな確率でエラーページが表示されていて、なんでだろう？とログを見てみたら、&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2017/0425-00.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;BUILD_ID&lt;/code&gt;ちゃうやんけー！と怒られていた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zeit/next.js/wiki/Deployment&#34;&gt;Deployment · zeit/next.js Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ご丁寧にもWikiに書いてあった。&lt;/p&gt;

&lt;p&gt;Next.jsの起動コマンドは&lt;code&gt;next build; next start&lt;/code&gt;って感じでbuildコマンドを打ってから起動するのだけど、要は複数のインスタンスで毎回buildコマンドが走って、その度に
にユニークな&lt;code&gt;BUILD_ID&lt;/code&gt;が生成されて、インスタンス間で異なるものになっちゃってる話だと理解した。&lt;/p&gt;

&lt;p&gt;というわけで、ユーザー側で任意のIDで上書きしてやればいい。WikiにあるようにGitのコミットIDとか利用すればいいっぽい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;next build &amp;amp;&amp;amp; echo $(git rev-parse HEAD) &amp;gt; .next/BUILD_ID
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というわけで、こうゆう感じで書いたのだけど、GAE/Node.jsの環境ではうまくいかなかった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;next build &amp;amp;&amp;amp; echo $GAE_VERSION &amp;gt; .next/BUILD_ID
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;めんどくさかったので、&lt;a href=&#34;https://cloud.google.com/appengine/docs/flexible/nodejs/runtime&#34;&gt;GAEの環境変数&lt;/a&gt;の&lt;code&gt;GAE_VERSION&lt;/code&gt;を&lt;code&gt;BUILD_ID&lt;/code&gt;として利用したら、エラーが表示されなくなったヽ(=´▽`=)ﾉ&lt;/p&gt;

&lt;p&gt;Next.js使ってる人、情報共有していきましょう。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Accelerated Mobile Linksを試してみる</title>
            <link>https://t32k.me/mol/log/accelerated-mobile-links/</link>
            <pubDate>Tue, 24 Jan 2017 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/accelerated-mobile-links/</guid>
            <description>&lt;p&gt;マイブームのAMPネタ。&lt;a href=&#34;https://www.ampproject.org/&#34;&gt;AMPとはモバイルWebの爆速化プロジェクト&lt;/a&gt;ですが、一応オープンソースプロジェクトということになってるが、いかんせんGoogleが主導しているわけで、Googleの検索結果ページから遷移するとそのメリットを最大限に享受できる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers-jp.googleblog.com/2017/01/introducing-accelerated-mobile-links-making-the-mobile-web-app-quick.html&#34;&gt;Google Developers Japan: Accelerated Mobile Links のご紹介: モバイル ウェブアプリを高速に&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これまではちょっと限定的な印象だったわけだが、今回CloudflareさんもAMPに対応したサービスを出したってもんだから、モバイルWeb全体のスピード貢献に期待できる。その名もAccelerated Mobile Links!!!&lt;/p&gt;

&lt;p&gt;Cloudflareを利用しているサイト上で、AMP対応したURLがあると、Googleの検索結果ページ同様、先読み込みし、AMPビューワーでチョッパヤに表示してくれる代物。&lt;/p&gt;

&lt;p&gt;たしか、このブログも&lt;a href=&#34;https://t32k.me/mol/log/secure-and-fast-github-pages/&#34;&gt;SSL対応&lt;/a&gt;したときに、Cloudflareを利用した。というわけで、設定ページを見たら、あった！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2017/0124-00.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ENABLE ACCELERATED MOBILE LINKSをONにしましょう。&lt;/p&gt;

&lt;p&gt;これで対応OK!&lt;/p&gt;

&lt;p&gt;さて、以下のリンクはAMP対応しているURLだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mercariatte.com/jp/&#34;&gt;メルカリ アッテ - 手数料無料！なんでも募集できる地域コミュニティアプリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記のリンクをモバイルデバイスで閲覧すると、先頭にAMPマークがついてるのが分かる。これをクリックするとGoogleの検索結果じゃないにもかかわらず、AMPビューワーが立ち上がる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2017/0124-01.gif&#34; width=&#34;240&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// リソースの読み込み先
https://www-mercariatte-com.amp.cloudflare.com/i/s/www.mercariatte.com/files/img/icon-app.svg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しかも、&lt;code&gt;*.cdn.ampproject.org&lt;/code&gt;じゃなくて、&lt;code&gt;*.amp.cloudflare.com&lt;/code&gt;からリソースが配信されている。Cloudflareさん太っ腹じゃないか。&lt;/p&gt;

&lt;p&gt;というわけで、すでにCloudflareを利用しているサイトなら、とりあえず Accelerated Mobile Linksを有効にしといて損はないんじゃないかな。&lt;/p&gt;

&lt;p&gt;もっと、他のパートナーも加わってモバイルWeb全体が速くなりますように( ˘ω˘)ｽﾔｧ&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>xoとavaでお手軽リント・テスト環境構築</title>
            <link>https://t32k.me/mol/log/xo-and-ava/</link>
            <pubDate>Wed, 04 Jan 2017 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/xo-and-ava/</guid>
            <description>

&lt;p&gt;元旦に&lt;a href=&#34;https://github.com/t32k/stylestats/releases/tag/v7.0.0&#34;&gt;StyleStats v7.0&lt;/a&gt;をリリースした。めでたいことだ（知らんけど）。バージョンアップ作業は例のごとく依存するnpm modulesをアップデートして終わりというのがt32kの伝家の宝刀だが、せっかくなので今回はES6に書き換えようと思った。&lt;/p&gt;

&lt;p&gt;しかし、それも&lt;code&gt;function&lt;/code&gt;をアロー関数に変更するぐらいだろうと、タカをくくっていたが、書き出してみると、&lt;a href=&#34;https://1000ch.net/&#34;&gt;1000ch君パイセン&lt;/a&gt;の&lt;del&gt;煽り&lt;/del&gt;意識高いレビューコメントのおかげで、いろいろ勉強させてもらった、多謝( ˘ω˘)！&lt;/p&gt;

&lt;h2 id=&#34;eslint&#34;&gt;ESLint&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2017/0104-00.png&#34; alt=&#34;ESlint&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://eslint.org/&#34;&gt;ESLint - Pluggable JavaScript linter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;アロー関数に変更するだけってのもあれだから、ちゃんとESlintもES6用の設定にカスタマイズしようと思い必死こいて&lt;code&gt;.eslintrc&lt;/code&gt;とにらめっこしていた。といっても下記の記事を参考にしただけだが。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mysticatea/items/f523dab04a25f617c87d&#34;&gt;ESLint 最初の一歩 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ESlintの仰せのままにコードを書き換えていく。書き終えたところで助言。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;.eslintrcメンテしていくのつらいから、xo使ったらどうですか？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;タシ蟹！設定項目いっぱいあってめんどくさいです！しかし、xoってなんぞ( ˘ω˘)？&lt;/p&gt;

&lt;h2 id=&#34;xo-javascript-happiness-style-linter&#34;&gt;xo: JavaScript happiness style linter&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2017/0104-01.png&#34; alt=&#34;xo&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/xo&#34;&gt;sindresorhus/xo: ❤️ JavaScript happiness style linter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いっぱいnpm作ってるかの有名な&lt;a href=&#34;https://github.com/sindresorhus&#34;&gt;sindresorhus&lt;/a&gt;氏のリンター。内部的にはESlintを使っていて、氏が思うESlintの設定でリントしてくれるというもの。なるほど検索しづらい！&lt;/p&gt;

&lt;p&gt;僕みたいな、あまりJSにこだわりがない三等兵にとっては、こうゆう業界の先いってる人の考えを真似て従うのは性に合ってる。というかリントの設定で時間つぶしたくないもんね。&lt;/p&gt;

&lt;p&gt;似たようなもので&lt;a href=&#34;https://github.com/feross/standard&#34;&gt;feross/standard&lt;/a&gt;がある。この圧倒的な名前の王道感のおかげが、こっちのほうが有名だ。ただこっちは&lt;strong&gt;セミコロンなし&lt;/strong&gt;が既定のルールとなっている。さきほど、こだわりはないと言ったが、こだわりがないからこそ小さい頃に『JSはセミコロンを必ずつけろ！』と教わって生きてきたので敷かれたレールから外れるのがこわい。そうゆう人も多いのか、&lt;a href=&#34;https://github.com/Flet/semistandard&#34;&gt;Flet/semistandard&lt;/a&gt;というリンターもある。さっそくスタンダード分裂してんじゃねーか！と思ったのはいざ知らず。&lt;/p&gt;

&lt;p&gt;xoのほうはセミコロンつけるな！とは言わないしログもきれい( ˘ω˘) ただ、デフォルトでインデントはタブというルールがある。これが気に食わない人は&lt;code&gt;package.json&lt;/code&gt;に&lt;code&gt;xo&lt;/code&gt;のフィールドを作って設定を変更できる。その他のいくつかの設定も&lt;code&gt;package.json&lt;/code&gt;から変更できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;awesome-package&amp;quot;,
  &amp;quot;xo&amp;quot;: {
    &amp;quot;spacce&amp;quot;: true
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;またスペース派だったけど、今回からタブ派に切り替えようかしらって思った人は&lt;code&gt;xo --fix&lt;/code&gt;ですぐに対応できる。今まで使ってたESlintの設定よりもチョイ厳し目だが、全体的に納得感あるので気に入っている。&lt;/p&gt;

&lt;h2 id=&#34;ava-futuristic-javascript-test-runner&#34;&gt;ava: Futuristic JavaScript test runner&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2017/0104-02.jpg&#34; alt=&#34;ava&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/avajs/ava&#34;&gt;avajs/ava: Futuristic JavaScript test runner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;xoのドキュメントを読んでいるとavaという単語が目につく。同じsindresorhus氏作のテストランナーだ。自分で未来的って言っちゃうほどなんだから、新しい仕様が採用されているのだろうと思い、せっかくなのでxoと一緒にこっちも採用してみた。1000ch君パイセンも最近使ってると言ってたし。&lt;/p&gt;

&lt;p&gt;以前までは&lt;a href=&#34;https://mochajs.org/&#34;&gt;Mocha&lt;/a&gt;を使用していたが、非同期のテストがしづらいというか、よくわかんないままやってた。avaはテストの実行自体も非同期にやってくれて早い。またPromiseをサポートしているので、&lt;code&gt;done()&lt;/code&gt;とかいちいち呼び出さなくてもいい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;test(&#39;Promiseを返す関数のテスト&#39;, t =&amp;gt; {
    return somePromise().then(result =&amp;gt; {
        t.is(result, &#39;おんなじあたい&#39;);
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちょうど、&lt;code&gt;StyleStats#parse()&lt;/code&gt;もPromiseを返すように変更したのでだいぶ楽に書けるようになった。と思っていたが、xoとavaを併用していると、上記のテストは『Async/Awaitを使えよー！』とxoに怒られる( ˘ω˘)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test(&#39;Promiseを返す関数のテスト&#39;, async t =&amp;gt; {
    const result = await somePromise();
    t.is(result, &#39;おんなじあたい&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;言われたとおりにしたら、さらに見やすくなって感動した。&lt;/p&gt;

&lt;p&gt;あとは、Mochaを使ってると&lt;code&gt;describe&lt;/code&gt;や&lt;code&gt;it&lt;/code&gt;といったグローバル変数を使うはめになって、ESlintで『そんなもん宣言されてないやんけ！』と怒られて、テストファイルだけ、その変数を除外するとかゆうめんどくさいことからも開放されてよい( ˘ω˘)&lt;/p&gt;

&lt;h3 id=&#34;nyc-the-istanbul-command-line-interface&#34;&gt;nyc: the Istanbul command line interface&lt;/h3&gt;

&lt;p&gt;avaでコードのカバレッジを取るにあたって、&lt;a href=&#34;https://github.com/gotwarlost/istanbul&#34;&gt;istanbul&lt;/a&gt;は使えなくて、代わりにサブプロセスの&lt;a href=&#34;https://github.com/istanbuljs/nyc&#34;&gt;nyc&lt;/a&gt;というのを使うのだが、なんしかうまくいかない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/avajs/ava/blob/master/docs/recipes/code-coverage.md&#34;&gt;ava/code-coverage.md at master · avajs/ava&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同じ設定・コードなのに、うまくいく時といかない時がある。よくわからないので寝て待つことにする。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;最初のセットアップも&lt;code&gt;xo --init&lt;/code&gt;、&lt;code&gt;ava --init&lt;/code&gt;で出来るので楽ちんである。あとなんとかrcファイルもルートディレクトリに貯まらないのもいい（package.jsonは肥大化するが許容範囲だと思う&amp;hellip;）。できるかぎり開発環境構築に手間を取らず、アプリケーションのコードに集中したいものですな( ˘ω˘)&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>カスタムドメインのGitHub PagesをSSL対応する</title>
            <link>https://t32k.me/mol/log/secure-and-fast-github-pages/</link>
            <pubDate>Thu, 22 Sep 2016 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/secure-and-fast-github-pages/</guid>
            <description>

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2016/0922-00.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このブログは、&lt;a href=&#34;https://t32k.me/mol/mol/log/hugo/&#34;&gt;Hugo + GitHub Pagesで運用&lt;/a&gt;している。&lt;code&gt;*.github.io&lt;/code&gt;みたいなGitHubが提供しているドメインなら既にHTTPSの恩恵を受けられるが&lt;code&gt;t32k.me&lt;/code&gt;のカスタムドメインを使用している場合はその限りではない。そうゆうわけで、21世紀だし&lt;code&gt;https://t32k.me&lt;/code&gt;を目指す。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/blog/2186-https-for-github-pages&#34;&gt;HTTPS for GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以前にrudolph君さんパイセンが、Kloudsecを使えばチョー楽っすよ！って言ってたのを思い出して、それを使ってみようとしてみたが既に&lt;a href=&#34;https://www.reddit.com/r/webdev/comments/4s3kmf/got_an_email_saying_that_kloudsec_will_be/&#34;&gt;サービスが終了&lt;/a&gt;していた／(^o^)＼&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.rudolph-miller.com/2016/03/11/kloudsec-for-ssl-with-custom-domain-on-gh-pages/&#34;&gt;Kloundsec for SSL with Custom Domain on GitHub Pages - (rudolph-miller)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というわけで、1000ch君さんパイセンの記事にあるように、CloudFlareを使用してSSL対応する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://1000ch.net/posts/2015/github-pages-custom-domain-in-https.html&#34;&gt;GitHub Pagesに設定しているカスタムドメインをHTTPS対応させる - 1000ch.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cloudflareでの登録&#34;&gt;CloudFlareでの登録&lt;/h2&gt;

&lt;p&gt;まずは、CloudFlareのアカウントを登録しよう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;CloudFlare - The web performance &amp;amp; security company&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;んで、自分のサイトを追加する(Add Site)。次にCloudFlare Planを選べといわれるが、Free Planでも問題ない。&lt;code&gt;xxx.ns.cloudflare.com&lt;/code&gt;みたいなネームサーバーが2つ、もらえるので、それに変更する。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2016/0922-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;自分の場合、ドメインはお名前.comで取得したので、そこでネームサーバーを変更する。変更が反映されると、自分の追加したサイトのステータスがPendingからActiveに変わる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2016/0922-02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;あとは、Page Rulesのページに行き、自分のドメインのHTTPページのすべてのアクセスをHTTPSに変更する処理を設定すれば完璧だ。&lt;/p&gt;

&lt;h2 id=&#34;後処理&#34;&gt;後処理&lt;/h2&gt;

&lt;p&gt;しばらくするとHTTPSにリダイレクトされるようになるので、寝て待とう（最大で24時間かかるとか）。自分のサイトでHTTPからのリソース読み込みがあるとちゃんと緑の鍵アイコンにならないので、調べておこう。基本的に自分のドメイン配下のリソースはルートからの相対パスで書いているので、特に問題はなかった。ただ、Amazonのアフィリエイト画像がHTTPからの読み込みだったので&lt;a href=&#34;http://d.hatena.ne.jp/takeR/20141026/1414356669&#34;&gt;全置換して対応&lt;/a&gt;した。&lt;/p&gt;

&lt;p&gt;やっぱり、ドメイン系は反映に時間がかかるのでやきもきしたが、終わってみれば簡単だった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/&#34;&gt;Secure and fast GitHub Pages with CloudFlare&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
        <item>
            <title>StyleStatsのChrome拡張機能を作った</title>
            <link>https://t32k.me/mol/log/stylestats-crx/</link>
            <pubDate>Mon, 01 Feb 2016 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/stylestats-crx/</guid>
            <description>

&lt;p&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/stylestats/lgbcioahebkgkdiljpgcdaghejijioki&#34;&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2016/0120-00.gif&#34; alt=&#34;StyleStats Chrome拡張機能&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;StyleStatsのChrome拡張を作った。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/stylestats/lgbcioahebkgkdiljpgcdaghejijioki&#34;&gt;StyleStats - Chrome ウェブストア&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/t32k/stylestats&#34;&gt;StyleStats&lt;/a&gt;はCSSを解析してスタイルの各種指標を表示してくれるnpmだ。それを簡単にChrome拡張から利用できるようにした。調べたいページで右上のボタンを押すと新規タブで結果が出る。実に簡単だ。&lt;/p&gt;

&lt;h2 id=&#34;これまでの流れ&#34;&gt;これまでの流れ&lt;/h2&gt;

&lt;h3 id=&#34;cli&#34;&gt;CLI&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2016/0120-00.png&#34; alt=&#34;Commandline&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ npm install -g stylestats
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/stylestats&#34;&gt;npm&lt;/a&gt;からインストールしてコマンドラインで使うのが一番やれることが多い。ローカルのファイルも解析できるし、それこそProgrammaticallyに自分でハックして、独自のレポートとかもできる。まぁ黒い画面に不慣れ人はちょっとあれかもしれない。&lt;/p&gt;

&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2016/0120-01.png&#34; alt=&#34;StyleStats.org&#34; /&gt;&lt;/p&gt;

&lt;p&gt;そうゆうわけで、もっとライトに使ってもらおうとWeb版も作った。CLIと違って、&lt;code&gt;Unique Font Families&lt;/code&gt;、　&lt;code&gt;Unique Colors&lt;/code&gt; がプレビューできたり、円グラフやタイムラインチャートなどグラフ機能を充実している。一つ一つのテスト結果にパーマリンクができるので、CSSといえどデータを残したくないって人はアレかもしれない。&lt;/p&gt;

&lt;p&gt;あとParse.comがサービスを終了するということで、StyleStatsのWebもがっつりテスト結果保存に使用していたので、寝耳に水だった。まぁ1年あることだし、BaaS自体やめて普通にMongoDBとか使ってみるのも良いかもしれない。Herokuでやってることだし。&lt;/p&gt;

&lt;h3 id=&#34;crx&#34;&gt;CRX&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2016/0120-02.png&#34; alt=&#34;Chrome Extension&#34; /&gt;&lt;/p&gt;

&lt;p&gt;そうゆうわけで、ライトに使えつつサーバーにデータを預けたくないって人向けにChrome拡張を今回作った。&lt;code&gt;Unique Font Sizes&lt;/code&gt;もプレビュー可能になった。&lt;/p&gt;

&lt;h2 id=&#34;使った技術とか&#34;&gt;使った技術とか&lt;/h2&gt;

&lt;h3 id=&#34;es2015&#34;&gt;ES2015&lt;/h3&gt;

&lt;p&gt;当たり前だけど、Chrome拡張なのでクロスブラウザ対応は気にしなくてよいし、現時点でChromeが対応しているESの機能ならBabelしなくてもそのまま使える。バベる環境作るのめんどいし、楽だよね。&lt;/p&gt;

&lt;h3 id=&#34;promise-fetch-api-arrow-functions&#34;&gt;Promise + Fetch API + Arrow functions&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Promise.all(links.map(link =&amp;gt;
  fetch(link.href, {mode: &#39;cors&#39;}).then(response =&amp;gt; response.text())
))
.then(texts =&amp;gt; {});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ということで、&lt;code&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/stylesheet.css&amp;quot;&amp;gt;&lt;/code&gt;要素を見つけてきてリモートのスタイルシートをGETするような処理も、Promiseできるのでコールバック地獄にならない。Fetch API使えるので&lt;code&gt;XMLHttpRequest&lt;/code&gt;みたいな煩雑な記述もしなくてもいい。そもそもアロー関数でタイプ数自体も少なくて済む。この処理をES3/5で普通に書けば20~30行くらいなるんじゃないかな。&lt;/p&gt;

&lt;h3 id=&#34;let-const&#34;&gt;Let + Const&lt;/h3&gt;

&lt;p&gt;あとまぁ特にそこまで便利になるわけでもないけど、一応&lt;code&gt;let&lt;/code&gt;とか&lt;code&gt;const&lt;/code&gt;とかも使っといた。&lt;/p&gt;

&lt;h2 id=&#34;css3&#34;&gt;CSS3&lt;/h2&gt;

&lt;h3 id=&#34;object-fit&#34;&gt;object-fit&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.screenshot img {
  object-fit: cover;
  object-position: top;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;background-size&lt;/code&gt;的なことを&lt;code&gt;img&lt;/code&gt;要素に対して直接指定できるようなもの。解析したページのキャプチャ画像が今回追加されたが、ページ自体があんまり縦長になるもいやなので、最初は背景画像にして&lt;code&gt;background-size:cover&lt;/code&gt;的なことをしたが、これだと印刷したときに表示されないので、そういえば&lt;code&gt;object-fit&lt;/code&gt;があったのを思い出した。今のところIEではサポートされていない。&lt;/p&gt;

&lt;h3 id=&#34;currentcolor&#34;&gt;currentColor&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-hbs&#34;&gt;&amp;lt;ul&amp;gt;
  {{#each body.uniqueColors}}
  &amp;lt;li style=&amp;quot;color:{{this}}&amp;quot;&amp;gt;
    &amp;lt;span class=&amp;quot;circle&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;{{this}}
  &amp;lt;/li&amp;gt;
  {{/each}}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Unique Colors&lt;/code&gt;の色丸の部分は&lt;code&gt;span&lt;/code&gt;の&lt;code&gt;background-color&lt;/code&gt;で指定してあるのだけど、&lt;code&gt;.circle { background-color:　currentColor; }&lt;/code&gt;で、現在のその要素のcolorプロパティを指定できる。&lt;code&gt;currentColor&lt;/code&gt;キーワードが使えないと、&lt;code&gt;&amp;lt;span style=&amp;quot;background-color:{{this}}&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt;みたいな感じで&lt;code&gt;span&lt;/code&gt;の方にも指定しなきゃいけないというダルいことになる。&lt;code&gt;currentColor&lt;/code&gt;自体は、IE9以上で使えるので、そこまで最新技術ってことでもないけど良い使い道が見つかって嬉しかったのだ。&lt;/p&gt;

&lt;h2 id=&#34;chrome-extension-api&#34;&gt;Chrome Extension API&lt;/h2&gt;

&lt;h3 id=&#34;chrome-tabs&#34;&gt;chrome.tabs&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;chrome.tabs.captureVisibleTab(screenshotUrl =&amp;gt; {})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでキャプチャ取れる！簡単！Phantom.jsなんて使わなくてもいい！&lt;/p&gt;

&lt;h3 id=&#34;chrome-runtime&#34;&gt;chrome.runtime&lt;/h3&gt;

&lt;p&gt;アイコンをクリックしたらcontent scriptを動かすとか。そんでcontent scriptの結果をbackground.jsに返すとか。&lt;a href=&#34;https://developer.chrome.com/extensions/messaging&#34;&gt;Message Passing&lt;/a&gt;というやつだ。いつも忘れるのでメモっとく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-background.js&#34;&gt;// これでcontent.jsに送信
chrome.browserAction.onClicked.addListener(tab =&amp;gt; {
    chrome.tabs.query({active: true, currentWindow: true}, tabs =&amp;gt; {
        let activeTab = tabs[0];
        chrome.tabs.sendMessage(activeTab.id, {&#39;message&#39;: &#39;clicked&#39;});
    });
});
// これで受ける
chrome.runtime.onMessage.addListener((request, sender, sendResponse) =&amp;gt; {})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-content.js&#34;&gt;// これで受けて
chrome.runtime.onMessage.addListener(analyzeCSS);
// これでbackground.jsに送信
chrome.runtime.sendMessage({error: false, meta: meta, body: result});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;material-design-lite&#34;&gt;Material Design Lite&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.getmdl.io/&#34;&gt;Material Design Lite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使ったと言えないほど、ほぼ既存のテンプレートをいじっただけだ。基本BEMっぽいかんじでクラス属性を付与していくのだけど、&lt;code&gt;mdl-color-text--grey-500&lt;/code&gt;こうゆう長いユーティリティのクラス属性とかもバンバンつけていく感じで、クラス属性値の見通しがあんまりだなと思った。まぁ、独自の接頭辞とかつけて名前空間区切ったりして汎用性を考慮しなければならないCSSライブラリの宿命か。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>StyleStatsにタイムラインチャートを追加した</title>
            <link>https://t32k.me/mol/log/stylestats-charts/</link>
            <pubDate>Sun, 09 Aug 2015 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/stylestats-charts/</guid>
            <description>

&lt;p&gt;&lt;a href=&#34;http://www.stylestats.org/dashboard?q=https://www.facebook.com&#34;&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2015/0810-00.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;待望の期間グラフを&lt;a href=&#34;http://www.stylestats.org/&#34;&gt;StyleStats Web版&lt;/a&gt;に追加した。StyleStatsはCSSを解析ツールで、一回だけ使って、へぇー私の・僕の書いたCSSはこんな感じなんだぁーと理解してもらうのも結構だが、やはり継続的に解析してもらって、どのくらい改善したのか理解して欲しいと思っている。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-slide=&#34;125&#34; data-id=&#34;50ae30301fb9013041ed22000a9d04af&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/jonrohan/githubs-css-performance&#34;&gt;GitHub&amp;rsquo;s CSS Performance // Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こう思うようになったのもJon Rohan氏のGitHub&amp;rsquo;s CSS Performanceのスライドを見てからだ。CSSだからといって、彼らは手を抜くこともなく最高のエンジニアリングを持って問題を解決しようとしていた。さすがGitHub!おれたちにできない事を平然とやってのけるッ！そこにシビれる!あこがれるゥ!と思って、そうゆうことを僕もしたくてここまで頑張ってきた。&lt;/p&gt;

&lt;p&gt;そんな感じで感傷に浸っているが、実装自体は&lt;a href=&#34;http://www.highcharts.com/&#34;&gt;HIGHCHARTS&lt;/a&gt;を使っていて、難なくできている。&lt;a href=&#34;http://d3js.org/&#34;&gt;D3.js&lt;/a&gt;も考えたが、あれはビジュアリゼーションツールであって、グラフツールではない。&lt;a href=&#34;http://c3js.org/&#34;&gt;C3.js&lt;/a&gt;を使えば、グラフ機能を簡単に使えるが、D3.js + C3.js、2つのスクリプト読み込むのダルいと思って、HIGHCHARTSにした。そのほうが軽いしね。商用利用するとお金がかかるが、まぁしないし、いいかと思った。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2015/0810-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;そうゆうわけで、みなさん定期的に使ってみてください。当然、1回しかテストが実行されてないと、ただの点のグラフになるで、とりあえず2回以上テストお願いします。あとは、Web UIからじゃなくて、リモートから実行できたらいいなぁと思いつつ、おいおい頑張っていこうと思う。&lt;/p&gt;

&lt;h2 id=&#34;web-db-press総集編&#34;&gt;WEB+DB PRESS総集編&lt;/h2&gt;

&lt;p&gt;そういえば、WEB+DB PRESS総集編に記事を寄稿しましたので、皆さんよければ買ってください。買ってください！&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;WEB+DB PRESS総集編第5弾です。Vol.1~84まで14年分のバックナンバーと、過去4回の総集編の書き下ろし記事をDVDに一挙収録します。もちろん、特別書き下ろしとして豪華執筆陣による「Web技術の過去と現在、そしてこれから」も掲載。DVD収録データを含めた本誌電子版のダウンロード用パスコードも付録しているため、DVDが読めない環境の方も安心です!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;azlink-box&#34;&gt;&lt;div class=&#34;azlink-image&#34; style=&#34;float:left&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774175382/warikiru-22/ref=nosim/&#34; name=&#34;azlinklink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/512VlPFhc%2BL._SL160_.jpg&#34; alt=&#34;WEB+DB PRESS総集編[Vol.1~84]&#34; style=&#34;border:none&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;azlink-info&#34; style=&#34;float:left;margin-left:15px;line-height:120%&#34;&gt;&lt;div class=&#34;azlink-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774175382/warikiru-22/ref=nosim/&#34; name=&#34;azlinklink&#34; target=&#34;_blank&#34;&gt;WEB+DB PRESS総集編[Vol.1~84]&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;azlink-detail&#34;&gt;WEB+DB PRESS編集部&lt;br /&gt;技術評論社 (2015-08-11)&lt;br /&gt;売り上げランキング: 2370&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;azlink-link&#34; style=&#34;margin-top:5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774175382/warikiru-22/ref=nosim/&#34; target=&#34;_blank&#34;&gt;Amazon.co.jp で詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;azlink-footer&#34; style=&#34;clear:left&#34;&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        </item>
        
        <item>
            <title>そんなに目新しくもない技術でWebアプリをリニューアルした2015年春</title>
            <link>https://t32k.me/mol/log/renewal-stylestats/</link>
            <pubDate>Mon, 27 Apr 2015 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/renewal-stylestats/</guid>
            <description>

&lt;p&gt;&lt;a href=&#34;http://www.stylestats.org/&#34;&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2015/0427-00.png&#34; alt=&#34;StyleStats&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://reactjs-meetup.connpass.com/event/11232/&#34;&gt;世間はReactの話題で持ちきり&lt;/a&gt;のようだけど、&lt;a href=&#34;http://backbonejs.org/&#34;&gt;Backbone.js&lt;/a&gt;でStyleStatsのWebアプリをリニューアルした。以上で伝えることは終わったが、リニューアルするにあたってつらかったことをつらつらかきとめておく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.stylestats.org/&#34;&gt;StyleStats - An evaluating tool for writing better CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そもそもBackbone使うほど複雑なアプリでもないんだけど、勉強がてら使ってみた。てかParse.comを使いたくて、それが&lt;a href=&#34;https://parse.com/docs/js_guide&#34;&gt;BackboneベースのSDK&lt;/a&gt;だったからというのもある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://parse.com/&#34;&gt;Parse.com&lt;/a&gt;はmBaaS(mobile Backend as a Service)の類で、データを簡単にストアしてくれるもの。僕のようなフロント側の人間でバックエンドがからっきしな人も、こうゆうのを使うとWebアプリケーションを簡単に作れるそうだ。StyleStatsで、テスト結果をデータに貯めときたかったので使ってみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.stylestats.org/results/nBEUw1oi7k&#34;&gt;StyleStats Test Result | http://www.google.com/ - Sun Apr 26 2015 04:32:59 GMT-0700 (PDT)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;リニューアル後はテスト結果ひとつひとつにパーマリンクができるようになったので、定期的にテストかけといて、あとから比較（目視）とかできる。まぁデータ自体は溜まっていくので、今後はグラフ生成機能とか提供できるかもしれない（やらないかもしれない。&lt;a href=&#34;http://d3js.org/&#34;&gt;D3.js&lt;/a&gt;か&amp;hellip;）。&lt;/p&gt;

&lt;h2 id=&#34;javascriptとか&#34;&gt;JavaScriptとか&lt;/h2&gt;

&lt;p&gt;個人的にJavaScriptはCrome拡張だったりNode.jsでCLIツール作ったするときに書くくらいで、今回はじめてWebアプリケーションとしてのJavaScriptをBackbone.jsで書いた。うん、難しいよね。なんかうまく動かなかったら、それBackboneの問題なのかParse SDKの問題なのか、どっちかわからんと思ってたら、結局、自分のJS基礎力のなさから来る問題だったりして苦労した。&lt;/p&gt;

&lt;div class=&#34;azlink-box&#34;&gt;&lt;div class=&#34;azlink-image&#34; style=&#34;float:left&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00NBHLZIA/warikiru-22/&#34; name=&#34;azlinklink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/51oknTylWUL._SL160_.jpg&#34; alt=&#34;入門Backbone.js&#34; style=&#34;border:none&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;azlink-info&#34; style=&#34;float:left;margin-left:15px;line-height:120%&#34;&gt;&lt;div class=&#34;azlink-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00NBHLZIA/warikiru-22/&#34; name=&#34;azlinklink&#34; target=&#34;_blank&#34;&gt;入門Backbone.js&lt;/a&gt;&lt;div class=&#34;azlink-powered-date&#34; style=&#34;font-size:7pt;margin-top:5px;font-family:verdana;line-height:120%&#34;&gt;posted at 2015.4.27&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;azlink-detail&#34;&gt;James Sugrue,クイープ&lt;br /&gt;翔泳社&lt;br /&gt;売り上げランキング: 27475&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;azlink-link&#34; style=&#34;margin-top:5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00NBHLZIA/warikiru-22/&#34; target=&#34;_blank&#34;&gt;Amazon.co.jp で詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;azlink-footer&#34; style=&#34;clear:left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;世間がReact!React!React!って言ってる中、せっせと2012年くらいの記事を貪っていてちょっと辛かった。いや今までサボっていた自分が悪いんだ。置いてけぼり感つらい。資料に関しては、上記の本ですべて事足りると思う。&lt;/p&gt;

&lt;p&gt;あと、&lt;a href=&#34;http://browserify.org/&#34;&gt;Browserify&lt;/a&gt;を使ってみた。個人的にどちらかというとNode.jsの文化に親しみを感じているのでモジュール管理としてはこれがいいのではと思ったけど、うまいこと使いこなせている自信はない。&lt;a href=&#34;http://havelog.ayumusato.com/develop/others/e613-concat_build_pattern_examples.html&#34;&gt;Concatでいいんじゃないか&lt;/a&gt;と思うこともあるが、&lt;code&gt;require()&lt;/code&gt;したかったんや。&lt;/p&gt;

&lt;p&gt;でも、最近じゃ&lt;a href=&#34;http://www.2ality.com/2014/09/es6-modules-final.html&#34;&gt;ES6のimport&lt;/a&gt;ってのもあるのね、どうしよう。まぁいいや。&lt;a href=&#34;http://thlorenz.com/es6ify/&#34;&gt;es6ify&lt;/a&gt;や&lt;a href=&#34;https://github.com/babel/babelify&#34;&gt;babelify&lt;/a&gt;というのもある。なんだこれ？まぁいいや。あ、そうそう。BrowserifyでHandlebarsのtemplateをプリコンパイルしたかったら&lt;a href=&#34;https://github.com/epeli/node-hbsfy&#34;&gt;hbsfy&lt;/a&gt;っての使うらしいい。ファイファイやかましいわ。とにかく最近のES6,7事情ついていけてない、つらい。&lt;/p&gt;

&lt;p&gt;あと&lt;a href=&#34;https://t32k.me/mol/log/npm-run-script/&#34;&gt;Grunt/Gulpで憔悴した話&lt;/a&gt;したけど、やっぱなんやかんやでGulp使った。起動させるインターフェイスとしては&lt;code&gt;npm run script&lt;/code&gt;使っているので許して欲しい（誰）。&lt;/p&gt;

&lt;h2 id=&#34;cssとか&#34;&gt;CSSとか&lt;/h2&gt;

&lt;p&gt;UIは&lt;a href=&#34;http://www.google.com/design/spec/material-design/introduction.html&#34;&gt;Material Design&lt;/a&gt;をやってみたかったので、ここは王道な感じで、&lt;a href=&#34;https://www.polymer-project.org/0.5/&#34;&gt;Polymer&lt;/a&gt;の&lt;a href=&#34;https://www.polymer-project.org/0.5/docs/elements/&#34;&gt;Paper Element&lt;/a&gt;を使ってみようと思った。てか、Material Design以前に、Polymer以前に、&lt;a href=&#34;http://webcomponents.org/&#34;&gt;Web Components&lt;/a&gt;を分かってないなかったので色々読んだ。&lt;/p&gt;

&lt;h3 id=&#34;web-components&#34;&gt;Web Components&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.html5rocks.com/ja/tutorials/webcomponents/customelements/&#34;&gt;Custom Elements: HTML に新しい要素を定義する - HTML5 Rocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.html5rocks.com/ja/tutorials/webcomponents/template/&#34;&gt;HTML で利用可能になった Template タグ: クライアントサイドのテンプレートの標準化 - HTML5 Rocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.html5rocks.com/ja/tutorials/webcomponents/imports/&#34;&gt;HTML Imports: ウェブのための #include - HTML5 Rocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.html5rocks.com/ja/tutorials/webcomponents/shadowdom-201/&#34;&gt;Shadow DOM 201: CSS とスタイリング - HTML5 Rocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.html5rocks.com/ja/tutorials/webcomponents/shadowdom-301/&#34;&gt;Shadow DOM 301: 上級者向けコンセプトと DOM API - HTML5 Rocks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;polymer&#34;&gt;Polymer&lt;/h3&gt;

&lt;div class=&#34;rm&#34;&gt;&lt;iframe src=&#34;https://www.youtube.com/embed/jrt7sMq9lO0?list=PLOU2XLYxmsII5c3Mgw6fNYCzaWrsM3sMN&amp;amp;controls=0&amp;amp;showinfo=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLOU2XLYxmsII5c3Mgw6fNYCzaWrsM3sMN&#34;&gt;Polycasts - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;わー＞＜覚えること多すぎだ。疲れた。Polymerが0.5から0.8で爆速になったとかでAPIも変わったとかで、Paper elementsが0.8対応してないので、ここまできて採用するのやっぱやめた。つらい。&lt;/p&gt;

&lt;p&gt;普通にMaterial DesignのCSSフレームワークを使おうと思ったけど、&lt;a href=&#34;http://callemall.github.io/material-ui/#/&#34;&gt;Material UI&lt;/a&gt;はReactと一緒に使うのをリコメンドしてるし、なんぞ！と思った。ので、&lt;a href=&#34;http://materializecss.com/&#34;&gt;Materialize&lt;/a&gt; 使おうと思ったけど、これ120K近くもあるぞ。ということで、自分で、Mateliaze CSSを参考にしつつ、それっぽく作ってみた。単純に見た目だけでも再現してもなーと思って、動きもつけようと思ってCSS Animationとかよくわからんしなー、てかSVGもよくわからん。というか、UI作るの難しくなってきてるよね？JavaScript使うの前提とか。とにかくつらい。&lt;/p&gt;

&lt;h2 id=&#34;htmlとか&#34;&gt;HTMLとか&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;body
    header
        h1
            a タイトル
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Node.jsのプロジェクトなので、惰性的にView Engineで&lt;a href=&#34;http://jade-lang.com/&#34;&gt;Jade&lt;/a&gt;を使ってたけど、このぶら下がり感がつらい。というか、嫌い。&lt;/p&gt;

&lt;p&gt;Viewつながりで、サーバー上でもBackbone.jsを動かす&lt;a href=&#34;https://github.com/rendrjs/rendr&#34;&gt;Rendr&lt;/a&gt;採用したら、もっと共有できてシンプルになるのかなーと思ったけど、力尽きた。導入は次回で。&lt;/p&gt;

&lt;div class=&#34;azlink-box&#34;&gt;&lt;div class=&#34;azlink-image&#34; style=&#34;float:left&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4862462669/warikiru-22/&#34; name=&#34;azlinklink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/51mzyCBKBDL._SL160_.jpg&#34; alt=&#34;コーディングWebアクセシビリティ - WAI-ARIAで実現するマルチデバイス環境のWebアプリケーション&#34; style=&#34;border:none&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;azlink-info&#34; style=&#34;float:left;margin-left:15px;line-height:120%&#34;&gt;&lt;div class=&#34;azlink-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4862462669/warikiru-22/&#34; name=&#34;azlinklink&#34; target=&#34;_blank&#34;&gt;コーディングWebアクセシビリティ&lt;/a&gt;&lt;div class=&#34;azlink-powered-date&#34; style=&#34;font-size:7pt;margin-top:5px;font-family:verdana;line-height:120%&#34;&gt;posted at 2015.4.27&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;azlink-detail&#34;&gt;伊原力也, 太田良典&lt;br /&gt;ボーンデジタル&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;azlink-link&#34; style=&#34;margin-top:5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4862462669/warikiru-22/&#34; target=&#34;_blank&#34;&gt;Amazon.co.jp で詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;azlink-footer&#34; style=&#34;clear:left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;http://www.hitachi.co.jp/universaldesign/ria/ajax/wai-aria/index.html&#34;&gt;WAI-ARIA&lt;/a&gt;とかあるよね、とりあえず&lt;code&gt;body role=&amp;quot;application&amp;quot;&lt;/code&gt;しとくので精一杯だ。また本読もう。ということで、つらかった。というか力尽きた。&lt;/p&gt;

&lt;h2 id=&#34;まとめとか&#34;&gt;まとめとか&lt;/h2&gt;

&lt;p&gt;まぁ趣味プロジェクトで、とくにしがらみもないので、地道にマイペースでやってくしかない。よそはよそ、うちはうち。&lt;/p&gt;

&lt;p&gt;React資料読んでて気づいたのだけど、&lt;a href=&#34;https://speakerdeck.com/geta6/reacttofluxfalsekoto?slide=5&#34;&gt;ReactはViewライブラリでBackbone + Reactって使い方もあるのね&lt;/a&gt;。&lt;a href=&#34;https://github.com/ParsePlatform/ParseReact&#34;&gt;ParseReact&lt;/a&gt;ってのもあるみたいだし、今度はReactがんばろう。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;最後にリニューアルにあたって、数多くの助言を与えてくださった&lt;a href=&#34;https://twitter.com/1000ch&#34;&gt;利休1000&lt;/a&gt;と&lt;a href=&#34;https://twitter.com/ginpei_jp&#34;&gt;寿司銀平&lt;/a&gt;さんに多大なる感謝の念を伝えたい。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>コマンドラインからGoogle Analyticsにデータを記録するGAERをつくった</title>
            <link>https://t32k.me/mol/log/gaer/</link>
            <pubDate>Mon, 06 Apr 2015 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/gaer/</guid>
            <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/t32k/gaer&#34;&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2015/0406-00.png&#34; alt=&#34;GAER&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/t32k/gaer&#34;&gt;t32k/gaer - GitHub&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;表題の通りのNode.jsのCLIツールを作った。Googleアナリティクスのイベントトラッキングレポートに、下記のように任意のJSONデータを送りつける。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ npm install -g gaer 
$ gaer -t UA-xxxxx-xx -r reportName path/to/data.json
  Sending [||||||||||||||||||||||||] 100%
  Success: The data is sent to UA-xxxxx-xx
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;デベロッパーとgoogleアナリティクス&#34;&gt;デベロッパーとGoogleアナリティクス&lt;/h2&gt;

&lt;p&gt;基本的にイベントトラッキングレポートは、ページ遷移をともわないイベント、例えばPDFのダウンロードリンクをクリックした等を計測するために使われる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// JavaScript
ga(&#39;send&#39;, &#39;event&#39;, &#39;クリックイベント&#39;, &#39;PDF&#39;, &#39;資料請求&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;クリックしたイベントに上記のような関数を実行するので、いろいろ使い勝手がいい機能だ。別にこれはアクセス解析のためだけに使用するんじゃなくて、以前から&lt;a href=&#34;http://qiita.com/hidek84/items/e42f8632d95b9444aea4&#34;&gt;JavaScriptのエラーが発生したらそのページのURLを記録する&lt;/a&gt;等、デベロッパーライクな使い方をしてる人がいたりする。&lt;/p&gt;

&lt;p&gt;そうでもなくても、Googleアナリティクスは、『&lt;strong&gt;サイトの速度&lt;/strong&gt;』であったり、『&lt;strong&gt;ユーザーの環境&lt;/strong&gt;』等の、デベロッパーも見るべき指標が多い。だから、もっとみんなGoogleアナリティクス使おうぜってことで、GAERを利用して欲しい。&lt;/p&gt;

&lt;p&gt;GAERは&lt;a href=&#34;https://developers.google.com/analytics/devguides/collection/protocol/v1/devguide&#34;&gt;Measurement Protocol&lt;/a&gt;を使って、データを記録している。記録するJSONのキー分、ループでPOSTしてるだけだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;foo&amp;quot; : 12,
  &amp;quot;bar&amp;quot; : 2.1,
  &amp;quot;baz&amp;quot; : 9
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じのシンプルなデータ構造のJSONなら送れる。&lt;/p&gt;

&lt;h2 id=&#34;モニタリングツールとして使う&#34;&gt;モニタリングツールとして使う&lt;/h2&gt;

&lt;p&gt;なぜ、GAERを作ったのか。&lt;a href=&#34;https://github.com/t32k/stylestats&#34;&gt;StyleStats&lt;/a&gt;という、CSSのヘルスチェックツールがある。下記のように使うとJSONデータでCSSの状態を確認することができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ npm install -g stylestats
$ stylestats -f json -n foo.css
{
  &amp;quot;stylesheets&amp;quot;: 2,
  &amp;quot;size&amp;quot;: 6682,
  &amp;quot;dataUriSize&amp;quot;: 0,
  &amp;quot;gzippedSize&amp;quot;: 1992,
  &amp;quot;rules&amp;quot;: 86,
  &amp;quot;selectors&amp;quot;: 179,
  &amp;quot;simplicity&amp;quot;: 0.48044692737430167,
  &amp;quot;mostIdentifier&amp;quot;: 2,
  &amp;quot;lowestCohesion&amp;quot;: 17,
  &amp;quot;totalUniqueFontSizes&amp;quot;: 12,
  &amp;quot;totalUniqueFontFamilies&amp;quot;: 1,
  &amp;quot;totalUniqueColors&amp;quot;: 6,
  &amp;quot;idSelectors&amp;quot;: 0,
  &amp;quot;universalSelectors&amp;quot;: 0,
  &amp;quot;unqualifiedAttributeSelectors&amp;quot;: 17,
  &amp;quot;javascriptSpecificSelectors&amp;quot;: 0,
  &amp;quot;importantKeywords&amp;quot;: 0,
  &amp;quot;floatProperties&amp;quot;: 4,
  &amp;quot;mediaQueries&amp;quot;: 3
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ファイルサイズがどれだけとか、ルール数がどれだけとか、これだけ見ても多少は役に立つかもしれないが、CSSは絶えず変化するものなので、できればこのデータの推移を把握したいものである。そうなると、&lt;strong&gt;データを貯める&lt;/strong&gt;のとそれを&lt;strong&gt;グラフに出力&lt;/strong&gt;する作業が必要となる。&lt;/p&gt;

&lt;p&gt;今まで、&lt;a href=&#34;https://github.com/t32k/stylestats/wiki/Plot-with-Jenkins&#34;&gt;Jenkinsにプロットする&lt;/a&gt;やり方や、&lt;a href=&#34;https://github.com/t32k/stylestats/wiki/Plot-with-moniteur&#34;&gt;moniteurというツールを使うやり方&lt;/a&gt;を試してみたが、グラフがダサかったり、実装方法がやや複雑だったりして、あんまりしっくりきてなかった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://creator.aainc.co.jp/archives/7123&#34;&gt;StyleStats＋αでCSSを継続的にチェックする | アライドアーキテクツのクリエイターブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この人のように、D3.jsを使って、フルスクラッチで作るのが妥当なんだろうけど、なにぶんめんどくさがり屋なのでめんどくさい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ stylestats -f json -n https://google.com | gaer -t UA-xxxxxxx-x -r Google
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;だもんで、上記のような感じで、JSONで書きだした結果をパイプでGAERに渡しても、Googleアナリティクスにレコードさせればよい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://t32k.me/mol/images/2015/0406-01.png&#34;&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2015/0406-01.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;記録したデータは、Googleアナリティクスの『行動』＞『イベント』のメニューで確認できる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://t32k.me/mol/images/2015/0406-02.png&#34;&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2015/0406-02.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まだデータ貯まってなくてアレだけど、まぁこんな感じで確認できるようになった。あとはこれを一日一回とか定期実行させればよい（これも若干面倒だけど、&lt;a href=&#34;https://addons.heroku.com/scheduler&#34;&gt;Heroku Scheduler&lt;/a&gt;を使うのがお手軽かも）。ほか、PushしたタイミングでCIサーバーのほうで実行するのもありかな。&lt;/p&gt;

&lt;p&gt;なにせイベントトラッキングレポートなので、デフォルトではイベントの回数がメインになっているので、カスタムレポートで平均値だけを表示にしたりするのが若干面倒だけど、ここは使い方次第だと思う。GAER用のカスタムレポート作ったので、以下からインポートしてね（Solutions Galleryなんてあるんだね、最近のGAは）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/analytics/gallery/#posts/search/%3F_.viewId%3Drdf3ytkGQPmTXMiPHErVoA/&#34;&gt;GAER Report | Google Analytics Solutions Gallery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;僕はStyleStatsのデータを記録するためにGAERを作ったけど、皆さんもグラフ作るの面倒くさいなってデータがあったらGoogleアナリティクスにレポートさせれば良いと思う。なんか他にも良い使い方あったら教えて下さい。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>gFaceeeに最新コミット日時を強調する機能追加した</title>
            <link>https://t32k.me/mol/log/gfaceee/</link>
            <pubDate>Tue, 31 Mar 2015 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/gfaceee/</guid>
            <description>&lt;p&gt;&lt;a href=&#34;http://layzie.hatenablog.com/entry/20141104/1415076724&#34;&gt;Webフロントエンド技術に関して非常に多くの技術情報を日々捌いているLayzieさん&lt;/a&gt;曰く、『&lt;strong&gt;記事の日付は必ず確認&lt;/strong&gt;』しなければならない。つい先日、2年前くらいのはてブ記事をドヤ顔でSlackグループに投げて言われた言葉だ。&lt;/p&gt;

&lt;div class=&#34;azlink-box&#34;&gt;&lt;div class=&#34;azlink-image&#34; style=&#34;float:left&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4844334220/warikiru-22/&#34; name=&#34;azlinklink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/51whkjxFOAL._SL160_.jpg&#34; alt=&#34;開発者のためのChromeガイドブック (Google Expert Series)&#34; style=&#34;border:none&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;azlink-info&#34; style=&#34;float:left;margin-left:15px;line-height:120%&#34;&gt;&lt;div class=&#34;azlink-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4844334220/warikiru-22/&#34; name=&#34;azlinklink&#34; target=&#34;_blank&#34;&gt;開発者のためのChromeガイドブック&lt;/a&gt;&lt;div class=&#34;azlink-powered-date&#34; style=&#34;font-size:7pt;margin-top:5px;font-family:verdana;line-height:120%&#34;&gt;posted at 2015.3.30&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;azlink-detail&#34;&gt;吉川 徹,あんどうやすし,田中 洋一郎,小松 健作&lt;br /&gt;インプレスジャパン&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;azlink-review&#34; style=&#34;margin-top:10px;margin-bottom:10px&#34;&gt;&lt;/div&gt;&lt;div class=&#34;azlink-link&#34; style=&#34;margin-top:5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4844334220/warikiru-22/&#34; target=&#34;_blank&#34;&gt;Amazon.co.jp で詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;azlink-footer&#34; style=&#34;clear:left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;情報の鮮度は非常に重要だということを改めて理解しつつ、二度とこのような失態を犯さないためにどうすればよいか考えた結果、いったん、はてブは置いといて、GitHubの最新コミット日時を強調するChrome拡張機能を作った。&lt;/p&gt;

&lt;p&gt;ご存知の通り、GitHubの時間表記は相対的な3 minutes agoと 3 hours agoとか、May 14, 2012とか、なんか直感的に新しいのか古いのか分かりにくい（というか読み取るのが面倒くさい）。あと最近流行りのReact.jsではなく、今さらBackbone.jsを勉強してるけど、関連リポジトリの更新が普通に2年前で止まってるとかあったので、ちょっと注意しないとと思った次第。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2015/0331-00.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1週間未満: Bright Green&lt;/li&gt;
&lt;li&gt;1ヶ月未満: Green&lt;/li&gt;
&lt;li&gt;6ヶ月未満: Yellow&lt;/li&gt;
&lt;li&gt;1年未満: Orange&lt;/li&gt;
&lt;li&gt;1年以上: Red&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というわけで、上記のような基準で各リポジトリトップのlatest commitの日時を色付けするようにした。さりげない感じで強調してくれるので個人的に気に入っている。とりあえず、赤色（1年以上コミット無し）なら注意してみてみようなど色で判断できるようにした。&lt;/p&gt;

&lt;p&gt;もちろん、コミットが止まっているのは枯れていて安定しているって意味かもしれないので、必ずしも悪いことじゃない。しかし、変化の激しいフロントエンド界隈で生きているので、やっぱ定期的にメンテなりしてあるほうがいいかなと思っている。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2015/0331-01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/gfaceee/fgkdbhnipaaeokfjgdmpejglfepclgbk&#34;&gt;gFaceee - Chrome ウェブストア&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GitHubのニュースフィード上でアイコンを表示させるgFaceeeの追加機能としてリリースしましたのでよければ使ってくださいませ。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Grunt/Gulpで憔悴したおっさんの話</title>
            <link>https://t32k.me/mol/log/npm-run-script/</link>
            <pubDate>Wed, 25 Mar 2015 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/npm-run-script/</guid>
            <description>

&lt;p&gt;先人たちが1年前に通った道で、いろいろいまさらかよって話なんですが。基本的に以下の記事読んだら分かります。要はGulpとかGruntといったモノ使わずに&lt;code&gt;npm run hogehoge&lt;/code&gt;でビルドしよーぜって話です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://substack.net/task_automation_with_npm_run&#34;&gt;task automation with npm run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yosuke-furukawa.hatenablog.com/entry/2014/02/19/112931&#34;&gt;オレ的Gruntに対する最新の気持ち - from scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Jxck_/items/efaff21b977ddc782971&#34;&gt;Node - npm で依存もタスクも一元化する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/&#34;&gt;How to Use npm as a Build Tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;// package.json
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;start&amp;quot;: &amp;quot;npm run start-serve &amp;amp; npm run watch&amp;quot;,
    &amp;quot;test&amp;quot;: &amp;quot;stylestats public/files/css/maple.css&amp;quot;,
    &amp;quot;start-serve&amp;quot;: &amp;quot;browser-sync start --server public/ --files public/files/**/*&amp;quot;,
    &amp;quot;clean&amp;quot;: &amp;quot;rm -rf public/files/css/*&amp;quot;,
    &amp;quot;js:min&amp;quot;: &amp;quot;uglifyjs public/files/js/app.js &amp;gt; public/files/js/app.min.js&amp;quot;,
    &amp;quot;build:js&amp;quot;: &amp;quot;browserify assets/scripts/app.js &amp;gt; public/files/js/app.js&amp;quot;,
    &amp;quot;css:sass&amp;quot;: &amp;quot;node-sass assets/styles/maple.scss public/files/css/maple.css&amp;quot;,
    &amp;quot;css:prefix&amp;quot;: &amp;quot;autoprefixer -b &#39;last 2 versions&#39; public/files/css/maple.css&amp;quot;,
    &amp;quot;css:comb&amp;quot;: &amp;quot;csscomb public/files/css/maple.css&amp;quot;,
    &amp;quot;css:min&amp;quot;: &amp;quot;csso public/files/css/maple.css public/files/css/maple.min.css&amp;quot;,
    &amp;quot;build:css&amp;quot;: &amp;quot;bin/build-css.sh&amp;quot;,
    &amp;quot;build&amp;quot;: &amp;quot;npm run build:js &amp;amp;&amp;amp; npm run build:css&amp;quot;,
    &amp;quot;lint:js&amp;quot;: &amp;quot;jshint assets/scripts/app.js&amp;quot;,
    &amp;quot;lint:css&amp;quot;: &amp;quot;scss-lint assets/styles/**/*.scss&amp;quot;,
    &amp;quot;lint&amp;quot;: &amp;quot;npm run lint:js &amp;amp;&amp;amp; npm run lint:css&amp;quot;,
    &amp;quot;watch:js&amp;quot;: &amp;quot;watch &#39;npm run build:js&#39; assets/scripts/&amp;quot;,
    &amp;quot;watch:css&amp;quot;: &amp;quot;watch &#39;npm run build:css&#39; assets/styles/&amp;quot;,
    &amp;quot;watch&amp;quot;: &amp;quot;npm run watch:js &amp;amp; npm run watch:css&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで&lt;code&gt;package.json&lt;/code&gt;に記述して、&lt;code&gt;npm run watch&lt;/code&gt;とかコマンド打って使う。&lt;/p&gt;

&lt;h2 id=&#34;npm-run-scriptを使うに至るまでの経緯&#34;&gt;npm run-scriptを使うに至るまでの経緯&lt;/h2&gt;

&lt;p&gt;率直に言って、おっさん疲れたのです。&lt;/p&gt;

&lt;h3 id=&#34;ユーザーとして&#34;&gt;ユーザーとして&lt;/h3&gt;

&lt;p&gt;まぁタスクランナーを使うユーザーとしては、簡単に使いたいよねってのが本音なわけで、&lt;a href=&#34;https://t32k.me/mol/log/modern-development-workflow-with-grunt/&#34;&gt;2年前はGrunt便利だぜー！&lt;/a&gt;ってふれまわったけど、今いざ使ってみようと思うと、あれこれどーするんだっけ？みたいなことが多い。&lt;/p&gt;

&lt;p&gt;ましてや、最近は&lt;a href=&#34;http://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt;のほうが勢いあるみたいじゃないですか、まぁGulpも使うんですけど、開発しているプロジェクトによって採用しているのがGrunt/Gulpでバラバラになって、Gulpのプロジェクトで&lt;code&gt;grunt&lt;/code&gt;ってコマンド叩いたりして、『あーここはGulpかー』なんてこともあったりするわけです。&lt;/p&gt;

&lt;p&gt;またGruntで使ってるこのプラグインのGulpバージョンないかなーって探すとなかったりする。もしくは作る作る詐欺でリポジトリだけがあってションボリしたりするわけです。&lt;/p&gt;

&lt;p&gt;はたまた四天王的に『クククッ、Gruntがやられたようだな、あいつは四天王のなかでも最弱（ｒｙ』とかいって、なんだか&lt;a href=&#34;http://www.solitr.com/blog/2014/02/broccoli-first-release/&#34;&gt;Broccoli&lt;/a&gt;とかゆー人もいるわけじゃないですか。もう頭いっぱいなんです。おっさん疲れたのです。&lt;/p&gt;

&lt;p&gt;普通に元のコマンド叩いたらいいじゃんって思うんです。&lt;/p&gt;

&lt;h3 id=&#34;プラグイン作者として&#34;&gt;プラグイン作者として&lt;/h3&gt;

&lt;p&gt;若気の至りで、おっさんも昔はよく&lt;a href=&#34;https://www.npmjs.com/~t32k&#34;&gt;Gruntプラグインを作った&lt;/a&gt;のです。実際に自分のプロジェクトでGruntを使い、必要だったので、プラグイン開発に対する情熱もあったわけですけど、まぁGulpとか使い出したり、普通にコマンド打ってたら、開発するモチベーションがダダ下がりなわけです。&lt;/p&gt;

&lt;p&gt;で、そんな時に限って、依存しているパッケージが頻繁にアップデートとかするんですよ。いっぱい新機能とか盛り込んできたりするわけですよ、そしたらissuesで対応しろとか言われるわけですよ。APIも変更してきたりするわけですよ、そしたらissuesで対応しろとか言われるわけですよ。もう追いつけないです。おっさん疲れたのです。&lt;/p&gt;

&lt;p&gt;普通に元のコマンド叩けよって思うんです。&lt;/p&gt;

&lt;h3 id=&#34;依存されるパッケージ作者として&#34;&gt;依存されるパッケージ作者として&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/t32k/stylestats&#34;&gt;StyleStats&lt;/a&gt;というそこそこ使われるnpmパッケージを作っているのですが、ありがたいことに僕とは別の開発者様が&lt;a href=&#34;https://github.com/tvooo/grunt-stylestats&#34;&gt;Grunt&lt;/a&gt;/&lt;a href=&#34;https://github.com/1000ch/gulp-stylestats&#34;&gt;Gulp&lt;/a&gt;のプラグインを作ってもらっているのです。&lt;/p&gt;

&lt;p&gt;ただですね、StyleStats Grunt Pluginのほうが&lt;a href=&#34;https://github.com/tvooo/grunt-stylestats/commits/master&#34;&gt;完全に開発が止まってまして&lt;/a&gt;、StyleStatsを使いたいGruntプロジェクトのユーザーに人になんて言ったらいいのかなーって、『Gulpの方使ってくださいー』って言うのもなーなんて。&lt;/p&gt;

&lt;p&gt;かといって、Gruntプラグインの人に『ちょっとアップデートしてくれよ！』って言うのもなーって。前述の通り、やる気が無い気持ちは痛いほどわかるしなーって。でも更新止まってから、こちらとしてはいっぱいいろんな機能リリースしてるからみんなに使って欲しいしなーって。&lt;/p&gt;

&lt;p&gt;僕がPR送ればいいのかもしれないけど、俺もGruntのプラグイン開発ってどうするんだっけって感じだし。そもそもPR送ってもマージしてくれるのか。てか飽きたならリポジトリをtransferしてくれないかなーって。そうやって気を使うのダルいんですよ、おっさん疲れたのです。&lt;/p&gt;

&lt;p&gt;普通に元のコマンド叩いてくださいって思うんです。&lt;/p&gt;

&lt;h2 id=&#34;npm-run-scriptの抑えどころ&#34;&gt;npm run-scriptの抑えどころ&lt;/h2&gt;

&lt;p&gt;ということで、npmで元のコマンド叩いたら皆しあわせってことでnpm run-script使おうぜって話。そんな難しいことはないです。基本的には各コマンドをpackage.jsonに記述していくだけです。ざっくりだけどプロジェクトで使う例としてはこんな感じかな。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/t32k/maple/blob/master/package.json&#34;&gt;t32k/maple/package.json&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（久しぶりのMaple!!一応、&lt;a href=&#34;https://github.com/t32k/maple/tree/grunt-ver&#34;&gt;Gruntバージョン&lt;/a&gt;も残してある）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ファイル監視はどーするの？：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mikeal/watch&#34;&gt;mikeal/watch&lt;/a&gt; を使ってね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;watch:css&amp;quot;: &amp;quot;watch &#39;npm run build:css&#39; assets/styles/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;複数タスク実行はどーするの？：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;直列に実行するときは&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;でつないでね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;build&amp;quot;: &amp;quot;npm run build:js &amp;amp;&amp;amp; npm run build:css&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;並列に実行したいときは、&lt;code&gt;&amp;amp;&lt;/code&gt;でつなぐか、&lt;a href=&#34;https://github.com/keithamus/parallelshell&#34;&gt;parallelshell&lt;/a&gt;を使ってね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;watch&amp;quot;: &amp;quot;npm run watch:js &amp;amp; npm run watch:css&amp;quot;
&amp;quot;watch&amp;quot;: &amp;quot;parallelshell &#39;npm run watch:js&#39; &#39;npm run watch:css&#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;スクリプトが長すぎるよ！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;シェルファイルに分割するといいよ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash
npm run css:sass &amp;amp; npm run css:prefix &amp;amp; npm run css:comb &amp;amp; npm run css:min
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;chmod +x&lt;/code&gt;しとく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;build:css&amp;quot;: &amp;quot;bin/build-css.sh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;または、設定系のオプションは、&lt;code&gt;config&lt;/code&gt;フィールドに記述して、&lt;code&gt;scripts&lt;/code&gt;フィールドで、&lt;code&gt;$npm_package_config_NAME&lt;/code&gt;のようにして使う。が、$npm_package_configって！長い！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &amp;quot;config&amp;quot;: {
    &amp;quot;stylestats&amp;quot;: &amp;quot;path/to/configuration.json&amp;quot;
  },
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;test&amp;quot;: &amp;quot;stylestats app.css --config $npm_package_config_stylestats&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;はたまた、npm@2.0以上のユーザーであれば、&lt;a href=&#34;https://github.com/npm/npm/pull/5518&#34;&gt;Passing Arguments&lt;/a&gt;というナウい機能を使う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;scripts&amp;quot;: {
  &amp;quot;test&amp;quot;: &amp;quot;mocha test/&amp;quot;,
  &amp;quot;test:xunit&amp;quot;: &amp;quot;npm run test -- --reporter xunit&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のように、&lt;code&gt;--&lt;/code&gt;を使うことで&lt;code&gt;npm test&lt;/code&gt;のあとにコマンドをつなげられる。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Windowsユーザーは？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://win-bash.sourceforge.net/&#34;&gt;win-bash&lt;/a&gt;使ってもらうとか、UNIX系のコマンド系をラップしてるnpmパッケージ使って（例：&lt;code&gt;rm -rf&lt;/code&gt; &amp;gt; &lt;a href=&#34;https://github.com/isaacs/rimraf&#34;&gt;rimraf&lt;/a&gt;）npm scriptを書くよう心がけるとか、とりまがんばってね。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;そうゆうわけで、Gulp/Gruntを通さなければプラグインの依存パッケージの更新追随を待たなくてもいいし、Node.js/npmに関する知識とかUNIXに関する知識は、数ヶ月で変わることもないので、変化に適応できない私みたいなおっさんにも優しいんじゃないんでしょうか。ちょっと複雑なことやろうとすると、Node.jsのコードを書かないとできないかもしれないけど、きっと心の優しい誰かがその素晴らしい見聞を共有してくれると思うのです。おっさんは気長に待つのです。&lt;/p&gt;

&lt;div class=&#34;azlink-box&#34;&gt;&lt;div class=&#34;azlink-image&#34; style=&#34;float:left&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274064069/warikiru-22/&#34; name=&#34;azlinklink&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/518ME653H3L._SL160_.jpg&#34; alt=&#34;UNIXという考え方―その設計思想と哲学&#34; style=&#34;border:none&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;azlink-info&#34; style=&#34;float:left;margin-left:15px;line-height:120%&#34;&gt;&lt;div class=&#34;azlink-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274064069/warikiru-22/&#34; name=&#34;azlinklink&#34; target=&#34;_blank&#34;&gt;UNIXという考え方―その設計思想と哲学&lt;/a&gt;&lt;div class=&#34;azlink-powered-date&#34; style=&#34;font-size:7pt;margin-top:5px;font-family:verdana;line-height:120%&#34;&gt;posted at 2015.3.26&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;azlink-detail&#34;&gt;Mike Gancarz,芳尾 桂&lt;br /&gt;オーム社&lt;br /&gt;売り上げランキング: 21740&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;azlink-review&#34; style=&#34;margin-top:10px;margin-bottom:10px&#34;&gt;&lt;/div&gt;&lt;div class=&#34;azlink-link&#34; style=&#34;margin-top:5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274064069/warikiru-22/&#34; target=&#34;_blank&#34;&gt;Amazon.co.jp で詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;azlink-footer&#34; style=&#34;clear:left&#34;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;てか、Makefileでいいんじゃね？&lt;br /&gt;
って、思ったそこのでっかいおっさんちょっと出てこいよ！&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;関連エントリ&#34;&gt;関連エントリ&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://t32k.me/mol/mol/log/make-for-the-web-generation/&#34;&gt;【翻訳】Web世代のデベロッパーのためのmake - MOL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
        <item>
            <title>Wisteria：デザインツールとしてのCSS</title>
            <link>https://t32k.me/mol/log/wisteria/</link>
            <pubDate>Wed, 28 Jan 2015 18:14:51 -0800</pubDate>
            
            <guid>https://t32k.me/mol/log/wisteria/</guid>
            <description>

&lt;p&gt;&lt;img src=&#34;https://t32k.me/wisteria/img/hero.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://t32k.me/wisteria/&#34;&gt;Wisteria.css: A class selectors based harmless CSS library.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/t32k/wisteria&#34;&gt;t32k/wisteria&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://t32k.me/wisteria/&#34;&gt;Wisteria&lt;/a&gt;というCSSライブラリ作った。基本的な用途としてはモックアップや後方互換とかそこまで考えなくていい、小規模の個人用のページとかで使われることを想定している。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://getskeleton.com/&#34;&gt;Skeleton&lt;/a&gt;という、すごくシンプルなCSSライブラリがあるのだが、僕はこれが好きで、ちょっとしたものとか作るときによく使用している。このブログもSkeletonをベースにしているくらいだ。&lt;/p&gt;

&lt;p&gt;でも最近使ってて、なにかこう違和感というか、相容れないモノを感じたので、思い立って自分用のCSSライブラリを作ってみたのだ。&lt;/p&gt;

&lt;h2 id=&#34;harmless&#34;&gt;Harmless&lt;/h2&gt;

&lt;p&gt;Wisteriaを作るにあたって、一番気をつけたことは無害であること。つまり要素にスタイリング（&lt;code&gt;h2 { font-size: 24px }&lt;/code&gt;みたいな）しないことを徹底した。ほとんとクラスセレクタ（&lt;code&gt;.h2 { font-size: 24px }&lt;/code&gt;みたいな）でしか定義していない。&lt;/p&gt;

&lt;p&gt;これはなぜかというと、基本的に&lt;code&gt;h2&lt;/code&gt;なんてものは見出しとして大きく扱われるべきだけど、それは&lt;strong&gt;基本的に&lt;/strong&gt;であって小さい文字列の&lt;code&gt;h2&lt;/code&gt;要素だって時としては存在する（重要な文言であったり、余白を使えば必ずしもフォントサイズが大きい必要がない）。そうゆうゆうわけで、Skeletonとか使ってると、&lt;code&gt;h2&lt;/code&gt;要素にスタイルが定義されているので、この文字を小さくするために再定義しなければならない。&lt;/p&gt;

&lt;p&gt;これ、&lt;strong&gt;すごくめんどい&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;いや、本腰入れて開発しようとかだったら再定義なんなりするけど、ちょっとしたページを作ったり、サイズ感を試したいときに思考が妨げられる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt; .h1, .u-fz1 { font-size: 6.4rem; }
 .h2, .u-fz2 { font-size: 4.8rem; }
 .h3, .u-fz3 { font-size: 3.6rem; }
 .h4, .u-fz4 { font-size: 2.4rem; }
 .h5, .u-fz5 { font-size: 2.0rem; }
 .h6, .u-fz6 { font-size: 1.8rem; } 
 .u-fz7 { font-size: 1.6rem; } 
 .u-fz8 { font-size: 1.4rem; }
 .small, .u-fz9 { font-size: 1.2rem; }
 .u-fz10 { font-size: 1rem; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、最近のCSSライブラリは&lt;a href=&#34;http://necolas.github.io/normalize.css/&#34;&gt;Normalize.css&lt;/a&gt;で初期化されているのが前提だけど、これもやめてほしい。デフォルトのスタイリングをうまく残して初期化するものだけど、僕はブラウザのデフォルトスタイルを熟知しているわけではない。だから要素ごとのマージンとかも一律ゼロにしたい。そうゆうよくわからないものを覚えるために時間をかけたくない。&lt;/p&gt;

&lt;p&gt;ということで、Wisteriaでは&lt;a href=&#34;https://github.com/murtaugh/HTML5-Reset&#34;&gt;HTML5-Reset&lt;/a&gt;を使ってキレイにリセットしてある。僕は真っ白なキャンバスに描きたいのだ。&lt;/p&gt;

&lt;h2 id=&#34;helper&#34;&gt;Helper&lt;/h2&gt;

&lt;p&gt;Wisteriaには多くのヘルパークラスというか、ユーティリティ系のクラスを保持している。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/*	#Spacing
\*------------------------------------*/
.u-ma { margin: auto; }
.u-mtn { margin-top: 0; }
.u-mts { margin-top: .4rem; }
.u-mtm { margin-top: 1.6rem; }
.u-mtl { margin-top: 3.2rem; }
.u-mtx { margin-top: 4.8rem; }
.u-mbn { margin-bottom: 0; }
.u-mbs { margin-bottom: .4rem; }
.u-mbm { margin-bottom: 1.6rem; }
.u-mbl { margin-bottom: 3.2rem; }
.u-mbx { margin-bottom: 4.8rem; }
.u-mn { margin: 0; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;.u-&lt;/code&gt;から始まるもの。こうゆう単一的な仕事をするクラスを多くもつのは&lt;a href=&#34;https://github.com/t32k/maple&#34;&gt;Maple&lt;/a&gt;でもやったことだが、あれはイレギュラーなデザインに対応するためである。&lt;/p&gt;

&lt;p&gt;しかし、Wisteriaでは問題の背景がちがう。先ほどのHTML5-Resetで完全にマージンなどもリセットしてあるので、自分でマージンを設定しなければならない。そのおかげで、自由自在に自分でスペースを調整することが可能だ。&lt;/p&gt;

&lt;p&gt;マージン以外にも多くのヘルパークラスがあるのだが、これはこれで学習コストが高くつくかもしれない。ということで命名規則に関しては&lt;a href=&#34;http://docs.emmet.io/cheat-sheet/&#34;&gt;Emmet&lt;/a&gt;風味な短縮形を採用しているので、ヘルパークラスに理解してなくても、だいたい予想がつくだろう。&lt;/p&gt;

&lt;h2 id=&#34;hi-control&#34;&gt;Hi-Control&lt;/h2&gt;

&lt;p&gt;局所的なレイアウトはスペーシングのヘルパーでなんとかなるけど、全体的なレイアウトにはグリッドシステムが必要だ。それに関してはFlexboxをベースにしたグリッドシステムを採用している。&lt;/p&gt;

&lt;p&gt;これが何が嬉しいかというと、&lt;code&gt;float&lt;/code&gt;とかで頑張ってるグリッドシステムのCSSライブラリはグリッドセルに対して、例えば3分割したかったら &lt;code&gt;class=&amp;quot;cell-1of3&amp;quot;&lt;/code&gt; みたいに書かないけどいけない。これ覚えるの大変だし（そうでもないか）、分割数を変える度にいちいち書き直すのもめんどい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;  &amp;lt;div class=&amp;quot;g-row&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;g-col&amp;quot;&amp;gt;1/6&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;g-col&amp;quot;&amp;gt;1/6&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;g-col&amp;quot;&amp;gt;1/6&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;g-col&amp;quot;&amp;gt;1/6&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;g-col&amp;quot;&amp;gt;1/6&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;g-col&amp;quot;&amp;gt;1/6&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;g-row g-row--collapse&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;g-col&amp;quot;&amp;gt;1/3&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;g-col&amp;quot;&amp;gt;1/3&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;g-col&amp;quot;&amp;gt;1/3&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;g-row&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;g-col&amp;quot;&amp;gt;auto&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;g-col u-w80&amp;quot;&amp;gt;80%&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;てことで、Wisteriaでは&lt;code&gt;.g-row&lt;/code&gt;の列に&lt;code&gt;.g-col&lt;/code&gt;の名前の要素を入れとくだけでうまいこと分割数に応じてやってくれる。Flexbox様々である。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://caniuse.com/#search=flexbox&#34;&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2015/0128-01.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;その分、最新ブラウザにしか対応しなくなるけど、あくまでモックアップや個人用途で使うことを考えれば、十分メリットのほうが大きい。&lt;/p&gt;

&lt;p&gt;結局作ってみて、真っ白なキャンバスを自由に操れるツールがほしかったのだとおもう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://alistapart.com/article/understandingprogressiveenhancement&#34;&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2015/0128-00.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wisteriaを使ってモックサイトを作るとなると、HTMLのclass属性にヘルパークラスを書き込みまくることになって、&lt;strong&gt;コンテンツとスタイルの分離&lt;/strong&gt;とは！という状況なんだけど、そもそもPhotoshopやSketchを使ってデザインをするにあたって、それらを分けて考えるかというと、NOだ。&lt;/p&gt;

&lt;p&gt;Sketchに&lt;a href=&#34;https://github.com/timuric/Content-generator-sketch-plugin&#34;&gt;Content generator sketch plugin&lt;/a&gt;というものがあるように、アタリとはいえ、デザイナーはそこにどんなコンテンツが来るのか考えながらデザインしている。&lt;/p&gt;

&lt;h2 id=&#34;designing-in-the-browser&#34;&gt;Designing in the browser&lt;/h2&gt;

&lt;p&gt;話戻って、このブログの静的なページデザインファイルなんてものはない、いわゆる&lt;a href=&#34;http://css.studiomohawk.com/in-browser-design/2011/04/16/designing_in_browser/&#34;&gt;インブラウザデザイン&lt;/a&gt;をして作ったわけだが、この時の違和感というか、やりにくさの原因が分かった。&lt;/p&gt;

&lt;p&gt;結局、ブラウザでデザインするにはHTMLファイル（テンプレートファイル）とスタイルシートを行き来しなければならないのだ。そして下手にマークアップ脳もあるため、メンテナンス性を考えたCSS設計、命名の適当さなど考えると結局デザインしづらくなってしまう（デザインに集中できなくなってしまう）。&lt;/p&gt;

&lt;p&gt;HTMLファイルにだけに集中して、ガシガシ書き込んでいけば、どんどんビジュアルが完成されていく。つまりは、Wisteriaにおける（ユーティリティ）クラス属性はデザインするためのコマンドみたいなものだ。うん、実にやりやすい。トライアンドエラー繰り返すことができる。インブラウザデザインと言って、最初からコンテンツとスタイルの分離を意識するからやりにくいのであって、いったん、それは忘れる必要がある（だからといって、style属性で書くように密結合することもない）。&lt;/p&gt;

&lt;p&gt;Wisteriaを使えば、PhotoshopやSketchでマウスで操作するように（それに近い状態で）、ブラウザ上でデザインしていけるだろう。&lt;/p&gt;

&lt;p&gt;僕はこうゆうのを求めていたんだ。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>