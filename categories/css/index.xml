<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Css on MOL</title>
    <link>https://t32k.me/mol/categories/css/</link>
    <description>Recent content in Css on MOL</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 01 Feb 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://t32k.me/mol/categories/css/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>StyleStatsのChrome拡張機能を作った</title>
      <link>https://t32k.me/mol/log/stylestats-crx/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/stylestats-crx/</guid>
      <description>StyleStatsのChrome拡張を作った。
 StyleStats - Chrome ウェブストア  StyleStatsはCSSを解析してスタイルの各種指標を表示してくれるnpmだ。それを簡単にChrome拡張から利用できるようにした。調べたいページで右上のボタンを押すと新規タブで結果が出る。実に簡単だ。
これまでの流れ CLI $ npm install -g stylestats  npmからインストールしてコマンドラインで使うのが一番やれることが多い。ローカルのファイルも解析できるし、それこそProgrammaticallyに自分でハックして、独自のレポートとかもできる。まぁ黒い画面に不慣れ人はちょっとあれかもしれない。
Web そうゆうわけで、もっとライトに使ってもらおうとWeb版も作った。CLIと違って、Unique Font Families、　Unique Colors がプレビューできたり、円グラフやタイムラインチャートなどグラフ機能を充実している。一つ一つのテスト結果にパーマリンクができるので、CSSといえどデータを残したくないって人はアレかもしれない。
あとParse.comがサービスを終了するということで、StyleStatsのWebもがっつりテスト結果保存に使用していたので、寝耳に水だった。まぁ1年あることだし、BaaS自体やめて普通にMongoDBとか使ってみるのも良いかもしれない。Herokuでやってることだし。
CRX そうゆうわけで、ライトに使えつつサーバーにデータを預けたくないって人向けにChrome拡張を今回作った。Unique Font Sizesもプレビュー可能になった。
使った技術とか ES2015 当たり前だけど、Chrome拡張なのでクロスブラウザ対応は気にしなくてよいし、現時点でChromeが対応しているESの機能ならBabelしなくてもそのまま使える。バベる環境作るのめんどいし、楽だよね。
Promise + Fetch API + Arrow functions Promise.all(links.map(link =&amp;gt; fetch(link.href, {mode: &#39;cors&#39;}).then(response =&amp;gt; response.text()) )) .then(texts =&amp;gt; {});  ということで、&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/stylesheet.css&amp;quot;&amp;gt;要素を見つけてきてリモートのスタイルシートをGETするような処理も、Promiseできるのでコールバック地獄にならない。Fetch API使えるのでXMLHttpRequestみたいな煩雑な記述もしなくてもいい。そもそもアロー関数でタイプ数自体も少なくて済む。この処理をES3/5で普通に書けば20~30行くらいなるんじゃないかな。
Let + Const あとまぁ特にそこまで便利になるわけでもないけど、一応letとかconstとかも使っといた。
CSS3 object-fit .screenshot img { object-fit: cover; object-position: top; }  background-size的なことをimg要素に対して直接指定できるようなもの。解析したページのキャプチャ画像が今回追加されたが、ページ自体があんまり縦長になるもいやなので、最初は背景画像にしてbackground-size:cover的なことをしたが、これだと印刷したときに表示されないので、そういえばobject-fitがあったのを思い出した。今のところIEではサポートされていない。</description>
    </item>
    
    <item>
      <title>CSS3開発者ガイドーモダンWebデザインのスタイル設計</title>
      <link>https://t32k.me/mol/log/the-book-of-css3/</link>
      <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/the-book-of-css3/</guid>
      <description>CSS3開発者ガイド 第2版
―モダンWebデザインのスタイル設計posted at 2015.12.14Peter Gasston,牧野 聡
オライリージャパン
売り上げランキング: 266853
Amazon.co.jp で詳細を見る 冬なのでモチベーションだだ下がりですが、とりあえず生きていくには仕事をしなければならないのでコード書いている@t32kだよ。
久しぶりに本読んだので紹介だよ。おっさん、ピクセルパーフェクトなCSSコーディングしてた時代がIE6/7が全盛期だったので、未だにその当時のCSSコーディングのクセが抜けない。最近はCSS設計だったり関連ツールに興味の対象が移っていて、CSS自体の機能をちゃんと把握していなかった。
Flexbox何それおいしいの？ display:table 最強じゃん！って状態だし、 E:last-child擬似セレクタ使うのは甘え、男は黙ってclass属性に-last付けるべしって思ってるし、 アニメーションに関しては、transform、 translate、 transition、一体でどれがpropertyでvalueなのか、頭の中がごっちゃになってる状況だ。
このままだと老害一直線だと感じたので、いわゆるCSS3の知識を詰め込まなければいけない。ということで表題の書籍がGOODだった。
まぁ仕様書読めよ！って感じだけど、やっぱ小難しいのは嫌いなのですよ。あとCSS2.1以前のこととかはだいたい知ってるわけだから、そこは別いらないのです。その点、本書は新しめのCSSに絞って解説してるので全部で300Pほどと比較的コンパクトに収まっている（CSS全仕様解説するとなるとサイ本みたいな厚さになって読む気が失せる）。
前述のFlexboxやCSSアニメーションなどのあやふやに覚えている新しめのプロパティの解説はもちろんあるし、hyphensプロパティや、background-repeat:spaceキーワードなんて新しい発見もあった。サクッと知識をブラッシュアップしたい人におすすめな1冊だ。</description>
    </item>
    
    <item>
      <title>CSSを書くために必要なGruntプルギン集！！</title>
      <link>https://t32k.me/mol/log/modern-coder/</link>
      <pubDate>Thu, 05 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/modern-coder/</guid>
      <description>前回の続きというかセッションでは基本的な使い方とMapleの説明に終始したので、今回は僕が普段CSS書いてる時に便利だなーと思うプラグインを列挙してみたよ。
 高いCSS圧縮率を誇るgrunt-cssoについて紹介するよ CSSプロパティをソートしてくれるgrunt-csscombについて紹介するよ CSS - イケてるスタイルガイドを簡単に作れるgrunt-kssについて紹介するよ CSS書く人なら絶対入れとけのgrunt-contrib-csslintについて紹介するよ CSSプロパティの重複を解析してくれるgrunt-csscssについて紹介するよ そのページで使われているCSSだけまとめてくれるgrunt-uncssについて紹介するよ  僕はCSS書きなのでCSSに関するプラグインが多いけど、Grunt Plugins Advent Calendar 2013 - Qiitaの他の参加者も便利なプラグインを紹介してるので見てみてね。
あとなぜか、このアドベントカレンダーだけ時空の法則が乱れてて12/15（現在：12/5）まで進んでるからいっぱい見れるね♪
僕のお気に入りGruntプルギンは@shoitoも書いているgrunt-pagespeedです！てか、PageSpeedが好きなんですけどね！！</description>
    </item>
    
    <item>
      <title>ぼくのかんがえたさいきょうのしーえしゅえしゅ</title>
      <link>https://t32k.me/mol/log/the-perfect-css-i-thought/</link>
      <pubDate>Mon, 29 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/the-perfect-css-i-thought/</guid>
      <description>俺ももう30だし、夏なんで、CSSフレームワークはじめました。 とりあえず、UIエレメントとか作ってないし、CSSフレームワークとか言いながら、GithubのLanguage Staticsは98.3%、JavaScriptってな感じでGrunt Taskばかり充実してるような感じです、現状。
とりあえず、設計方針としてはマシなCSSを書くことを目標としている。この一年、スマホアプリのHTML/CSSコーディングをやってきたわけだが、度重なるUIの変更に耐えうるCSS、そして肥大化しないCSSとは何かずっと考えていて、特に答えという答えもで見つかっていわけだけど、とりあえずはこうしたほうがBetterなんじゃないかというの自分的に固まってきたので、公開してみた。
てか、最強のCSSなんて存在しないからなっ！！
 t32k/maple - GitHub  ありがちな落とし穴 これを作るにあたって社内のほかのプロジェクトのCSSがどんな風に書いてるのか調べった結果、以下の点が気になった。
 無用な Vendor Prefixes Data URI 多用 Nest が深い @extend 多用 ID セレクタ使用  無用な Vendor Prefixes 基本、我々はWebkitをターゲットとしたWebアプリを作ってるので、-moz-とか、-ms-とかいらないはずなんだけど、なんか付いている・・・多分、CompassのCSS3 Mixinとか使ってると、デフォルトで全部のベンダープレフィックスが吐出されてしまうので、
$experimental-support-for-opera: false; $experimental-support-for-mozilla: false; $experimental-support-for-microsoft: false;  そういったものを吐き出さないように、変数で指定する必要がある。また-webkit-border-radiusのようにAndroid2.3+, iOS4.3+のバージョンをターゲットとしているのであれば、この場合のベンダープレフィックスは不要だ。どのバージョンからベンダープレフィックスが必要か、必要でないかはCan I use…で調べればよい（逆に正規プロパティを書いてないとこもあった）。
Data URI 多用 WebパフォーマンスにおいてHTTPリクエストを削減することは真っ先に優先されるべきことだが、あまり何でもかんでも画像をDataURI化してCSSファイルの中に記述してしまうと、CSSファイルの肥大化が問題になってしまう。CSSファイルがパースされなければレンダリングが始まらないのでCSSファイルの肥大化は絶対に避けなければならない。画像の1KBとCSSファイルの1KBを同じように考えてはいけない。
ましてやDataURI化すれば元の画像の2,3割ファイルサイズが増えるし、仕様的にあまり大きなファイルサイズのものに適用してしまうのは気をつけたほうがいい。私の場合はログインページなど一回しか出てこないような場面において使うアイコン画像などをHTML内に埋め込んでいる。何回でも出てくるような画像であればCSSスプライトしたほうが無難だ。
Nestが深い ロケーションに基づいたスタイル付け、ページに基づいたCSSを書いていくと当然ネストが深くなっていく（ex. body.login-page a.login-btn &amp;gt; span）。ここではセレクタの数が増えることによるファイルサイズ増量が問題というわけでなく、詳細度が高まれば高まるほど、そこでしか使用できないセレクタになってしまうことが問題だ。結果、同じようなスタイルでも新しくCSSを記述しなければならずファイルサイズが増えていくことになる。
これらの解決策はできるだけ小さなモジュールに基づいてスタイル付けしていくことだ。基本、ネストは3レベルまでが許容値だ。
@extend 多用 @extendは素晴らしい機能だと思うが、あまりカジュアルに使用してしまえば、セレクタの増加につながる。マルチクラス（&amp;rdquo;class=&amp;ldquo;btn btn-primary&amp;rdquo;）でマークアップすれば基本的に代用できる機能だ。確かに、CSSファイル内で.btnを@extendして.btn-primaryを作ればclass=&amp;ldquo;btn-primary&amp;rdquo;だけになって簡潔だが、それ以上の意味は無い。ただいたずらに使えばCSSファイルが増えるだけなので、マルチクラスの使用を推奨する。
ID セレクタ使用 CSSのスタイル付けにおいてIDセレクタを使用しなければならない理由などない。それどころかIDを使えば詳細度が複雑になり、このスタイルを上書きするためにさらにIDを使用したりなど、チキンレースが始まり、結果ファイルサイズが肥大化する。HTML内でJSのフックとして id=&amp;ldquo;js-getElement&amp;rdquo;など使用するのは問題ないが、そのセレクタに対してスタイルをつけてはならない。
まぁ、そんな感じのことを考えつつ作りました。
CSS設計方針 CSS全体に関しては、以下の様な感じで。
 絶対にCSSを増やしたくない class名で悩みたくない 完璧じゃなくてもいい  絶対にCSSを増やしたくない CSSとは時とともに増えるものだ。新しいページが増えるイコール、CSSを新規に追加しなければならない。そこでモジュールとして設計しておけば、新しいページができたとしても再利用ができ、新規に作らなければならないスタイルを最小限に抑えることが出来る。しかし、必ずしもモジュールの再利用ができるのかといったら、それは難しい問題だ。モジュールAとは微妙にちがうモジュールA’などが当然のごとく登場してくる。</description>
    </item>
    
    <item>
      <title>OOCSSをbuildする</title>
      <link>https://t32k.me/mol/log/make-oocss-styleguide/</link>
      <pubDate>Sat, 29 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/make-oocss-styleguide/</guid>
      <description>ちょいーんっす！あたーんっす！
みなさん、OOCSSって知ってますか？僕は知らないです。嘘です。
@stubbornellaが、4,5年前に言い出したオブジェクト指向なCSSの考え方みたいなもんです。CSSでこんなもの表現できた！とかそうゆうTips系の話題は事欠かないのですが、CSSの設計についての話はそれ以前には（今もそうですが）あまりなかったので、個人的にはとても衝撃的でした。  ちゃんとCSSを書くために - CSS/Sass設計の話（あ、最近イカス資料見つけたぞ！）  まぁそんなOOCSSですが、ここ一年は目立った更新はありませんでした。と思ってたら最近、GitHubのレポジトリ見たらなんかすごく変わってる！
新しくなったドキュメントを読みたいのですが、Readmeを読むと、どうやらSassやらHandlebarsやら使っててbuildしなきゃいけないっぽいす。んで仮想環境をVagrantで提供してるとのこと。
なんと！俺はただCSSのドキュメントを読みたいだけなのに、めんどくせ(๑･ิω･ิ๑)yー～
と言っててもしょうがないのでがんばってみる。 事前インストール  Git (多分入ってると思うけど&amp;hellip;) VirtualBox (現状、4.2.14やめて、4.2.12を選択しとく) Vagrant (gemでインスコしたことある人はアンスコしとく)  OOCSSをbuild OOCSSをForkする(フォークボタン押すだけね！)
git clone https://github.com/{user_name}/oocss.git Cloning into &#39;oocss&#39;... remote: Counting objects: 1800, done. remote: Compressing objects: 100% (1261/1261), done. remote: Total 1800 (delta 580), reused 1626 (delta 445) Receiving objects: 100% (1800/1800), 1.53 MiB | 121.00 KiB/s, done. Resolving deltas: 100% (580/580), done. ForkしたのをCloneしてくる
cd oocss/oocss Vagrantfileのある場所に移動する
$ vagrant up Bringing machine &#39;default&#39; up with &#39;virtualbox&#39; provider.</description>
    </item>
    
    <item>
      <title>CSSプロパティの継承：inherit</title>
      <link>https://t32k.me/mol/log/inheriting-link-colour/</link>
      <pubDate>Mon, 08 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/inheriting-link-colour/</guid>
      <description>最近のスマホサイトとかコーディングしてると上記のようなリストビューのコンポーネントをよくマークアップする。リストのひとつの項目全体がタップエリアで遷移したりアクションしたりする。
これをコーディングするとなると、ul &amp;gt; li &amp;gt; aでaをBlock要素にすると思う。そのとき、上記の普通のテキスト文もリンクテキストになってしまって、いわゆる青色の下線テキストリンクのようなスタイルになってしまう。
body { color: black; } a { color: blue; }  下線付きとは言わなくても、たいていリセットの段階で基本的なリンク色を設定してると思う。
ul li { color: gray; }  それじゃ問題だから、ul &amp;gt; liにグレーの文字色を定義したりする。『あれ？青色のままじゃん？あ、そうだaのcolorは継承しないんだったー』ってことが疲れてるとよくある。
ul li, ul li a { color: gray; }  だもんで、めんどくさいけど、上記のようなスタイルを指定している（aで包まない時にも文字色を維持するため）。なんかこれは単純な例だけど、もうちょっと複雑になると、詳細度の兼ね合いとかめんどくさくなってくる。しかしまぁよくよく考えたら、継承させればいいんだよねってことで、ここでinheritさんの登場だ。
a { color: inherit; } ul li { color: gray; }  こうしとけば、ul &amp;gt; li &amp;gt; aは、グレーの文字色を継承する。inheritなんて初めて使ったよ。スマホコーディングとなるとCSS3ばっか意識がいっちゃって、基本を疎かににしていた。反省。
スマホサイトはタップエリアを大きくするためにBlock化して、aに多くの内容物が放り込まれるきらいがある。だもんで、aも通常のspanとかdiv感覚に扱うようになってきから、継承させたほうがなにかと都合が良い気がする。そのほうが素直な気がする。
 Inheriting Link Colour - Snook.ca  </description>
    </item>
    
    <item>
      <title>CSSOとgrunt-csso</title>
      <link>https://t32k.me/mol/log/csso-and-grunt-csso/</link>
      <pubDate>Thu, 18 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/csso-and-grunt-csso/</guid>
      <description>読書の秋、ご勉学の方はいかがでしょうか。 I&amp;rsquo;m your @t32k.
今日はCSSO (CSS Optimizer) – A CSS minimizer unlike othersの紹介だ。前回のCSSCombは単純にプロパティのソートをしてくれるものだったが、今回のはminimizerだ。
普段はSassの:compressed出力で最後デプロイしてるんだけど、もっとマシなものはないかなーと特には探してはないけど、@cssradarパイセンがCSSOがいいって言ったとか言わないとかあったので調べてみた。
ちなみにSassの:compressedはこんな感じで出力しているらしい。 Compressed style takes up the minimum amount of space possible, having no whitespace except that necessary to separate selectors and a newline at the end of the file. It also includes some other minor compressions, such as choosing the smallest representation for colors. It’s not meant to be human-readable. http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#id17 
 改行とか空白とか色の値変換ですかね。まぁ特にそんな凝ったことはしてない模様。</description>
    </item>
    
    <item>
      <title>Sassの親セレクタ参照&amp;について</title>
      <link>https://t32k.me/mol/log/referencing-parent-selectors/</link>
      <pubDate>Thu, 06 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/referencing-parent-selectors/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#referencing_parent_selectors_&#34;&gt;Sassの親セレクター参照の&lt;strong&gt;&amp;amp;&lt;/strong&gt;&lt;/a&gt;の話。&lt;/p&gt;

&lt;p&gt;Sassでどんどんネストして書いてると「親セレクタ参照してーわー、できるなら親孝行してーわー」ってたまになりますよね。僕はそんなにならないんですけど、一番わかりやすい例としてリンクの擬似クラスがあります。こんな例です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>パフォーマンスからみるSass/Compass 番外編：MSは青かった</title>
      <link>https://t32k.me/mol/log/compass-ie-hex-str-function/</link>
      <pubDate>Wed, 08 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/compass-ie-hex-str-function/</guid>
      <description>&lt;p&gt;2回も続いてないのにまさかの番外編！ここぞ変化球！キエル消える魔球！！&lt;/p&gt;

&lt;p&gt;ってことで、最近Androidの相手ばかりしていて、「IE&amp;hellip; そんな女もいたよね」って感じでしたが、ちょっとハマったので忘備録。グラデーションを使ったデザインをCSSで再現しようとした話。ということでCSSグラデーションのスニペットを&lt;a href=&#34;http://www.colorzilla.com/gradient-editor/&#34;&gt;Ultimate CSS Gradient Generator&lt;/a&gt;で吐き出してみたんですわ。
&lt;pre&gt;&lt;code&gt;/* CSS */
.gradient {
 background: -moz-linear-gradient(top, #000 0%, #595959 100%);
 background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#000), color-stop(100%,#595959));
 background: -webkit-linear-gradient(top, #000 0%,#595959 100%);
 background: -o-linear-gradient(top, #000 0%,#595959 100%);
 background: -ms-linear-gradient(top, #000 0%,#595959 100%);
 background: linear-gradient(to bottom, #000 0%,#595959 100%);
 filter: progid:DXImageTransform.Microsoft.gradient( startColorstr=&amp;lsquo;#000&amp;rsquo;, endColorstr=&amp;lsquo;#595959&amp;rsquo;,GradientType=0 );
}&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>じゃ僕もCSSプロパティの書き順とか</title>
      <link>https://t32k.me/mol/log/css-property-order/</link>
      <pubDate>Sat, 28 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/css-property-order/</guid>
      <description>CSSプロパティ記述順序を晒すのが流行ってるみたいなのでｗ
自分のプロパティの書き順とか｜CSS HappyLifeじゃあ俺もCSSの書き方を書くよ！ | Blog hamashun.comRedLine Magazine : 自分もプロパティの書き順とかCSS Property Order Sheet(PDF)
基本Mozillaが薦める順序で書いてます（↑赤字部分）
/Suggested order:
 display
* list-style
* position
* float
* clear
* width
* height
* margin
* padding
* border
* background
* color
* font
* text-decoration
* text-align
* vertical-align
* white-space
* other text
* content
*/
mozilla.org Base Styles

んで、足りないとこをkaminogoyaさんのスタイルシートを書く時のガイドラインで補った感じです。チートシートないとわからんですね、はいｗ</description>
    </item>
    
  </channel>
</rss>