<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Analytics on MOL</title>
    <link>https://t32k.me/mol/categories/analytics/</link>
    <description>Recent content in Analytics on MOL</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 27 Oct 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://t32k.me/mol/categories/analytics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>コンテンツグループというものがあった</title>
      <link>https://t32k.me/mol/log/google-analytics-content-grouping/</link>
      <pubDate>Thu, 27 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/google-analytics-content-grouping/</guid>
      <description>久しぶりにGoogleアナリティクスを使ってみると見慣れないコンテンツグループというものがあった。なんてことはない、文字通りコンテンツをグルーピングするそうだ。
基本的にページ単位でアクセス解析するものだと思うのだけど、何百・何千という単位のページを個別に考えのは少々骨が折れるし、全体像が掴めない。ページというのはなにかしらのグループに属しているはずなので、そこで、そうゆうのをまとめて解析できるようにするのがこのコンテンツグルフープの役割だ。
そういえば思い出したが、昔、何百万という商品ページがあったのをカテゴリーごとに、リクエストURIを書き換えてグルーピングしたのを思い出したが、今はもっと便利になっている。
例えば、このブログならひとつひとつの記事がページになり、グループはいかようにも設定できるだろう。2016年、2015年、2014年&amp;hellip;という年次でグルーピングするのもひとつの方法だろう。たいていのブログサイトなら記事の公開年ごとにディレクトリを区切って管理しているかもしれないが、あいにく私のブログではURLが長くなるのは嫌だったので、そうゆうURL構成になってはいない。
コンテンツグループのグルーピングはそういったURLやタイトルの規則性を利用してもできるが、トラッキングコード別にグループ化もできる点が素晴らしいと思う。
ga(&#39;set&#39;, &#39;contentGroup1&#39;, &#39;{{.PublishedYear}}&#39;);  上記のように、トラッキングコードを記事に仕込むことでグルーピングできる（{{.PublishedYear}}部分は何かしらの変数で）。
こんな具合にcontentGroup1がyearというグループになっている。
トラッキングコードでグルーピングできるということは、なんでもできるということだ。例えば、その記事の文字数をカウントしてGAトラッキングに渡して文字数ごとにグルーピングしたり、コメント数や、ソーシャルシェア数別に分けても良いだろう。可能性は無限大だが、解析できるグループのスロット数は5つまでなので、お気をつけて。
そうゆうわけで、ページに対して新たな切り口で解析できるのは良いと思った。</description>
    </item>
    
    <item>
      <title>Google Analytics トラッキング スニペット再考（2016）</title>
      <link>https://t32k.me/mol/log/use-async-attribute/</link>
      <pubDate>Tue, 30 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/use-async-attribute/</guid>
      <description>最近、またGoogleアナリティクスの面倒を見ている。で、GAのドキュメントを見ていたら最近のイケてるトラッキングスニペットはこれだぜ！みたいなこと書いてあった。やれやれ、またかと思い、筆をとったのです。
トラッキングスニペットの移り変わり激しいもので、最近だとこうゆうのが一般的だろう。
&amp;lt;script&amp;gt; (function(i,s,o,g,r,a,m){i[&#39;GoogleAnalyticsObject&#39;]=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,&#39;script&#39;,&#39;//www.google-analytics.com/analytics.js&#39;,&#39;ga&#39;); ga(&#39;create&#39;, &#39;UA-XXXXX-Y&#39;, &#39;auto&#39;); ga(&#39;send&#39;, &#39;pageview&#39;); &amp;lt;/script&amp;gt;  最近のおすすめはこれだとか。
&amp;lt;script&amp;gt; window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date ga(&#39;create&#39;, &#39;UA-XXXXX-Y&#39;, &#39;auto&#39;); ga(&#39;send&#39;, &#39;pageview&#39;); &amp;lt;/script&amp;gt; &amp;lt;script async src=&#39;//www.google-analytics.com/analytics.js&#39;&amp;gt;&amp;lt;/script&amp;gt;  まぁやってることは、最初のスニペットはインラインJavaScriptでscript要素をインジェクトし、そこでanalytics.jsを読み込んでいる。なぜかそうするのかというと、それは非同期読み込みのためなのだけど、後者のスニペットはその処理をすべてasync属性が担っているので、とってもすっきり。
非同期読み込みの利点は過去の記事を参照。
 Google Analytics トラッキング スニペット再考（2010） Google Analytics トラッキング スニペット再考（2012）  
async属性の対応状況なのだけど、IE9以前とかを気にしなくてよいのなら、このスニペットに置き換えて良いかなと思う。
個人的に、2つのトラッキングスニペットは記述の仕方が違うだけで。やってることは同じなんだろうと考えていたのだけど、実はそうではないらしい。
 上記の JavaScript トラッキング スニペットにより、すべてのブラウザでスクリプトが確実に読み込まれ、非同期的に実行されますが、最新のブラウザでは、スクリプトをプリロードできないという欠点があります。この問題の対策として、次のような代替の非同期トラッキング スニペットを使用することで、最新ブラウザでのパフォーマンスをわずかに向上させることができます - サイトに analytics.js を追加する | ウェブ向けアナリティクス
 『わずかに向上させる』ってどうゆうことだってばよ？、『プリロード』ってなによ？と思い、また筆をとってしまったのです。
ググったら、myakuraが書いてた。
 script async を使えば、非同期で読み込まれるし、プリロードスキャナの恩恵にも預かれるとのこと。- script asyncでJavaScriptの非同期読み込みを - fragmentary
 PreloadScanner 『プリロードスキャナ』ってなによ！</description>
    </item>
    
    <item>
      <title>サイトの速度</title>
      <link>https://t32k.me/mol/log/no-more-stopwatch/</link>
      <pubDate>Mon, 15 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/no-more-stopwatch/</guid>
      <description>Stopwatch | By wwarby Flickr!
こんにちわ、あなたの@t32k、ごきげんいかがでしょう。みなさんはスマホWebアプリ作っていて、自分の作ったものは速いのか遅いのか気になりませんかね？僕は木に泣くりまくりすてぃです。
そうゆうわけなもんで、表示速度とか計測してみようって話になるじゃないですかー、まさかストップウォッチで計測しないとは思うんですけどー、一応どのようにスピードを計測、そのアプリの性能を評価すればよいのか一緒に考えてみましょう。
僕が昔、ゴメス・コンサルティング（現：コンピュウェア モーニングスター） のセミナーに行ってきた時の話ですが、ここの会社はサイトパフォーマンスの計測サービスを提供していて、計測で重要なのは『定期的かつ継続的かつ同手法にてパフォーマンス測定』と言っておられました。
サービスリリース時はスモールスタートなのでアプリもコンパクトですからスピードは速めかもしれません。しかし月日がたつにつれて、多くの機能が実装され、それに伴いサイトのスピードが落ちてはなんの意味もありません。計測した日がたまたま速かったのかもしれませんし、たまたま遅かったのかもしれませんので、定期的かつ継続的にかつ計測する必要性があります。また、1回目と2回目の測定条件（環境）が違ったりしては参考になりません。ましてや数ms単位でしのぎを削る我々にとってこの辺はシビアでかつ正確であってほしいわけです。
ですから、ストップウォッチや計測コードを毎回差し込むといった人間の手による対応ではコストが高すぎますし不正確な計測しか出来ません。そこですべてを自動化し計測する必要性があります。
すべてを自動化ってそんなことできるの？ 大抵のサイトに実装されているであろうGoogle アナリティクスを使えば可能です。
上記Google アナリティクスのレポートから『平均表示時間』等を確認できます。『平均表示時間』と書いてありますが、英語メニューでは『Avg. Page Load Time』ですので、『平均読み込み時間』が適切かと思われます（ラベリングおかしい（●｀ε´●）） 平均表示時間 - ページの読み込みにかかった平均時間（秒）
ga:avgPageLoadTime = (ga:pageLoadTime / ga:pageLoadSample) * 0.001 平均表示時間（秒）= ページの読み込みの合算値 (ミリ秒）÷ サンプル数 × 0.001 Site Speed - Dimensions &amp;amp; Metrics Reference 
 と言った計算式で算出されております。これであればサイトの全ページを計測でき、なおかつ平均なので、ある程度ならした数値を得ることができます（外れ値は別途カスタムレポートとかで除外することもできます）し、パフォーマンス改善もPVの多いとこから対応したほうが効率的だということが理解できるでしょう。
[追記]　コメントに指摘されたように、値にばらつきがあるような場合（凹凸形状な分布）だとやはり、中央値を確認すべきなので、[分布]タブをクリックすれば、どの値の範囲に多いのか確認できます。 
またディレクトリごとで読み込み時間の違いを確認したり、端末ごとでの読み込み時間を確認するといったことも可能でしょう。
さて、この読み込み時間ってのはどこから取ってきてるのかと言いますと、Navigation Timingという仕様を実装しているブラウザからです。ユーザーがページ遷移するとネットワークの接続、サーバーレスポンス、ブラウザ読み込みにかかった時間が自動的にブラウザに記録され、その情報をGAがサーバーに送ってるといった感じです。 これまでというか、一昔前まではそうゆうことを計測しようと思うと上記のようなコードを挿入して計測していた気がします。これをページの読み込み時間と定義してしまうのは、いささか問題があります。Aのページの読み込みを考えれば、当然Bとなど他のページから遷移したと想定され、Bのページのリンクを押してから、Aのベージの読み込み完了までが本来の意味での（体感的な）読み込み時間と考えるべきでしょう。つまり、上記のコードではネットワークやサーバーのやり取りの部分が考慮されてないことを意味します。またそもそもJavaScriptでの時間計測は不正確ということも懸念されます。 より体感に近い読み込み時間を考慮すれば上図のような流れを計測すべきです。このような計測をJavaScriptだけで行おうとするとやや複雑な処理を記述しなければなりません。そんなめんどくさいことしなくても計測できるようになったのが、Navigation timingです。

もう一度、GAのレポート（[コンテンツ] &amp;gt; [サイトの速度] &amp;gt; [ページ速度]）を見てみると、『平均表示時間』の以外にも様々な指標が確認できるでしょう。  平均リダイレクト時間（ページを読み込む前にリダイレクトにかかった平均時間。リダイレクトがなければ0になる） ドメインの平均ルックアップ時間（ページのDNS名前解決にかかった平均時間） サーバーの平均接続時間（サーバーとのTCPコネクション確立に要した平均時間） サーバーの平均応答時間（サーバーがユーザーリクエストに応答するまでの時間。ユーザーの所在地からサイトのサーバーにアクセスするネットワークの通信時間も含まれる） ページの平均ダウンロード時間（ ページ（のみ）のダウンロードにかかった時間）  [エクスプローラ]タブの[技術]にはネットワークとサーバーに関する指標がレポーティングされています。『平均表示時間』の大半がこの部分で占められていれば、フロントエンドエンジニアではなくサーバーサイドエンジニアに文句を言いましょう。</description>
    </item>
    
    <item>
      <title>Google Analytics トラッキング スニペット再考（2012）</title>
      <link>https://t32k.me/mol/log/defer-parsing-of-google-analytics/</link>
      <pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/defer-parsing-of-google-analytics/</guid>
      <description>秋色日毎に深まりこんちわ、@t32kだ。前回も少し言いましたがPageSpeedにモバイル版というのがありまして、デスクトップ版とは少々違うことをこいつは物申してきます。テストするページにもよりますが例えば、デスクトップ版であれば、「ブラウザのキャッシュを活用する」 や 「圧縮を有効にする」 がHigh priorityな対策としてよく指摘されます。モバイル版でもそれらは重要かつ効果のある対策ですが、さらに対応しておきたいのが 「JavaScript の解析を遅延する」 という対策です。
ざっくり言えば、そのJavaScriptが本当に必要になるまで後にとっておくということです。スマホなどの携帯端末は言うまでもなく、デスクトップPCに比べれば非力なので、このような端末ではJavaScriptを解析するのにもなかなか時間を要してしまうので、注意しましょうってことです。
PCサイトで、それも単純にドキュメント閲覧のようなページのパフォーマンス対策なんて、HTTPリクエストを減らすことだけ考えていれば十分事足りるなぁと個人的には考えています。ただ、最近やってるお仕事はスマホ向けのWebアプリ制作でして、JSゴリゴリ使ってます。。。この辺りのパフォーマンス対策というのをもうちょっと真剣に考えたいお年頃になってきたので、今回がんばってみます。
ただ、僕はJSは書けないので難しいことはよく分からんとです。お先真っ暗、八方塞がりです。唯一気になっていることは今のプロジェクトでhead要素に入れてあるGoogleアナリティクスのスニペットって本当にここでいいのか？ということです。これね、これ。
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; var _gaq = _gaq || []; _gaq.push([&#39;_setAccount&#39;, &#39;UA-XXXXX-X&#39;]); _gaq.push([&#39;_trackPageview&#39;]); (function() { var ga = document.createElement(&#39;script&#39;); ga.type = &#39;text/javascript&#39;; ga.async = true; ga.src = (&#39;https:&#39; == document.location.protocol ? &#39;https://ssl&#39; : &#39;http://www&#39;) + &#39;.google-analytics.com/ga.js&#39;; var s = document.getElementsByTagName(&#39;script&#39;)[0]; s.parentNode.insertBefore(ga, s); })(); &amp;lt;/script&amp;gt;   Google Analytics 非同期トラッキングコード再考（2010） - MOL  はい、2年前にこの記事を書いたのは僕でして、そこでは&amp;lt;/head&amp;gt;の直前に入れるということで結論づけました。ただこれはPCサイト前提での話なので、今のスマホ時代にも通じるのかもう一度考えてみましょう。
script要素の読み込みと評価 
script要素を入れることでかかるコストについて上記の図のような感じですね。LatencyとDownloadが読み込みに関わるところで、普通にscript要素を読み込むと、通常のリソースは並列ダウンロードできるのに対して、script要素は他のリソースのダウンロードをブロッキングします。まぁ、scriptを早い段階で読み込むとそれだけページ表示に余計に時間がかかってしまいます。この点でノンブロッキングな読み込みを実現したのがGoogle Analyticsの非同期トラッキングコードで並列ダウンロードが可能となりました。また、トラッキング用のJSファイルにはga.jsには12時間の有効期限が設定されているので、次ページビュー、当日中くらいのセッション再開後もキャッシュが有効となり、LatencyとDownloadの部分は省略できます。
ただ、お気付きの通りParsingとEvaluationはキャッシュがあろうがなかろうが毎回コストを支払わなければなりません。しかもParsingとEvaluationの実行中はレンダリングが止まってしまいます。PCサイトであればこの点が無視できるほど短い時間で完了するので、head要素においても大した影響がないということでした。事実、@tobieさんの記事でもjQeuryのParsingとEvaluationのコストはMacBook Proが35msに対して、iPhone4が320msかかっている調査結果でした。つまり、jQueryを使おうが使わまいが、キャッシュが効いてようが効いてまいが、iPhone４ユーザーはjQueryが読み込まれている時点で毎回320ms（設置場所によっては）レンダリングが止まる時間ができるということです。
Google Analyticsの実行コスト そこでjQueryのテストのGoogle Analytics版を作ってみました。Google Analyticsは基本的にページビュー計測を目的に入れると思いますので、単純に評価だけでなく毎ページごと実行（ビーコン画像発行）されると想定したテストです。10回アクセスしてその平均値をグラフにしました。</description>
    </item>
    
    <item>
      <title>大規模サイトにおける Googleアナリティクス導入から成果まで</title>
      <link>https://t32k.me/mol/log/google-analytics-on-large-site/</link>
      <pubDate>Mon, 16 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/google-analytics-on-large-site/</guid>
      <description>ありがたくも、CSS Nite LP, Disk 19「アクセス解析」で話した「大規模サイトにおけるGoogleアナリティクス導入から成果まで〜Webデザイナーがアクセス解析に携わってみて〜」が 、CSS Niteベストセッション2011 のベスト20に選ばれたので、文字に起こしてみるの巻。
 DMM.com Laboの石本です。よろしくお願いします。今日は大規模サイトでのGoogleアナリティクス運用について話します。そんなに難しいことではないので、リラックスして読んでもらえれば幸いです。
アジェンダ 本日の流れはこんな感じでやっていきます。
 自己紹介 アクセス解析への動機 プロファイルの適正化 コンバージョン設定から改善施策へ まとめと今後の課題  自己紹介 では、やっていきましょう。まずは自己紹介させてください。Twitter IDは@t32kでWebデザイナーをしています。
2011/9/26ですね。共著ですが「スマートフォンサイト制作の教科書」という本を書きました。初めてスマートフォンサイトを作る方、入門者向けですので、今後のスマートフォンサイトの概要を知る上でもマーケッターさんの方も買ってもらってもいいんじゃないかなと思います。オールカラーで読みやすいです。
あとは趣味でiPhoneアプリを作ったりしています。左がNyarsというアプリで、なんてことのないただの猫耳をオーバーレイして写真が取れるというものです。右がtissaというアプリで、なんてことのないただのタイマーアプリで350円で売ってます。
アクセス解析への動機 と言うわけで、本題に入ってきます。見た感じ完全に制作サイドのWebデザイナーがなにゆえアクセス解析に興味をもったのかと話していきます。
まず私の毎日仕事しているフィールドです、みなさんもご存知かと思いますがDVDレンタルなどで有名なDMM.comです。レンタル以外にも動画配信や、通販事業なども行っています。そこで私も含めたWebデザイナーこのような、商品の特集ページであったりヘルプページ、バナーなど制作しています。
当たり前ですが、Webサイトはデザイナーだけでは作れません。サイトをしっかりと運用していくにはデザイナー以外にもエンジニアの力も必要ですし、マーケッターさんの力も不可欠です。しかし、お互いが協力していくには相手の言葉を知らなすぎるような気がします。例えば、マーケッターさんがデザイナーにCPCがどーたらCPAがどーたらといってもピンとこないでしょうし、反対にデザイナーがマーケッターさんにUXDやIAがどーたらと言っても理解してもらえないと思います。まぁ大げさな例ですが、多かれ少なかれ似たようなケースがそこかしこで起きているでしょう。私はデザイナー5年目ですが、この人らは同じ日本語を喋りますが、違う言語の中で生きてると理解しています。

これは私の好き言葉でもありますが、外国語を知らないもの者は母国語を知らないとゲーテは言っています。相手の言っていることは理解したいですし、そうすることで自分の言語：デザインに関しても理解が深まれば好都合です。そうゆうことで自分に対してはこのようなスタンスで臨めば良いかもしれませんが、これを他者に求めるのは酷なこともかもしれません。ましてや、クライアントや上司の方に、あんたデザインなんでわかってないんや！などとは言えません。
そこで皆が共通に理解できるモノが必要となってきます。はい、数字ですね。3は3でありそれ以上でもそれ以下でもありません。3が4になれば増えたということ、2になれば減ったということは、どんな職種の人だろうと同じ理解を得られるわけです。そして、Webサイトの数字といえばアクセス解析であり、それが切実に必要だと感じています。
プロファイルの適正化 というわけで、デザイナーですけどアクセス解析をやってこうと考えたわけですが、そう簡単にうまくはいきません。プロファイル（Google アナリティクスのレポート）の閲覧の段階でまずつまづきましたという話をしていきます。
その前に、DMM.comのサイト規模を紹介したいと思います。DMM.comはクレジット登録しているなどすぐに課金可能な会員が362万人。月間ユニークユーザーが1900万人の8.6億ページビュー。Google アナリティクスのプロファイル数は83個、Google アナリティクスにアクセスできるユーザー数は119人ほどです。
正直このレベルになってくると、データの嵐の海を彷徨うのと同じようなもので、ただトラッキングコードを入れていればOKという話ではありませんでした。そこで最初にとりかかった作業がプロファイルの適正化です。誰が見てもおかしくない数値、見たい情報を見ることができるプロファイルにしなければなりません。
Google アナリティクスを大規模サイトで使用する上で問題になってくるのが50,000URL問題です。ちょうどGoogleアナリティクス開発者向けドキュメントに該当の問題ついて述べられてるところがあります。 1日あたり、50,000 を超える一意の URL または仮想ページをトラッキングしていますか。 Google Analytics では毎日、ウェブサイトから送信されてきたすべてのデータと、ページビューで並べ替えられた上位 50,000 ページ上のレポートを収集します。残りのページは、コンテンツ レポートの「(その他)という別のセクションにまとめられます。トラフィックの少ないページビューの詳しいレポート情報を表示するには、トラフィックの多いすべてのページビューを除外するフィルターを使用した新しいプロファイルを設定してください。これにより、上位 50,0000 の URL に残りのページを効率的に含められるようになります。 これはどうゆうことかと言いますと、Google アナリティクスで1日で処理できるURL数はページビューの上位5万までなんですね。5万以上になると、それからは（other）（その他）という項目にまとめられてしまいます。これがどうゆう悪さをしますのかと言いますと、実際はページビューがカウントされているはずのページ、GIFリクエストも発生しているのにもかかわらず5万URLに入らなかったため、プロファイルで確認できないページが出てきます。全体のPVには入ってるんですけども、個別のURLレポートでは確認できないということです。
全体のページビューを見ても、この青色の部分が（other）その他で全体の4割も占めています。このくらいになってくると、ページを製作して公開しても測定できないってことがよくありました。
とりあえず、この５万URLの内訳はどうゆうものなのか調べてみます。このような商品の詳細ページというのが多くあります。これは通販のタイガー＆バニーのDVDですが動画配信でも同じ作品がありますし、この作品がレンタル出来ればレンタルフロアでも似たような詳細ページができあがります。つまりDMM.conでは1つの作品に対して複数のURLを生成してしまう可能性が高いです。こう言ったコンテンツは数百万単位でありますからこの時点でURLは5万におさまらないということが理解できます。
またこのような商品リスト・一覧ページというのがあります。これは価格の高い順番、低い順番などで並べ替えができます。つまりURLのパラメータで処理することになるので、それだけURLが増えます。また1つのリストページに掲載できる商品も限られますので、1ページ2ページとページ数が増えていきます。
このように、個々のURLを見ていくと当面、分析・解析しないようなURLが非常に多くあることが理解できます。私たちは解析を始めたばかりなのでこのような瑣末なとこに注力するのではなくもっと全体を見るほうが合理的でしょう。
ということで、ハイレベルサイトマップという考えが重要になってきます。こんなのです。
ハイレベルサイトマップ（ハイレベルサイトストラクチャ）というのは、サイトの概要・導線を理解するために必要なものです。URLごとではなくて、サイトの役割ごとでページをまとめて理解しようというものです。
これをDMM.comにあてはめて考えてみると、このようなハイレベルサイトマップができあがりました。トップページがあって商品一覧ページと詳細ページを行き気してる感じですかね。このレベルの情報の粒度で理解出来ればいいので、Google アナリティクスのプロファイルもこれが確認出来ればいいわけです。つまり、私が欲しいのはハイレベルサイトマップ用のプロファイルが欲しいということです。
ハイレベル用のプロファイルを作成するには、同じ種類のページのURLをまとめる必要があります。そのためには、プロファイルに対してカスタム詳細フィルタをかけてあげます。
もうちょっとわかりやすくしたのが次のスライドです。URLを書き換えるためにはその対象となるURLを抜き出して再構成する必要があります。この場合、detailもしくはlistを含むものを引き出してきます。それをdetailもしくはlist以下のパラメータは全部削除して上書きしています。実際のURLに当てはめるとこうなります。はいこれで、だいぶURL数が少なすることができました。
おまけですが、正規表現ってのはやっぱり意味がわからないですよね。いきなり自信のない正規表現のフィルタをデータにかけるのはかなり危険なことなので練習する必要あります。Google アナリティクスであればコンテンツのアドバンスフィルタを有効にして正規表現を選択すれば実際のサイトURLで練習ができます。またローカルで確認したければWindowsならregex CoachやMacならReginaldがおすすめです。では、さきほどのフィルタ処理したあとのプロファイルはどーなっているのでしょうか。</description>
    </item>
    
    <item>
      <title>jQuery MobileでGoogle Analyticsを使うために気をつけなければいけないこと</title>
      <link>https://t32k.me/mol/log/using-google-analytics-with-jquery-mobile/</link>
      <pubDate>Tue, 28 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/using-google-analytics-with-jquery-mobile/</guid>
      <description>とあるとこで、とある話をしたので、とあるスライド置いときますよ。 要点を言うと、jQuery MobileでAjax遷移してると、普通にGoogle Analytics置いてても作動しないから気をつけてねって話です。
GATC for jQuery Mobile 僕はこうゆう感じでとりあえず対応しています。作動させるタイミングとフラグメント識別子を記録させるのがポイントです。あとはご自身のサイトに合わせてカスタマイズしていただければと思います。
//Account Setting var _gaq = _gaq || []; _gaq.push([&#39;_setAccount&#39;, &#39;UA-xxxxxxx-x&#39;]); //Async Snippet (function () { var ga = document.createElement(&#39;script&#39;); ga.async = true; ga.src = (&#39;https:&#39; == document.location.protocol ? &#39;https://ssl&#39; : &#39;http://www&#39;) + &#39;.google-analytics.com/ga.js&#39;; var s = document.getElementsByTagName(&#39;script&#39;)[0]; s.parentNode.insertBefore(ga, s); })(); //Execute $(&#39;[data-role=&amp;quot;page&amp;quot;]&#39;).live(&#39;pageshow&#39;, function () { var u = location.hash.replace(&#39;#&#39;, &#39;&#39;); u ? _gaq.push([&#39;_trackPageview&#39;, u]) : _gaq.push([&#39;_trackPageview&#39;]); });  jQuery Mobile XSS Problem ちなみに上記と関係ないですけど、jQuery Mobileのアルファ版使ってる人は直ちに最新版にアップデートしときましょうってお知らせ。</description>
    </item>
    
    <item>
      <title>施策前後のCV率に有意差はあるのか？</title>
      <link>https://t32k.me/mol/log/statistical-significance/</link>
      <pubDate>Tue, 01 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/statistical-significance/</guid>
      <description>はい、タイトルのとおりでございます。とある改善を行いまして、その効果というのが誤差の範疇なのか、それとも効果があったのか（プラスマイナス問わず）知りたい状況に陥りましたんで、いろいろ調べてみましたよというお話。
Google Website Optimizer とか使えば、テストを実行してしばらくしたら勝手にこっちの方が何％優れてるよーって教えてくれるんですけど、今回のケースだと GWO の実装が難しかったので Google Analytics で指標を読み取ることにしました。
やりたいことはですね。手元にあるデータは施策前後の１週間毎のコンバージョン率（8週間分）がありますんで前後8週間の平均CV率を出して何％改善したのか確認したいわけです。で、今回の場合1%程度改善されたのですが、これって別になんにもしなくても1%上がっちゃったりするのか、それとも偶然ではない有意の差なのかってことを理解しようと思います。
施策前後8週間のコンバージョン率の遷移
    1W 2W 3W 4W     Before 93.82% 93.83% 93.23% 93.65%   After 94.73% 94.77% 94.18% 94.71%        5W 6W 7W 8W     Before 93.99% 93.65% 93.95% 94.37%   After 94.99% 94.76% 94.45% 94.59%    まずはじめに はい、大学で統計学の単位を取ったような気もしないわけでもないそうゆう気もしないわけでもないという感じなので、ほぼ統計的知識ゼロです。間違いなどあれば指摘してもらえると嬉しいです。
手始めに『有意差』とかでググッてみるのですが、出てくるリソース読んでもさっぱりなので、というか数式とか見た瞬間拒絶反応がでてくるのでウォームアップがてらこの本読んでみました。</description>
    </item>
    
    <item>
      <title>ModernizrでHTML5時代のWeb技術をトラッッキング</title>
      <link>https://t32k.me/mol/log/trackhtml5inga-with-modernizr/</link>
      <pubDate>Thu, 02 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/trackhtml5inga-with-modernizr/</guid>
      <description>JavaScript Advent Calendar 2010 : ATND 2010年12月1日から25日まで、毎日違う人が JavaScript にまつわるブログ記事を書く企画です。 参加表明した順番が日付（12月◯日）となります。
 What is Modernizr? まずはタイトルにもある Modernizr ですが、これはHTML5時代のWeb技術、最近では「NEWT」、New Exciting Web Technologies （HTML5、CSS3、SVG、XHR2、Geolocation… などの技術総称）と呼ばれている技術がブラウザで実装されているか検出してくれるライブラリです。最近、開発者のPaul Irishさんが来日してその存在を知りました。
Modernizr を読み込んだページにアクセスすると自動的にHTML要素のclass属性に対応状況がこん感じで記述される具合です。
機能が実装されていばその機能名、実装されていなければno-が頭につく感じですね。おおもとのHTML要素にclass属性がついたので、
.borderradius .hoge div { /* border-radiusのプロパティを記述 */ } .no-borderradius .hoge div { /* border-radiusに対応していないから画像で再現する記述とか */ }  こんな感じで子孫セレクタを使って実装状況に合わせたスタイルを記述することができます。
if (Modernizr.localstorage){ // localstorage 使う！使う！ } else { // 代替手段として Cookie 使ったりとか }  もちろんJavaScriptからもこんな感じで分岐処理することも可能です。
Track HTML5 in Google Analytics この非常に便利な Modernizr を利用して、Google Analytics のレポート上でも確認できるようにしてくれるのが trackHTML5inGA です。Modernizr で検出したプロパティをカスタム変数（デフォルトではスロット#5を使用する）で取り込んで Google Analytics に渡す感じでしょうか。</description>
    </item>
    
    <item>
      <title>Google Analytics、 (not set) エントリの異常増加</title>
      <link>https://t32k.me/mol/log/ga-not-set-2010/</link>
      <pubDate>Thu, 30 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/ga-not-set-2010/</guid>
      <description>最近、ユーザー &amp;gt; PC環境 &amp;gt; 画面の解像度 のメニューにおいて、 (not set) エントリが異常に多いことを同僚から指摘されました。調べてみると、一部のプロファイルでそのような現象を確認することが出来ました。
Google Analytics で (not set) と言えば、キャンペーントラッキングでのキーワード問題が有名ですね。キーワードが取れていないから (not set) であるので、画面の解像度 においても解像度が取れてないのだろうと考えましたが、全体の中で10％も (not set) というのは、ちょっとどうゆう状況なのか考えらませんでした。数件、数十件であれば、トラッキングコード実行時になんらかのエラーがあって取れないということも考えられるでしょうが、今回の場合は多すぎます。
そこで、年次スパンで (not set) エントリの推移を見てみますと、どうやら5/3から急激に増加しているのが分かります。ということで、該当の期間にトラッキングコード、フィルタの変更を行ったかといえば、それも思い当たるふしがありません。
ということで、他のGAユーザーも同じ問題になっていないのか検索してみました。たいていは、アクセス解析Q＆Aフォーラムを調べれば分かるのですが、分からないこともあります。
そんなときは、Google Analytics Help forumのほうを検索してみましょう。
 Huge increase in Screen Resolution/Colors of (Not Set) - Google Product Forums  検索してみると、どうやら上記の質問と似ているように思えます。時期的にも同じだし、症状も似ている。この人は 画面の解像度 だけでなく、画面の色 でも (not set) エントリが出ているみたい。そこで、自分のプロファイルを再度確認したところ、画面の色 においても同じ現象が確認できました。その他にも(not set) エントリの異常増加は、自分のプロファイルでは、下記メニューで確認できました。
 画面の解像度　（Screen Resolutions） 画面の色　（Screen Colors） フラッシュのバージョン　(Flash Versions） 言語　（Languages） ホスト名 （Hostnames） ※これは増加ではなく急激な減少でした。  そんわけでいろいろ調べた結果、なんかGA自体のバグくさいので、今回はGooogle さんに問い合わせてみようと思いました。実はちゃんとGoogle Analytics のお問い合わせフォームが存在してまして、調べてみてどうしてもわからない場合は問い合わせてみるのも良いでしょう。（要：AdWordsアカウント）</description>
    </item>
    
    <item>
      <title>Google Analytics トラッキング スニペット再考（2010）</title>
      <link>https://t32k.me/mol/log/asynchronous-tracking/</link>
      <pubDate>Fri, 28 May 2010 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/asynchronous-tracking/</guid>
      <description>アナリティクス公式ブログ: 成長し続ける Google Analytics のエコシステム  非同期トラッキングコードが公式に推奨されるようになったので、ようやく重い腰を上げて調べてみました。長文です。
なぜ、非同期トラッキングコードが推奨されるのか？ 今回のトラッキングコードはurcin.js、ga.jsに続く大きな変更となります。非同期トラッキングコードの恩恵を受けるためには、以前のトラッキングコードを使用されている方は、当然変更しなければなりません。しかし、大規模サイトの場合などはアクセス解析担当者とコード実装者は違うことも多く、エンジニアさんにお願いしなければなりません。「え〜、前変えたばっかじゃん！」などと言われるかもしれません。そんな時にアクセス解析担当者はトラッキングコード変更のメリットを提示しなければなりませんね。Analytics 公式ブログでは、非同期トラッキングコードの利点を以下のように説明しています。
  ブラウザの実行順序改善によるページの読み込み時間高速化 データの収集・精度の向上 JavaScriptが完全に読み込まれていなかったときの依存性からくるエラーの除去
― Google Analytics launches asynchronous tracking - Analytics Blog   てな感じで3つ挙げられているので、ひとつひとつ確認していきましょう。
読み込み時間の高速化 これが、非同期トラッキングコード最大の利点なのではないでしょうか。やはり、Googleのランキングアルゴリズムに読み込む速度が加わった手前、自社サービスがボトルネックとなっていては示しがつきませんしね。
非同期トラッキングコードについて説明していくのですが、まず前提知識としてページの読み込まれ方について解説します。HTTP/1.1の仕様に「ひとつのホスト名（EX: www.t32k.com, img.t32k.comなど）に対して並列ダウンロードできるコンポーネントは数は2つまで」と制限されています。（実際のブラウザ実装は6つとかだけど、IE6,7は2つまで）
上記のグラフは簡単なモデルですが、すべて同じホスト名から読み込んでいます。まず、HTMLファイルが読み込まれ、画像などのコンポーネントが2個ずつ読み込まれていきます。
このとき、同じホスト名から読み込んでいる外部JavaScriptファイルがページの先頭で読み込まれていた場合はどうなるでしょうか？それを表したのが次のグラフです。
どうでしょうか。仕様どおりなら「script + img」と並列に読み込まれるはずですが、そうはならずにscriptファイルひとつしか読み込まれていません。つまり、scriptファイルを最初に読み込むでしまうとダウンロード・レンダリングが止まってしまいます。そのため、ハイパフォーマンスWebサイト、高速サイトの実現のための14のルールのひとつ「ルール6：スクリプトは最後に置く」というものがあります。
このような理由から、非同期以前のトラッキングコードはの直前に置くことが推奨されています。出来る限りページ最下部に置くことでダウンロード・レンダリングを止めないようにしています。上記のグラフのような感じですね。ページを表示するために必要なコンポーネントはscriptの手前ですべて読み込まれているのでこれが最善策なのかなと。
しかし、非同期トラッキングコードはダウンロードの中断を考えなくてもいいので上記のようなグラフになります。なおかつ、Google Analyticsの解析コードga.jsは、www.google-analytics.comから読み込まれていますので、トラッキングコードを挿入したページを読み出すホスト名とは異なるはずなので、ページのレンダリングとは非同期に読む込むことができます。
async属性に関して ga.type = &amp;quot;text/javascript&amp;quot;; ga.async = true;  話はちょっと変わりますが、非同期トラッキングコードについて調べていると、HTML5で定義されているasync属性によってこの非同期を実現しているのでasync属性に対応しているFx3.6しか効果がないと書いている人がちらほらいたのですが、それは誤解です。
続・ハイパフォーマンスWebサイトでは、async属性を使わなくてもブラウザの実行をブロックしないスクリプトの読み込みテクニックとして以下の6つを挙げています。
 XHR eval XHR インジェクション iframe スクリプト Script DOM要素 Script Defer document.writeによるSCRIPTタグ書き出し  今回の非同期トラッキングコードではSCRIPT要素をDOMを使って生成することで実現しています。なので、ほとんどのブラウザで非同期で読み込むことが可能です。async属性を記述しているのは明示的に非同期で読み込むことをブラウザに通知するためとGoogle Code Blogには書いてあります。
 HTML5 “async” attribute in this part of the snippet.</description>
    </item>
    
    <item>
      <title>Google AnalyticsでSafariのバージョンを確認するフィルタ</title>
      <link>https://t32k.me/mol/log/safari-version-number-filter/</link>
      <pubDate>Thu, 04 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/safari-version-number-filter/</guid>
      <description>Safariのシェア並びにバージョン別のシェアが知りたくて、Google Analyticsで確認してみたらびっくり、バージョンじゃなくてビルド番号なんだね、こやつは。
ユーザー &amp;amp;gt; PC環境 &amp;amp;gt; ブラウザ &amp;amp;gt; Safari
こんなんわかんないよヽ(`Д´ﾒ)ﾉ ﾌﾟﾝｽｶ！ってことで、これをなんとかフィルタで書き換えたい欲望に駆られました。Wikipediaで確認してみると、どうやら410番台が2.x系、520番台が3.x系、530番台が4.x系だと分かる。1.x系はちょっとごちゃごちゃしているのと、シェアも少ないだろうということでスルーの方向で。
で、書いてみたフィルタがこれ。
Analytics 設定 &amp;gt; プロファイル設定 &amp;gt; 新しいフィルタを作成
  // 4.x系 ^53(.)+
// 3.x系 ^52(.)+
// 2.x系 ^41(.)+ 検索する文字列 をバージョンごとに上記のように変更して、フィルタを作らなきゃいけないのがめんどくさい。適用してみたこれ↓
数日後、適用されたプロファイルがこれ↓（3分間クッキングみたい）
だいたいのシェアが確認できます。僕のやりたかったこれ！一応満足。 反省点 まぁ、アドバンスフィルタ の 次の文字を含む で上記の正規表現を入力したら、バージョン毎のセッション数が出るので、出た数値をExcelで円グラフにすれば早いですｗ
フィルタで加工してしまえば、もう元のデータに戻せないので汎用性を考えるとあまりおススメしません。今回僕はフィルタの勉強のためにしたのが大きいです。Safari 5なんてものが出たらまたフィルタかけないといけませんしね。
Google Analytics Data Export API が使えたら一番スマートですかね。勉強します&amp;hellip;</description>
    </item>
    
    <item>
      <title>Google Analyticsの(other)とはなんぞや？</title>
      <link>https://t32k.me/mol/log/google-analytics-other-entry/</link>
      <pubDate>Fri, 20 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/google-analytics-other-entry/</guid>
      <description>アクセス解析してたら、どうもデータの取れていないページがある事に気づいた。確かに該当のページは他のページと比べてあまり見られてなさそうなページなので、もしかして、はしょられているの？なんて思いながらGoogle Analyticsのそこらへんの仕様について調べてみた。
というのも、データが取れていないのなら取れていないでいいんだけど、こっちとしてはなぜ取れていないのか説明できないとアクセス解析ツールを使う他部署の皆さんが不信感を抱いてしまう。｢こんなうさんくさいツール信用できっかよ｣なんて事になったら困りものだ。
そうゆことで、最初に目をつけたのがトラッキングコードがおかしくないか。うん、基本ですね。目視でちゃんと正しいトラッキングコードになっていることを確認。てか、テンプレートページに入れてあるので、該当のページだけおかしくなるというのは考えられない。
続いて、HTTPヘッダーでGIFリクエストされていることも確認。GAサーバーに情報は送られているのは確かなようだ。
つまり、情報が送られて表示するまでの間が問題かと思い、次にフィルタに着目。フィルタはほんとうに怖いね。試しに何にもフィルタをかけていないプロファイルを新しく作成し、該当のページにアクセスしてみた。一日後、うん記録されてないね。フィルタが原因ではなかった。
困った。だいぶ困った。そしたらこんなヘルプ記事見つけた。
 一日で50,000ページ（または仮想ページ）以上をトラッキングしていませんか？ Google AnalyticsはWebサイトの全ての情報を収集し、一日つき50,000ページまでページビューで分類されたレポートを表示します。残りのページはレポート上では (other) という名前のエントリに集約されます。トラフィックの少ないページの詳細なレポートを見るためには、トラフィックの多いページを除くフィルタをかけた新しいプロファイルを作成する必要があります。こうすることで、効果的に残ったページを50,000URLs内に含めておけます。
 そんなん知らないよ〜＞＜ 試しに1日分のデータ見たら確かに49,999ページ分しかなかった。
(other)は前々から気になってたけど、こんなところで理解するとは思わなかった。つまり、今回の現象はPV数が少ないページが記録される前に、他のPVの多いページが50,000ページ記録されて、それ以降は(other)にまとめられちゃったから、｢上位のコンテンツ｣から該当のURLで検索してもひっかからなかったってことね。
ということは、50,000ページ記録される前に該当のページにアクセスすれば記録されるんじゃねと思ったので、日付が変わる12時過ぎにアクセスしたけど、記録されなかった。たぶん、50,000ページのリセットのタイミングが日付と違うのか、それともPV数の多いページから優先的に処理されるのかもね。
ともかく、PV数の少ないページのレポートを見るためにフィルタで細分化されたプロファイルから確認しないといけないって他部署の人には説明すれば良いと言うわけだ、てかその前にそんなトラフィックあるんなら有償ツール使えってことですね&amp;hellip;</description>
    </item>
    
    <item>
      <title>Google Analyticsの『サイト上のデータ表示』は信頼できるのか？</title>
      <link>https://t32k.me/mol/log/google-analytics-site-overlay/</link>
      <pubDate>Thu, 30 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/google-analytics-site-overlay/</guid>
      <description> 『サイト上のデータ表示』とは『コンテンツ』ナビゲーションの下にある機能で、ページにあるリンクのクリック率がわかるというものです。小難しい数字の羅列のレポートとは違って、どこが押されているのか直感的に分かる素晴らしい機能ですが、個人的には毎回ちょっと違和感を覚える結果だったので何となく信用していませんでした。
先日、会社の方でこの機能を見たらクリック率がすべて0%になっている、ありえない状態を発見したので、この『サイト上のデータ表示』はどのような仕組みで動いてるのか気になったので調べてみました。
なぜクリック率がすべて0%になったのか？  URL の書き換え フィルタを使用して URL を書き換ると、実際の HTML に記述されたリンクの URL とコンテンツ サマリー レポートの [ナビゲーション サマリー] に表示されるフィルタで書き換えられた URL は一致しなくなります。 この場合、サイト上のデータ表示レポートは、HTML のリンクとレポートに記録されたデータを正しく関連付けられなくなります。
  About In-Page Analytics - Analytics Help  Analyticsヘルプに見たらあっさり解決しましたｗ
確かに会社の方では複数のサブドメインをひとつのプロファイルでまとめていたので、ドメインを表示させるアドバンスフィルタ（通常のURL表示はドメイン以下のみを表示する仕様なので）をかけてありました。でもねもとはと言えばこれを見てやったのに&amp;hellip;
 クロスドメイン トラッキングについて - アナリティクス ヘルプ  言われたとおりやっただけなのに、ほかの機能が使えなくなるのはどうかなと思ってしまいます。まぁ無料だからね..とはいえ、もしフィルタを使ってなかったとしても『サイト上のデータ表示』は少々癖があります。
同一URLリンクはまとめてカウントされる 例えば、同じページ上に『トップページへ戻る』リンクがサイトロゴ画像とテキストリンクであった場合、それらは同じURLなので、まとめてカウントされます。（実際はサイトロゴが6回、テキストリンクが4回クリックされたとしても、GA上ではどちらもクリック数10と表示されます。）
（A要素のhref属性で記述された）標準的なリンクしか計測できない
ざっと挙げる限りこれだけ計測できないリンク（というかクリックイベント）がある。
 JavaScriptリンク（onclick属性でwindow.openなど） pageTrackerで作成した仮想ページビュー（_trackPageview()など） URLリダイレクト サブドメインのページへのリンク 外部サイトへのリンク ダウンロードファイル(PDFに直リンクとか) フレームへのリンク フォームのinputボタン Flashコンテンツ イメージマップ（AREA要素のhref属性なので）  URLの書き換えの項を見る限り、[ナビゲーション サマリー]のデータを基にしているのかもしれない。だから、A要素のhref属性でも飛び先にga.jsがインクルードされていない外部サイト、ダウンロードファイルなどは計測されないのね。結局、使いどころとしてはあまりやんちゃなことしてない静的ページくらいしか使えないのかもしれない。
同じような機能で有料のCrazyEggがあるので、オーバーレイで直感的に確認したいという方はそちらの方の使用を薦める。ただ、CrazyEggもCSSの兼ね合いによっては不具合が予想されるのでそこは注意したい。
 Crazy Egg - build heat maps and track clicks  参考サイト  Site Overlay Report: Google Analytics Power User Part 2 | Cardinal Path Blog  </description>
    </item>
    
    <item>
      <title>複数のGoogle Analytics Tracker Codeを併用する</title>
      <link>https://t32k.me/mol/log/multi-google-analytics-tracker-code/</link>
      <pubDate>Mon, 22 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/multi-google-analytics-tracker-code/</guid>
      <description>『Google Analyticsを複数のプロファイルでトラッキング | 海外SEO情報ブログ』でGAのカスタマイズってほどでもないけど、トラッキングコードのTipsが紹介されている。要は_gat._getTracker()で初期化する際に、変数を2つ用意してあげればいいってこと。
ちょうど、『SIGMA DP2 : Special Contents』のサイトで似たようなコード見つけたので、挙げておく。
&amp;lt;script type=“text/javascript”&amp;gt; &amp;lt;script&amp;gt; try { var pageTracker = _gat._getTracker(“UA-xxxxxx-1”); pageTracker._trackPageview(); var pageTracker2 = _gat._getTracker(“UA-yyyyy-4”); pageTracker2._trackPageview(); } catch(err) {} &amp;lt;/script&amp;gt;  pageTrackerとpageTracker2に格納してるんすね。違うアカウントで同じプロファイルを共有したい時ってゆう状態が、よくわからないんだけども。クライアントさんと制作者側が両方アクセス解析の情報を知りたいって時には便利なのかもしれないね。たぶん。
 Digital Intelligence Solutions to Empower Data Driven, Confident Decision Making | Cardinal Path  上記にサイトはこんな感じのコードだった。
&amp;lt;script&amp;gt; try { var pageTracker = _gat._getTracker(&amp;quot;UA-xxxxx-1&amp;quot;); var isDev = window.location.href.search(/vkistudios.net/); if (isDev &amp;gt; -1) pageTracker._setDomainName(&amp;quot;.vkistudios.net&amp;quot;); else pageTracker._setDomainName(&amp;quot;.vkistudios.com&amp;quot;); pageTracker._setLocalRemoteServerMode(); pageTracker._initData(); pageTracker._trackPageview(); } catch (e) {} //event tracking profile try { var eventTracker = _gat.</description>
    </item>
    
    <item>
      <title>pageTracker._initData関数も廃止予定</title>
      <link>https://t32k.me/mol/log/pagetracker-initdata/</link>
      <pubDate>Fri, 29 May 2009 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/pagetracker-initdata/</guid>
      <description>数ヶ月前のGoogle Analyticsコードアップデートでスニペットにtry/catch文が挿入されたってことを書いた。でも、よくよく見たらpageTracker._initDataの関数もなくなっていない？ってことに気づいた。
var pageTracker = _gat._getTracker(&amp;quot;UA-xxxxxxx-x&amp;quot;); pageTracker._initData(); pageTracker._trackPageview();  少し前のga.jsのコードはこんな感じだったともう。
try { var pageTracker = _gat._getTracker(&amp;quot;UA-xxxxxxx-x&amp;quot;); pageTracker._trackPageview(); } catch (err) { }  initData()ってゆうくらいだから初期化する関数なのかと思いGoogle Analyticsトラッキング コード移行ガイドで初期化部分探したけど、載ってない。
Analytics Tracking APIに載っていた。
 _initData() _initData()Deprecated. initData() now executes automatically in the ga.js tracking code. Initializes or re-initializes the GATC (Google Analytics Tracker Code) object.
 Deprecatedってことは廃止予定ってことか。なんかga.js内で自動的に実行しているらしい。 あーすっきり！しかしまぁ、もうちょっとアナウンスしてくれてもいいんだと思うんだけどな&amp;hellip;</description>
    </item>
    
    <item>
      <title>Google Analyticsで都道府県別セッションを調べる</title>
      <link>https://t32k.me/mol/log/google-analytics-state-report/</link>
      <pubDate>Fri, 20 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/google-analytics-state-report/</guid>
      <description>Many thanks to: カスタムレポートを使って都道府県別セッションを調べる
ほぼ受け折りで恐縮ですが、自分でもやってみたかったので&amp;hellip;都道府県別セッション数をカスタムレポートで作ってみようっていう主旨。
GAの左メニューから ユーザー &amp;gt; 地図上のデータ表示 からだと以下のように表示されます。国別になってます。JapanをクリックするとShinjukuやShibuyaなどが表示されます。違うんだ、僕の知りたいのは都道府県別のセッションなんだ！
ということで、カスタムレポートを作成♪
カスタムレポートを新規作成をクリックすると以下のようなページが表示されますので、まずはタイトルを「都道府県別セッション数」にでも変更しましよ。次に、指標 &amp;gt; 利用状況 &amp;gt; セッション数 を選んでドラッグアンドドロップ！
次に、ディメンションを設定しましょう。ディメンション &amp;gt; ユーザー &amp;gt; 地域 をまずドラッグアンドドロップ。デフォルトのはここが国/地域になってるからあかんのですね。んで、これだけではつまらないのでサブディメンションに都市も追加してレポートを作成。
そうすると以下のように、都道府県別で表示されてますね。（意外と奈良県民に好評なようですね、このブログ）
上記でTokyoをクリックすればドリルダウンで各都市別のセッションも確認できます。
単純なカスタムレポートですが、これにコンバージョンなども組み合わせれば有益なレポートが作成できますね。</description>
    </item>
    
    <item>
      <title>デフォルトページとindex.html</title>
      <link>https://t32k.me/mol/log/default-and-index/</link>
      <pubDate>Sat, 22 Nov 2008 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/default-and-index/</guid>
      <description>Google Analytics(以下、GA)でのプロファイル設定の『デフォルトのページ』に違和感、というかイマイチよくわかならない。
『デフォルトのページ』に関してのGoogleヘルプページ内容はこちら↓ デフォルトのページ [デフォルトのページ] は、ドメイン上のページが指定されていない場合に、サーバーがデフォルトで返すウェブ ページのことです。 たとえば、「www.yourdomain.co.jp」と入力すると、サーバーから index.html ページが返される場合は、index.html がデフォルトのページとなります。 Analytics の [プロファイル設定] ページには、デフォルトのページを指定する欄があります。 Google Analytics では、この情報を使用して www.yourdomain.co.jp と www.yourdomain.co.jp/index.html のヒットが実際には同じページであると判断します。デフォルトのページが指定されていない場合、これら 2 つのエントリは別のページとしてレポートに集計されます。 デフォルトのページ - Google Analytics ヘルプ センター www.yourdomain.co.jp入力したらindex.html返すの当たり前じゃん、最初からそんなん指定しといてよと思った。だがそうでも、ないらしいのね。こんな記事見つけた↓ 何故、最初からデフォールトのページを「index.html」にしてしまわないのか。それは、ウェブサーバーの設定で、デフォールトのページを変えられるから。 例えば、Apache のデフォールトは「index.html」だけど、IIS (Microsoft のウェブサーバー) のデフォールトは「Default.htm」だったり「index.htm」だったりする。「main.html」をデフォールトのページに設定してる人もいるかもしれないし、もっと変な名前をデフォールトにしてるかもしれない。若しくは、「○○/」と「○○/index.html」を同じとして数えたくない人もいるかもしれない。 clmemo@aka: Google Analytics のデフォールト・ページ なるほど、そういうことか。合点がいったよ。で、GAで『デフォルトのページ』をindex.htmlにしたわけです。そしたら、GA上では、www.example.com/などスラッシュで終わってるURLはすべてwww.example.com/index.htmlという表記でカウントされるんですね。
当たり前というか当たり前だけど。。。すべてのページをでディレクトリ作ってindex.htmlで作ったとしたら、おしりが全部index.htmlなので、見にくいじゃん。こんなふうに↓

ということで、デフォルトのページは設定しないことにした。そしたらwww.example.com/とwww.example.com/index.htmlは、別々のURLで扱われるじゃないか！と思うけど。index.htmlでアクセスししてきた人は/にリダイレクトすればいいんだ。で.htaccessでこんなん見つけた↓ Options +FollowSymLinks RewriteEngine on RewriteCond %{THE_REQUEST} ^./index.html RewriteRule ^(.)index.html$ http://www.example.com/$1 [R=301,L] ※www.example.com内のすべてのディレクトリで、「/index.html」が「/」に正規化されます。 index.html「あり・なし」のURL正規化～301リダイレクト応用編 » 海外SEO情報ブログ・メルマガ ようやく、自分の思い通りになったけど、GAで表示する出力を変えるだけなら、アドバンスフィルタとか使えば良かったのかな、フィルタ系全然分からないな。もっと勉強します。。。</description>
    </item>
    
    <item>
      <title>【翻訳】ブロガーのための５つのGoogle Analyticsレポート</title>
      <link>https://t32k.me/mol/log/google-analytics-reports-for-blogger/</link>
      <pubDate>Wed, 01 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>https://t32k.me/mol/log/google-analytics-reports-for-blogger/</guid>
      <description>Original：Top 5 Google Analytics Reports for Bloggers（2007-05-31）
ほとんどのブロガーが知っているように、Google Analytics（以下、GA）はブログのアクセス解析をする上でとても便利で、なおかつ無料だ。あいにくGAはAdWordsの広告主のためにデザインされたものなので、たいていのブロガーにとっては必要以上に多くの情報と対峙しなければならない。キャンペーンやランディングページのレポートが雑然と表示されていると、マイレポート以外は見なくても良いのではないかとさえ思ってくる。
しかし、ひるまないで欲しい。GAこそ君のブログを改善してくれる最適なツールなのだ。ここに、君が実際に役に立つであろうレポートリスト（とその場所）がある。
1. 参照サイト（トラフィック直下） もし君のブログがはてななどのソーシャルメディアに深く関わっているのなら、とりわけ、このレポートは重要だろう。なぜなら君のブログの訪問者がどこから来ているのか分かるからだ。
2. キーワード（トラフィック直下） もし君のブログがSEOの恩恵を受けている、もしくはSEO対策しているのなら、このレポートではそのキーワードが何なのか、どのくらいの訪問者をもたらしたのか把握できるだろう。
3. タイトル別のコンテンツ（コンテンツ直下） 私たちはどの記事が読まれているのかすべて知りたいし、このレポートはそれを教えてくれる。縦列の”閲覧時間”と”直帰率”は見ておきたい。閲覧時間が短く高い直帰率なら、そのページは読者を君のブログ外へ追いやっていることを意味しているだろう。このレポートをさっと眺めるだけでも人気のある記事が書けるんじゃないだろうか。
4. 新規ユーザーとリピーター（ユーザー直下） 誰でも自分にブログのファンになってくれたかどうか知りたいし、このレポートはまさしくそれにふさわしい。確かにこのレポートは君のブログのフィード登録者数を教えてくれないけど、GoogleはRSSリーダーを持っているし、Feedburnerを買収しようとしている（した）から、そう遠くないうちにこのレポートにブログフィード登録者数を追加するかもしれない。
5. 地図上のデータ表示（ユーザー直下） このレポートを役に立てるには国レベルまで掘り下げる必要があるだろう。しかし、ブログ読者が世界のどこにいるか知ることは重要な情報に違いない。君は自分が想定したよりも読者がより国際的もしくは局所的だと理解し、どういった内容を書けばよいか、何時投稿すればよいのか理解するだろう。訪問者全員がカリフォルニアからアクセスしていますか。つまり、彼らのRSSリーダのトップに君の記事を表示させるには太平洋標準時8:00に記事を投稿すればよいわけだ。
たぶん、最も役に立つのは新しいGAのインタフェースで、以上に上げたレポートをマイレポートにすべて登録することできる（左上にある『マイレポートに登録』ボタン）。それで、君は役に立つ情報を見逃すことなく楽できるということだ。</description>
    </item>
    
  </channel>
</rss>