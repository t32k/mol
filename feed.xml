<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>MOL</title>
        <generator uri="https://gohugo.io">Hugo</generator>
        <link>https://t32k.me/mol/</link>
        
        
        
        <updated>Mon, 15 Mar 2021 00:00:00 UTC</updated>
        
        <item>
            <title>一人から始めるユーザーエクスペリエンス</title>
            <link>https://t32k.me/mol/log/978-4621089514-uxone/</link>
            <pubDate>Mon, 15 Mar 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4621089514-uxone/</guid>
            <description>&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://amazon.co.jp/dp/462108951X/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://m.media-amazon.com/images/I/51jGjqYqbbL.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;一人から始めるユーザーエクスペリエンス&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;長谷川 敦士(監修), 深澤 大気(翻訳), 森本 恭平 (翻訳)　他&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;昔、購入して積ん読してあったのをようやく読了。デザイナー向けの本かなと思ったらそうでもなかった。どちらかというと、企業のWeb担当者などがUXデザインやるぞ！と思ったときに、どうやって一人で始めていくかを解説してある。なので、UXデザインで使う各手法について軽く説明してある程度である。自分で実践してもっと知りたいと思ったら、ペルソナなり、ユーザービリティテストなりの専門書を手にとって見るのもよいだろう。&lt;/p&gt;

&lt;p&gt;個人的にUX関連の手法というかワードがいっぱいあって、ごっちゃになっていたので、各ポイントを簡潔に説明してあったのは良かった。またUXデザイナーはいわゆるデザイナーだけのキャリアアップの職種ではなく、エンジニアからUXデザイナーになることもあれば、コンテンツ担当者からUXデザイナーになるこもとある。&lt;/p&gt;

&lt;p&gt;そういうわけで、デザイナーだけでなく、エンジニアなどの方も本書を手に取るとよいかもしれない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;現状把握と計画立案

&lt;ul&gt;
&lt;li&gt;UXセルフチェック&lt;/li&gt;
&lt;li&gt;UXプロジェクト計画&lt;/li&gt;
&lt;li&gt;リスニングツアー&lt;/li&gt;
&lt;li&gt;機会探索ワークショップ&lt;/li&gt;
&lt;li&gt;プロジェクトブリーフ&lt;/li&gt;
&lt;li&gt;UX戦略ワークショップ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ユーザーリサーチ

&lt;ul&gt;
&lt;li&gt;ユーザーリサーチ計画&lt;/li&gt;
&lt;li&gt;ゲリラユーザーリサーチ&lt;/li&gt;
&lt;li&gt;プロトペルソナ&lt;/li&gt;
&lt;li&gt;ヒューリスティックマークアップ&lt;/li&gt;
&lt;li&gt;相対評価&lt;/li&gt;
&lt;li&gt;コンテンツパターン&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;デザイン

&lt;ul&gt;
&lt;li&gt;デザインブリーフ&lt;/li&gt;
&lt;li&gt;デザイン原則&lt;/li&gt;
&lt;li&gt;スケッチ&lt;/li&gt;
&lt;li&gt;スケッチボード&lt;/li&gt;
&lt;li&gt;タスクフロー&lt;/li&gt;
&lt;li&gt;ワイヤーフレーム&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テストと検証

&lt;ul&gt;
&lt;li&gt;ペーパープロトタイプ・インタラクティブプロトタイプ&lt;/li&gt;
&lt;li&gt;ブラックハットセッション&lt;/li&gt;
&lt;li&gt;クイックアンドダーティユーザービリティテスト&lt;/li&gt;
&lt;li&gt;５秒間テスト&lt;/li&gt;
&lt;li&gt;UXヘルスチェック&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後に各フェーズにおけるUX手法の目次を置いておく。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>デザインの伝え方</title>
            <link>https://t32k.me/mol/log/978-4873117799-design/</link>
            <pubDate>Sun, 14 Mar 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4873117799-design/</guid>
            <description>&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873117798/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/41Qw6D84dFL._SX351_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;デザインの伝え方&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;Tom Greever, 坂田 一倫他&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;エンジニアもコードレビューのときにいろいろ気をつけることはあるが、こちらの本はデザイナーがデザインレビューするときではなくて、デザイナーがデザインの決定権を持つステークホルダーなどに自分のデザインを説明する方法について解説している。&lt;/p&gt;

&lt;p&gt;デザインとは見た目に起因するところが多いので、デザイナー以外から、いろいろ言われやすい職種である。エンジニアをしていて、ディレクターなりPMなりに、そこは三項演算子使わないほうがいいんじゃない？みたいなことはヒャクパー言われたことないのにも関わらず、デザイナーはデザイナーからはもちろん、すべてのステークホルダーからなんやかんや言われる。&lt;/p&gt;

&lt;p&gt;偉大なデザイナーは偉大なコミュニーケーターであるように、本書もまたデザインの本というより、コミュニケーションの本に近い。それは目次をかいつまんでもながめてみると『親しい間柄になる努力を』、『良好な関係を築く・ものを贈る』などと、まぁなんとウェットなコミュニケーションであろうか。&lt;/p&gt;

&lt;p&gt;もちろんデータに基づく決定や、論理的な説明でわかってもらえればそれにこしたことはないが、そうもいかないのが現実で、事前の根回しだったり、そのデザイナーの信頼残高がものを言ったりするのも事実。&lt;/p&gt;

&lt;p&gt;とはいえ、やはり自分はこうゆうのが苦手だったりするので、偉大なデザイナーさんに同情するとともに敬意を持って相対していきたいと思う一冊だった。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>SegmentedPickerによるビュー切り替えトランジション</title>
            <link>https://t32k.me/mol/log/segmentedpickerstyle-transition/</link>
            <pubDate>Wed, 24 Feb 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/segmentedpickerstyle-transition/</guid>
            <description>&lt;p&gt;まぁ題名の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    @State &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; selection = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        VStack(spacing:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
            Picker(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;画面切替&amp;#34;&lt;/span&gt;, selection: &lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;selection) {
                Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;).tag(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
                Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;).tag(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            }.pickerStyle(SegmentedPickerStyle()).padding()
            
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; selection == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
                viewA
            } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
                viewB
            }
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; viewA: some View {
        ZStack {
            Color(.blue).edgesIgnoringSafeArea(.all)
            Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;).foregroundColor(.white)
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; viewB: some View {
        ZStack {
            Color(.red).edgesIgnoringSafeArea(.all)
            Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;).foregroundColor(.white)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;よくあるタブ切り替えのような感じのものをPickerのSegmentedPickerStyleで＠Stateを切り替えることでビューも変わる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0224/00.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;普通に作ったらこんなかんじで、パッパッと切り替わる。当たり前だ。transitionを指定してないから。&lt;/p&gt;

&lt;p&gt;どう動かしたら、ビュー遷移のメンタルモデルが自然にできあがるのだろうか。こうゆう感じの。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0224/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;セグメントコントロールを右にスライドしているのだから（A-&amp;gt;B）、それに対応するビューも左から右に出てきてほしいものだ。イメージ的に。なんとなく。たぶん。その逆（A&amp;lt;-B）は右から出て左にいってほしいもの。イメージ的に。なんとなく。たぶん。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;VStack {
    Picker
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; selection == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
        viewAlpha
            .transition(
	            .asymmetric(
		            insertion: .move(edge: .trailing),
		            removal: .move(edge: .leading)
		        ))
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        viewBeta
            .transition(
	            .asymmetric(
		            insertion: .move(edge: .leading),
		            removal: .move(edge: .trailing)
		        ))
    }
}.animation(.&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最初はGeometryReaderでビューの幅サイズを求めて、オフセット値をいじって画面外まで移動させればいいのかな？めんどくさいなーいやだなーと思ったけど、&lt;/p&gt;

&lt;p&gt;trainsitionを設定するだけでよかった。そう、SwiftUIならね！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;.transition(.move(edge: .leading)) &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;普通はこんな感じでtransitionを指定すると思うのだけど、これだと一方方向にしか動かない。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;.transition(
	.asymmetric(
		insertion: .move(edge: .trailing),
		removal: .move(edge: .leading)
))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;asymmetric&lt;/code&gt;を利用することで、transitionのinsertionとremovalを個別に指定することができる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0224/01.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;うん、なんかそれっぽくなった🤗&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>受け師の道 百折不撓の棋士・木村一基</title>
            <link>https://t32k.me/mol/log/978-4808310479-kimura/</link>
            <pubDate>Wed, 24 Feb 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4808310479-kimura/</guid>
            <description>&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4808310473/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/51bKbz2WFyL._SX339_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;受け師の道 百折不撓の棋士・木村一基&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;樋口薫&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;最近、ABEMAで将棋チャンネルをよく見ている。藤井聡太王位・棋聖があまりにも強くて、異世界転生ラノベでよく見る俺つえーーー！！を現実世界で見せられているような感じで、最年少記録や連勝記録をどこまで更新できるのか見ていて面白い。&lt;/p&gt;

&lt;p&gt;そうゆうわけでもっぱら見る将になってしまったが、将棋の戦法というより、どちらかというと解説・聞き手の日常の話が好きで聞いている。当たり前だが藤井二冠以外にも棋士には色んな人がいて面白い。その中でも解説名人と言われている木村一基九段の話は特に面白くて、本書を手にとった。&lt;/p&gt;

&lt;p&gt;本書は2019年に最年長で王位タイトル獲得したを木村九段の話である。先述の通り、歯に衣着せぬ解説や指導でファンが多い木村九段が46歳にして念願のタイトル獲得で涙なしでは読めない。決して木村九段が弱いわけではない。羽生世代より少し若い程度なので、キャリア全盛期のほとんどが羽生永世七冠の無双時代とかぶっていることもあり、なかなかタイトルと縁がなかった。それでも挑戦権を獲得して挑戦するも、緊張・不眠のせいかタイトル戦で思うように実力を発揮できず、負けてしまうことも6度。&lt;/p&gt;

&lt;p&gt;7度目の挑戦で、豊島名人（当時）から王位を奪取した。最近はコンピュータソフトによる研究が盛んなせいか、若手の台頭が目立つ中で木村九段も積極的に将棋ソフトを駆使し自己研鑽に努めている。百折不撓の意味通り、何回挫折してあきらめず今なお成長を続ける木村九段を知れば、応援せざるをえないと思う。&lt;/p&gt;

&lt;p&gt;将棋をまったく知らない人でも楽しめるつくりとなっているが、やはり木村九段の将棋をさしているところを見てから読んだほうが100倍楽しめるだろう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://abema.tv/video/episode/288-23_s62_p40&#34;&gt;第3回AbemaTVトーナメント&lt;/a&gt;は、5分フィッシャールールという早指しなので、初心者でも見ていて面白いと思う。さらに将棋ではめずらしいチーム戦で、木村九段のチームが、本書にも出てくる行方尚史九段、野月浩貴八段の同い年トリオで非常に仲が良いおじさんチームとなっている。是非ともこちらを見てから本書を手に取るとよいだろう。&lt;/p&gt;

&lt;p&gt;本書のあとの話になるが、最年長でタイトルで獲得した木村九段だが、翌年には最年少で棋聖タイトルを獲得し、その勢いのまま王位タイトルに挑戦した藤井二冠に王位の座を奪われてしまう（最年少二冠）。このへんもなんというか、ドラマだなぁと思うがまた木村九段にタイトルを取ってほしいものである。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>近代から現代までのデザイン史入門</title>
            <link>https://t32k.me/mol/log/978-4771018242-design-history/</link>
            <pubDate>Mon, 15 Feb 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4771018242-design-history/</guid>
            <description>&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4771018243/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/31TMX2spJbL._SX354_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;近代から現代までのデザイン史入門&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;トーマス ハウフェ (著)&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;高校生の頃から歴史が好きで日本史を選択していたが、デザインの歴史も好きだ。ということで、大学生のとき以来にデザイン史の本を手にとってみた。&lt;/p&gt;

&lt;p&gt;まず近代というのはどこからということだが、本書では1750年となっている。産業革命がはじまったころであり、生活が工業化してきた時代だ。工場で画一的な製品が大量に生産できるようになった反面、職人が手作業で丁寧に作ったモノが再評価されるようになった。&lt;/p&gt;

&lt;p&gt;それからのアーツ・アンド・クラフツ運動であり、アール・ヌーヴォーである。おもしろいことに、無機質なデザインが世の中に溢れれば、有機的なデザインが反動でくる。また無機質なデザインと、歴史は繰り返しているように思う。アプリケーションデザインで、スキューモーフィズムからフラットデザインに変わっていったように。&lt;/p&gt;

&lt;p&gt;デザインといっても、建築、ファッション、グラフィック、インダストリアルデザインなど多岐にわたるので、本書で登場する事例や人物の作品も申しわけ程度に紹介されるだけだが（しかもモノクロ写真）、今の時代、気になったデザイナー名をあとで調べてwikipediaでも見ておこう。&lt;/p&gt;

&lt;p&gt;すっかり忘れていたデザイナーなどもいたので、ざっと近代デザイン史をおさらいする意味でも本書は有益だった。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>SwiftのOptional型とか</title>
            <link>https://t32k.me/mol/log/swift-optional-type/</link>
            <pubDate>Fri, 11 Dec 2020 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/swift-optional-type/</guid>
            <description>

&lt;p&gt;TypeScriptもあんまり使ったことなかったから、型がどうも苦手というか慣れない。 &lt;code&gt;Int&lt;/code&gt; とか &lt;code&gt;String&lt;/code&gt; とかそうゆうシンプルなものだと分かるが、そのシンプルな型をよくわからないものにするのがOptional型だと苦手意識を持っていた。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; a: String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;swift&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; b: String? = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; c: Optional&amp;lt;String&amp;gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;b&lt;/code&gt; と &lt;code&gt;c&lt;/code&gt; は書き方が違うだけでどちらもオプショナルString型。まぁ&lt;code&gt;nil&lt;/code&gt;を許容するかどうかって話なのだが、問題は扱い方。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; foo: Int? = &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; bar: Int = foo &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;bar&lt;/code&gt; のところでエラーになる。アンラップしろよとかなんとか注意される。&lt;/p&gt;

&lt;h2 id=&#34;アンラップ-開示&#34;&gt;アンラップ（開示）&lt;/h2&gt;

&lt;p&gt;なんでや!! &lt;code&gt;foo&lt;/code&gt; に3が代入されとるのは明らかやろ！と思っていたが、アンラップしろと言われているので、とりあえずアンラップしてみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; foo: Int? = &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; bar: Int = foo! &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;foo&lt;/code&gt; は &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt; であって、 &lt;code&gt;Int&lt;/code&gt; ではないので、違う型同士で足し算はできない。そこで、オプショナルIntからIntを取り出さなければならない。これをアンラップといい、上記のようにビックリマークをおしりにつける。そうするとちゃんと計算を実行できるようになる。&lt;/p&gt;

&lt;p&gt;なんかアンラップしろって言われたら、とりあえずビックリマークつけときゃいいんやなと雑に覚えてしまっっていたので、のちのち困ることになった。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; foo: Int?
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; bar: Int = foo! &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;foo&lt;/code&gt; に値が代入されていない場合、アンラップしても &lt;code&gt;nil&lt;/code&gt; が返ってくるのでエラーになる。&lt;/p&gt;

&lt;h2 id=&#34;オプショナルバインディング-if-let文&#34;&gt;オプショナルバインディング (if-let文)&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; foo: Int? = &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; f = foo {
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;答えは&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\(&lt;/span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;です&amp;#34;&lt;/span&gt;)
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;答えは1です&amp;#34;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もし値が入ってなかったら、違う処理を記述したいと思う。そうゆうときは &lt;code&gt;if let　~ { }&lt;/code&gt; みたいな感じの構文を書く。これをオプショナルバインディングと呼ぶ。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;foo&lt;/code&gt; に値があれば、&lt;code&gt;f&lt;/code&gt; に代入されて、答えは4です。とprintされるが、&lt;code&gt;foo&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; だったら、else節に飛び、答えは1です。とエラーにならずにprintされる。&lt;/p&gt;

&lt;h2 id=&#34;guard文&#34;&gt;guard文&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; foo: String?
&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printStr&lt;/span&gt;(message: String?) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;guard&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; str = message &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nilです&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
    }
    print(str)
}
printStr(message: foo)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;guard文でも似たようなことができる。 &lt;code&gt;guard 条件 else { /* returnやbreak */ }&lt;/code&gt; と書いて、条件が成立しなかった場合、else節にとび、処理を中断したりできる。&lt;/p&gt;

&lt;h2 id=&#34;nil合体演算子-nil-coalescing-operator&#34;&gt;nil合体演算子(Nil-Coalescing Operator)&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;(foo &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;) ? foo! : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;にる！&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;foo&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; じゃなかったらその値を使って、 &lt;code&gt;nil&lt;/code&gt; なら &lt;code&gt;にる！&lt;/code&gt;を使うみたいな条件を、三項演算子で書くとこうなるが、&lt;code&gt;??&lt;/code&gt; のnil合体演算子を使うともっとシンプルにこう書ける。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;foo ?? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;にる！&amp;#34;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;便利。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;とまぁ、そんなムズカシイことではないんだけど。実際のユースケースで体験してこなかったので、身についてなかったんだと思う。&lt;/p&gt;

&lt;p&gt;今、図書管理アプリを作っているのだが、本の情報をGoogle Books APIを叩いてとってきている。しかし、この取ってきたデータに著者情報があったりなかったり、サブタイトルがあったりなかったりと結構チグハグなデータだったのだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Book&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; id: String
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; author: String?
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; title: String
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; subtitle: String?
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; description: String?
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; imageLinks: ImageLinks?
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; publisher:  String?
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; publishedDate: String?
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;モデルで表すとこんな感じで、やたらOptional型を多用するはめになった。あるのかないのか、はっきしろ！とGoogleさんには言えないので、今回Optional型とちゃっと向き合わざるをえなかったのである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;VStack {
  Text(book.title)
  Text(book.subtitle ?? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; d = publishedDate {
    Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;出版年: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\(&lt;/span&gt;d&lt;span style=&#34;color:#e6db74&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
  }
  Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;著者: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\(&lt;/span&gt;book.author ?? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;不明&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SwiftUIで画面を構築するときもこんな感じで、値がなかったときの表示の仕方や、デフォルト値を表示するなど、今回学んだことを大いに活用した。&lt;/p&gt;

&lt;p&gt;もう、Optinal型なんて怖くない＞ｍ＜！&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4815604061/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/416ZqsPCCjL._SX393_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;SwiftUI 徹底入門&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;金田 浩明&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;
</description>
        </item>
        
        <item>
            <title>投資対象としてのスニーカー👟</title>
            <link>https://t32k.me/mol/log/rstrs/</link>
            <pubDate>Mon, 07 Dec 2020 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/rstrs/</guid>
            <description>

&lt;p&gt;皆さん、お金儲け好きですか？僕は好きです。最近、投資対象としてのスニーカーについて話したので、ここでもシェアするぞ。&lt;/p&gt;

&lt;h2 id=&#34;目次&#34;&gt;目次&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;　1. 投資対象としてのスニーカー&lt;br /&gt;
        　　- ダブルネーム&lt;br /&gt;
        　　- カラーリング&lt;br /&gt;
        　　- 発売年&lt;br /&gt;
    　2. リスクと重要事項について&lt;br /&gt;
        　　- 復刻発売による価値の希薄化&lt;br /&gt;
        　　- 保管スペースの確保&lt;br /&gt;
        　　- 劣化の可能性&lt;br /&gt;
        　　- 偽物の流通&lt;br /&gt;
        　　- 抽選販売が当たらない&lt;br /&gt;
    　3. 代わりのご提案&lt;br /&gt;
        　　- Restore&lt;br /&gt;
        　　- Custom Painting&lt;br /&gt;
        　　- YouTube&lt;br /&gt;
    　4. まとめ&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ちなみに、私の投資経験の始まりは2017年ごろの仮想通貨で大損こきました。2020年、現在もビットコイン価格があがってきており、また仮想通貨ブームが再燃しそうですが、私の持っているのはイーサリアム系コインで今のところ恩恵を享受できてません😇&lt;/p&gt;

&lt;p&gt;仮想通貨は投資というか投機なので、もうちょっと真っ当な投資をしようと思い、今度は国内株式に手を出しました。というのも仮想通貨を始めて指値や板寄せなどといった用語を覚えたので、ちゃんと堅実に儲けようと思ったのですが、投資した株は昨今のコロナのせいで、マイナス何十％となり、仮想通貨並みのボラティリティになってます😇&lt;/p&gt;

&lt;p&gt;この際、自分が本当に好きなものに投資しようと思いました。そして今回紹介するのが、こちら！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/00.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;空飛ぶバスケットボーラー・マイケルジョーダン！ではなく彼の履いてるバッシュ・スニーカーについてです。ここでは特にNIKE・JORDAN BRANDのスニーカーについて解説します。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;スニーカーが流行しだしたのは、1970年代後期のことである。それまで若者は、キャンバス地や堅い革のスポーツシューズを好んで履いていたが、一気にスニーカー一色となった。きっかけとしては、アメリカでNBAが1976年にABAから4チームを迎え入れ、それを機に各靴メーカーが大々的にマーケットを広げたことが挙げられる。1980年代、NBAの一大スターマイケル・ジョーダン (Michael Jordan) のスポンサーであったナイキが、彼をスポークスマンとしてバスケットシューズの新ラインを発表・販売。当時のエア・ジョーダン (Air Jordan) は、100ドルという当時では高価であったにも拘らず、アメリカの販売店では長蛇の列ができ飛ぶ様に売れた。そのコレクション性から、後に日本ではコレクターの間で何万、何十万という値段が付いた。 - &lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%8B%E3%83%BC%E3%82%AB%E3%83%BC&#34;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;は？スニーカーだって？？とお思いのことでしょう。&lt;a href=&#34;https://stockx.com/ja-jp/&#34;&gt;StockX&lt;/a&gt;の創業者ジョシュ・ルーパーは、スニーカー市場がいかに巨大で規制がないか、話しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/01.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ted.com/talks/josh_luber_why_sneakers_are_a_great_investment?language=ja&#34;&gt;知られざるスニーカー・マーケットとそれが重要である理由 | TED Talk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;では、実際に彼の作ったサービスStockXの画面を見てみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/02.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-1-retro-high-dior?country=JP&#34;&gt;Jordan 1 Retro High Dior - CN8607-002&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これはエアジョーダン1とハイブランドDiorのコラボモデルで、定価自体が25万円ほどするのですが、このときは100万円に近い値段がついています。そして株式のように買値と売値があり、これまでの売買履歴も確認できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/03.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;またStockXで購入したスニーカーは自動的にポートフォリオに組み込まれ、どういった種類でどれくらい利益がでているのか、ひと目で見ることができます。&lt;/p&gt;

&lt;p&gt;またStockXでは個人間売買の仲介に入り鑑定作業をするので、ホンモノであると保証されています。これをCtoCのフリマアプリで買ったとすると、パッと見、靴の相場もわからないので、相場より割高で買ってしまうこともあります。また送られてきたものが、ニセモノという危険性もあります。&lt;/p&gt;

&lt;p&gt;つまり、StockXのようなサービスがあることで高額なスニーカーであろうとも公正な取引ができるということです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/04.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://snkrdunk.com/&#34;&gt;スニーカーダンク(スニダン) | 人気の新作スニーカーを安心売買&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://monokabu.com/&#34;&gt;モノカブ｜スニーカー・ストリートウェアを安心売買&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;StockXのようなサービスは国内にも存在しています。最近TVCMでも見かけるスニーカーダンクと、スニーカーだけでなくストリートウェアも取り扱うモノカブなどがあります。&lt;/p&gt;

&lt;p&gt;スニーカーは儲かりそうだ、投資商品として購入する環境も整っている。では、どういったものが高い利益を出すスニーカーなんでしょうか？&lt;/p&gt;

&lt;h2 id=&#34;ダブルネーム&#34;&gt;ダブルネーム&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/05.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-1-retro-high-travis-scott&#34;&gt;Jordan 1 Retro High Travis Scott - CD4487-100&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-4-retro-travis-scott-cactus-jack?country=JP&#34;&gt;Jordan 4 Retro Travis Scott Cactus Jack - 308497-406&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-6-retro-travis-scott&#34;&gt;Jordan 6 Retro Travis Scott - CN1084-200&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これはアメリカ人ラッパーのトラヴィス・スコットとエアジョーダンのコラボモデルですが、ジョーダンのシューズはだいたい定価が2万円前後なので、これらのモデルは10万円以上しています。AJ1はナイキのスウォッシュが反転してるのがポイントですね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/06.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-1-retro-high-off-white-chicago&#34;&gt;Jordan 1 Retro High Off-White Chicago - AA3834-101&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-4-retro-off-white-sail-w&#34;&gt;Jordan 4 Retro Off-White Sail (W) - CV9388-100&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-5-retro-off-white-black&#34;&gt;Jordan 5 Retro Off-White Black - CT8480-001&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次はルイ・ヴィトンのデザイナーでありヴァージル・アブロー自身のブランドOff-Whiteとジョーダンのコラボモデルです。ダブルクオーテーションで囲んだ単語（&amp;rdquo;AIR&amp;rdquo;）などが特徴的ですね。Off-WhiteのAJ1は人気のシカゴカラーということもあり、50万円くらい値段になっています🚀🚀🚀&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/07.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-1-retro-high-union-los-angeles-blue-toe&#34;&gt;Jordan 1 Retro High Union Los Angeles Blue Toe - BV1300-146&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-4-retro-union-guava-ice&#34;&gt;Jordan 4 Retro Union Guava Ice - DC9533-800&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-delta-mid-union-off-noir&#34;&gt;Jordan Delta Mid Union Off Noir - DA1951-001&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;続いて、ロサンゼルスのセレクトショップ・UNIONとのコラボモデル。これもおされセレクトショップらしいカラーリングで人気のモデルとなっています。&lt;/p&gt;

&lt;p&gt;まぁこういったモデルは極端に供給量が少ない上に、もともとの購買層のジョーダンファンにプラス、トラヴィス・スコットファンや、Off-Whiteファンなどの需要が増えるので、需要と供給の関係から価格が跳ね上がります。買えたらラッキーですが、まず買えないと思っていたほうがよさそう。&lt;/p&gt;

&lt;h2 id=&#34;カラーリング&#34;&gt;カラーリング&lt;/h2&gt;

&lt;p&gt;エアジョーダンはマイケル・ジョーダンのシグネチャーモデルなので、当然、彼が在籍していたシカゴ・ブルズに関係する色が重要になってきます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/08.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/jordan-1-retro-chicago-2015&#34;&gt;Jordan 1 Retro Chicago (2015) - 555088-101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こちらはエアジョーダン１のシカゴカラー、赤・白・黒のホーム用のゲームシャツの色ですね。エアジョーダンシリーズの王道中の王道といった感じで、エアジョーダンといえばこれを思い浮かべる人も多いはずです。なんのダブルネームでもないですが、20万近い値段になっています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/09.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-11-retro-playoffs-2019&#34;&gt;Jordan 11 Retro Playoffs Bred (2019) - 378037-061&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;赤・黒の配色でブレッドと呼ばれるカラーリングです。ブラック・レッドなのでブレッドでロード用のゲームシャツのカラーリングです。こちらも人気の高いカラーリングです。&lt;/p&gt;

&lt;h2 id=&#34;発売年&#34;&gt;発売年&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/10.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-4-retro-pure-money-2017&#34;&gt;Jordan 4 Retro Pure Money (2017) - 308497-100&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こちらはAJ4 Pure Moneyの売買履歴なんですが、これは2017年に限定発売されたのですが、売れ残り、最終的にセールプライスでも売られていた一足で、誰でも買おうと思えば買える一足でした。&lt;/p&gt;

&lt;p&gt;価格の推移を見てみると、基本的に発売当初は転売屋が値を吊り上げて出品しますし、一刻でも早く欲しいAJファンが飛びつく形になります（一番左の矢印）。しかし、冷静になると、まぁ定価で買えますし、売れない。焦った転売屋は在庫を持ちたくないので定価割れで売りに出すことになります（二番目の矢印）。その後、じわじわ値があがって、2,3年後には利益率100~200％になります。人気のあるジョーダンシリーズで奇抜ではないカラーリングのジョーダンであれば、だいたいこういった値動きになっているような気がします（肌感覚）。&lt;/p&gt;

&lt;p&gt;長期間ホールドで必ず上がる理由は、StockXで扱うシューズは新品でなければならないからです。なので、一回でも履いた状態になると売り物になりません。僕もそうですが、スニーカーヘッズは履きたいわけですよ。発売当初は十分な供給量だったものも、どんどんとみんなが履くので、市場全体の新品の在庫数は減るわけですが、需要としては、発売当時、学生でお金がなかったとか、たまたまスニーカーデビューしたのが遅かったとかで、こんなモデルが発売してたのかと後になって購入層になるケースもあります。&lt;/p&gt;

&lt;p&gt;よって供給は増えることはないが需要が増えるので、徐々に価格が上がっていくのです。&lt;/p&gt;

&lt;h1 id=&#34;リスクと重要事項について&#34;&gt;リスクと重要事項について&lt;/h1&gt;

&lt;p&gt;スニーカーは必ず儲かる商品だというの分かったような気がしますが、世の中リターンがあればリスクもあります。ここではスニーカー投資を始めるにあって注意しなければならないことを解説します。&lt;/p&gt;

&lt;h2 id=&#34;復刻版発売による価値の希薄化&#34;&gt;復刻版発売による価値の希薄化&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/11.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://stockx.com/ja-jp/search/sneakers?s=Air%20More%20Uptempo%20Olympic&#34;&gt;Air More Uptempo Olympicの検索結果&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先ほど、需要は増えることはあっても供給が増えることはないと言いましたが、復刻版発売という形で、供給量が増えることがあります。&lt;/p&gt;

&lt;p&gt;こちらは、ジョーダンシリーズではありませんが、エアモアアップテンポのオリンピックカラーで人気のあるモデルですが、オリンピックイヤーの4年ごとに復刻版が出ています。今年（2020年）も出ました。定価が19,250円で供給量が十分ある状態なので、たいしてプレ値がついてない感じになっています。&lt;/p&gt;

&lt;p&gt;だいたい人気なモデルの復刻版リリースは5~10年の間隔になっているような気がしますが、中には二十年ぶりといったものもありますから、これに関してはNIKE社がコントロールしてるとしか言えません。&lt;/p&gt;

&lt;p&gt;エアマックス95のイエローグラデが人気爆発したとき「エアマックス狩り」という事件が起こったように、NIKE社はあまりにも値が高騰するのを嫌ってるためか、2~3年間隔で復刻版がリリースされているモデルもあります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/12.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/jordan-3-retro-black-cement-2011&#34;&gt;Jordan 3 Retro Black Cement (2011) - 136064-010&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-3-retro-black-cement-2018&#34;&gt;Jordan 3 Retro Black Cement (2018) - 854262-001&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;必ずしも、復刻イコール供給量が増えるといったこともないケースがあります。AJ3のブラックセメントですが、2011年復刻と2018年の復刻モデルがありますが、発売年からいって2011年モデルのほうが高い気がしますが、2018年モデルのほうが人気があります。&lt;/p&gt;

&lt;p&gt;これは、アウトソールとヒールのロゴがNIKEかJORDANの違いがあります。今でこそジョーダンはNIKE社から独立してJORDAN BRANDとして別会社になっています。しかし、マイケル・ジョーダンが現役で活躍していた頃はあくまで、NIKE社の１ブランドラインでしかなかったので、当時はNIKEロゴが使われていました。&lt;strong&gt;オリジナルに近いか？&lt;/strong&gt; という観点からいえば、発売年は新しいですがNIKEロゴの2018年復刻がより人気が高いといったことがあります。&lt;/p&gt;

&lt;p&gt;その他にもタグがNIKEなのかJORDANなのか、箱がNIKEなのかJORDANなのかといった確認ポイントもあるので、NIKE社のうまいところはそういったところを微妙に変えてきて復刻版をリリースするので、コレクター心をうまくくすぐっているのです。&lt;/p&gt;

&lt;h2 id=&#34;保管スペースの確保&#34;&gt;保管スペースの確保&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/13.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;株式のようにスニーカーを取り扱っていると言いましたが、残念ながらスニーカーは株式のように電子取引はできません。なのでスニーカーを購入すれば、ご自宅にスニーカーが入ったダンボールが届きます（物理）。&lt;/p&gt;

&lt;p&gt;上記の写真は私の自宅ですが、最近引っ越しました。というのも、以前は1K7畳にも満たない部屋に住んでたのですが、スニーカーが増えすぎて、このままではスニーカーに埋もれてしまうということで、スニーカー部屋を作るために引っ越しました😇&lt;/p&gt;

&lt;p&gt;StockXでは新品しか取り扱わないと言いましたが、箱もちゃんとした状態で保存していないと、鑑定を通過しません。なので、スペースはとりますが、箱も大事に保管しなければならないのです。&lt;/p&gt;

&lt;p&gt;現物を取り扱うということで、アービトラージ（取引所間取引）やデイトレーディング（頻繁な取引）はおすすめできないのです。なぜならサービス手数料以外にも配送料がかかります。米国のStockXで購入すると2800円もの配送料プラス関税もかかってきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;手数料（鑑定料）＝ 購入価格の3~4%&lt;/li&gt;
&lt;li&gt;配送料 ＝ 国内：1,000円、海外：2,800円&lt;/li&gt;
&lt;li&gt;関税(海外取引所）＝ 神のみぞ知る…(3000円~？)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なので、じっと長期ホールドするのです。。。&lt;/p&gt;

&lt;h2 id=&#34;劣化の可能性&#34;&gt;劣化の可能性&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/14.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;長期ホールドと言いましたが、長期すぎるのも考えものです。左は89年のオリジナルのAJ4ですが、ミッドソールがボロボロになっています。これはポリウレタン系のミッドソールは空気中の水分と反応して加水分解がおこり、このような状態になってしまうのです。&lt;/p&gt;

&lt;p&gt;30年前のスニーカーなんだから当たり前じゃないかと思いますが、高温多湿の日本で雑に保管していると、ほんの数年でこのような状態になることもあります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/15.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;なので保管する際は、左のようにジップロックなどに乾燥剤を入れた状態で保管するか、右のようにスニーカーフィルムで密閉して乾燥剤を入れるかしましょう。&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07RL5SRPT/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/71-IAHF0PIL._AC_SL1500_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;ジップロック スタイル ストレージバッグ XL 5枚&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;ブランド: ジップロック&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07FPGFYYT/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/61fRfhMg-SL._AC_UL1280_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;[KicksWrap] 10枚入SET ５足分 キックスラップ スニーカー観賞用フィルム 国内正規品 新品 未開封 レアスニーカー保護フィルム&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;ブランド: KicksWrap&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0065C8I2O/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/41kiLja326L._AC_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;シリカゲル乾燥剤「なんでも除湿シリカゲル」20g×20個入り&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;ブランド: 坂本石灰工業所&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;h2 id=&#34;偽物の流通&#34;&gt;偽物の流通&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/16.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.fakebusters-iva.com/ja&#34;&gt;FAKE BUSTERS｜スニーカーやアパレルの真贋鑑定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;StockXやモノカブのような鑑定作業が含まれるサービスを使えば問題ないのですが、フリマアプリや、プレ値で売っているスニーカーショップなどで購入すると偽物を掴まされる可能性があります。&lt;/p&gt;

&lt;p&gt;たまにフリマアプリで評価ゼロのユーザーがトラヴィス・スコットのエアジョーダンを定価で売りに出しているのを見かけると、まぁ偽物だよねって分かりやすい例です。今回買ったのはYahooショッピングのとあるショップで、プレ値の相場より若干安い値段設定だったので購入しましたが、不安だったのでフェイクバスターズという鑑定サービスを使い鑑定してもらったら、案の定、フェイク認定でした。&lt;/p&gt;

&lt;p&gt;悔しかったので、この後スニーカーダンクで本物を購入して、見比べてみましたが、パッと見ほぼ同じ、いわゆるスーパーコピー品と呼ばれるものです。近年、コピー品の出来もよくなってきており、素人には違いが分からないですから、やはり鑑定ありのサイトで購入したほうが無難でしょう。&lt;/p&gt;

&lt;h2 id=&#34;抽選販売が当たらない&#34;&gt;抽選販売が当たらない&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/17.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nike.com/jp/launch?s=upcoming&#34;&gt;近日発売予定の商品。Nike SNKRS JP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後の重要事項で、これが一番大事なのですが、エアジョーダン欲しいと思った方がNIKEの店舗に行っても、ここで紹介したようなエアジョーダンシリーズは売っていません。週末のSNKRSというサイト・アプリで限定抽選販売されるのですが、全く当たりません。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/18.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;NBA選手が自身のシグネチャーモデルのバッシュ販売の抽選に外れたとかゆうニュースも見かけました。このような抽選販売は&lt;a href=&#34;https://launch.atmos-tokyo.com/category/upcoming/&#34;&gt;atmos&lt;/a&gt;などの大手のスニーカーショップでも行われているので、いっぱい参加して抽選口数を増やすしかないです&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;代わりのご提案&#34;&gt;代わりのご提案&lt;/h1&gt;

&lt;h2 id=&#34;ダブルネーム-中古購入-修復&#34;&gt;ダブルネーム =&amp;gt; 中古購入 + 修復&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/jordan-5-retro-supreme-white&#34;&gt;Jordan 5 Retro Supreme White - 824371-101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Fsy2DucQzaM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;上記はSupremeとエアジョーダン5のコラボで、新品だと10万くらいで取り引きされているものです。新品ではとてもとても買えないので中古のボロボロだったものを3万円くらいで購入しました。&lt;/p&gt;

&lt;p&gt;それを綺麗にクリーニングし、ペイントがかすれているところをリペイントし、黄ばんだクリアソールをとることで、新品に近い状態までもっていけます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/19.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goat.com/sneakers?condition=goat_clean&#34;&gt;Shop All Sneakers | GOAT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;StockXでは新品しか取り扱わないと言いましたが、StockXと似たようなサービスのGOATでは、新品のほかにも中古スニーカーも取り扱っています。中古の履きつぶしたスニーカーをGOATに送ることで、GOATのクリーニングスタッフが綺麗にし、ちゃんとした商品写真も撮って出品してくれます。売れたらその分の手数料を払うといったビジネスモデルです。&lt;/p&gt;

&lt;h2 id=&#34;カラーリング-カスタムペイント&#34;&gt;カラーリング =&amp;gt; カスタムペイント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-1-low-gym-red-white&#34;&gt;Jordan 1 Low Gym Red White - 553558-611&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/ZI1_28NG37E&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;これはエアジョーダン1 LOWのジムレッドですが、これ自体は限定発売ということはなく、ついこないだまで普通に買えるなんのへんてつもないシューズです。&lt;/p&gt;

&lt;p&gt;この赤色のスウォッシュ部分は黒くすれば、ほぼ人気のあるシカゴカラーと同じような感じになりますので、マスキングをし、&lt;a href=&#34;https://atrandom.shop/&#34;&gt;アンジェラスペイント&lt;/a&gt;というスニーカー専用の塗料を使い、シューレースを黒色に変えることで、シカゴカラーになりました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/20.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;私は単純にカラーリングを変えただけですが、スニーカーにグラフィティなペイントをしてくれるサービスもあります。真っ白なエアフォース１にペイントしてくれるのですが、これは靴代は含まず、ペイント代で600~800ドルくらいしますね。&lt;/p&gt;

&lt;h2 id=&#34;youtube-branding&#34;&gt;YouTube + Branding&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/21.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCA1U45AZ1PRsPp4nZPhh2Tg&#34;&gt;RESHOEVN8R - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://reshoevn8r.com/&#34;&gt;Reshoevn8r | Premium Shoe Care Products | Ultimate Sneaker Cleaner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とはいえ、スニーカークリーニングもペイントも非常に労力のかかる作業です。もっと楽して儲けたいと思うあなたのために、 YouTubeでブランディングするのはどうでしょう。&lt;/p&gt;

&lt;p&gt;リシューブネイターはスニーカーのクリーニング・修復などの動画をYouTubeにアップロードしています。チャンネル登録者数は100万人を超え、YouTubeだけの広告収入だけでも結構な額でしょうが、彼らは自社のスニーカーケア用品も販売しています。リシューブネイターのブラシだったり洗剤だったり、パッケージもおされです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCrBbduvKVMtnwxnN-UNCwUg&#34;&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/22.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCrBbduvKVMtnwxnN-UNCwUg&#34;&gt;RSTRS - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というわけで、自分もYouTube始めてみました。今のところ買ったスニーカーの紹介とかが多いですが、クリーニング動画・カスタムペイント動画も随時アップロードしていきますので、ご登録よろしくおねがいしますm(_ _)m&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;スニーカービジネスはけっこう色々ある&lt;/li&gt;
&lt;li&gt;SNKRS抽選はとりあえず参加（毎週）&lt;/li&gt;
&lt;li&gt;t32kのシューケアブランドに投資だ！&lt;br /&gt;
(いつかクラウドファンディングする)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ということで、お金お金と言いましたが、下記にあげたような動画を見ると、マイケル・ジョーダンすげーな！かっこいいな！と思いますし、もうおっさんですが彼のようになりたいと思い、彼のスニーカーを履きたいと思うので、やっぱりスニーカーが大好きです🥰&lt;/p&gt;

&lt;p&gt;みなさんも素敵なスニーカーライフを👟&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/null/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://m.media-amazon.com/images/I/41XcckqyezL.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;東京スニーカー史 (立東舎)&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;小澤 匡行 (著) &lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;h3 id=&#34;スニーカーが好きになるnetflix&#34;&gt;スニーカーが好きになるNETFLIX&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netflix.com/title/80203144&#34;&gt;マイケル・ジョーダン ラストダンス&lt;/a&gt;&lt;br /&gt;
MJのプレーヤー人生をおさらい（足元にも注目）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netflix.com/title/80057883&#34;&gt;アート・オブ・デザイン – ティンカー・ハットフィールド&lt;/a&gt;&lt;br /&gt;
AJシリーズのシューズデザイナーのドキュメンタリー（season１）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netflix.com/title/81249713&#34;&gt;オレたちスニーカーヘッズ&lt;/a&gt;&lt;br /&gt;
アメリカとスニーカー文化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netflix.com/title/80223149&#34;&gt;ビンス・カーター: カナダにバスケをもたらした男&lt;/a&gt;&lt;br /&gt;
バスケとポップカルチャーとの密接な関係&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
        <item>
            <title>オブジェクト指向UIデザイン</title>
            <link>https://t32k.me/mol/log/978-4297113513-do-not-mode-me-in/</link>
            <pubDate>Fri, 20 Nov 2020 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4297113513-do-not-mode-me-in/</guid>
            <description>&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4297113511/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/41ncKIL-yRL._SX350_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;オブジェクト指向UIデザイン──使いやすいソフトウェアの原理 (WEB+DB PRESS plusシリーズ)&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;上野 学&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;いわゆる、銀の弾丸を読んだ。&lt;/p&gt;

&lt;p&gt;オブジェクト指向UIとはまず対象となるオブジェクトを選択して、それに対するアクションを行う。例えば、デスクトップで書類ファイルを削除したければ、マウスなどで対象の書類ファイルをクリックし、「削除する」などのメニューを選ぶ。つまり、「名詞 -&amp;gt; 動詞」の流れだ。これに対しタスク志向UIというのは、例えば、CLIでdeleteコマンドみたいなものをまず打ち込み、次に対象となる書類ファイルのパスを入力するといった「動詞 -&amp;gt; 名詞」の流れだ。&lt;/p&gt;

&lt;p&gt;CLIアプリケーションなら理解できるが、GUIのアプリケーションにおいてこういったものをあまり目にしたことがないような気がする。&lt;/p&gt;

&lt;p&gt;タスク志向UI（モード）を作らざるを得ない状況として、次のような場合だという。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;タスクによって処理対象となるオブジェクト集合が異なる場合。この場合、タスク選択はアプリケーションの選択と同じような位置づけとなる。&lt;/li&gt;
&lt;li&gt;タスクによって、ユーザーに提示すべきオブジェクトの属性やアクションが大きく異る場合。この場合、先にオブジェクトを提示しようとすると、情報量が多くなりすぎてUIに収まりきらなくなる&lt;/li&gt;
&lt;li&gt;オブジェクトが（ユーザーのメンタルモデルにおいて）意識されてない、あるいはオブジェクトがひとつだけで選択の必要がなく、アクションの引数としての入力がタスクの大部分である場合。たとえばATM&lt;/li&gt;
&lt;li&gt;ユーザーの創造的な作業を禁止し、一定の順序で限定的な操作をさせたい場合&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いわゆる業務アプリケーションで多いという。確かに、C向けアプリケーションを作ってきた経験が多い自分にとっては、あまり悩んだ記憶がない。だからといって、気にしなくてよい問題かというそうでもない。&lt;/p&gt;

&lt;p&gt;タスク志向は「動詞 -&amp;gt; 名詞」の流れと説明したが、その動詞を選択すると&lt;strong&gt;モード&lt;/strong&gt;になる。ビデオカメラで「録画する」ならば、そのときは録画モードで、録画に関すること以外、システムは受け付けないだろう。これはユーザーからコントロール権を奪う行為であり、あまりよろしくない。&lt;/p&gt;

&lt;p&gt;GUIでモーダルな代表例としてはモーダルダイアログであろう。モーダルダイアログと言われると、たしかになにも考えず使ってる気がする&amp;hellip;&lt;/p&gt;

&lt;p&gt;モードレスにする方法としては以下のようなことがある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「名詞 -&amp;gt; 動詞」の操作をひとつのジェスチャで行う&lt;/li&gt;
&lt;li&gt;パラメータを保存してオブジェクト化する&lt;/li&gt;
&lt;li&gt;アクションを分割する&lt;/li&gt;
&lt;li&gt;サブミットボタンをなくす&lt;/li&gt;
&lt;li&gt;モーダルダイアログなくす&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;昨今、React/Vue/AngularなどのMVVMフレームワークを使用していると、状態を変更してUIにすぐに反映することができるので、「サブミットボタンをなくす」といったことができる。以前の記事・&lt;a href=&#34;https://t32k.me/mol/mol/log/microinteractions/&#34;&gt;マイクロインタラクション事始め以前&lt;/a&gt;でもちょっと解説したが、やはりモードレスを意識してないと、惰性的に「モーダルダイアログ展開して〜」といった実装をしがちである。気をつけないと。&lt;/p&gt;

&lt;p&gt;全体的に、toC向けのサービスを作っているデザイナーであれば、まぁそんな画面デザインにはならないだろうと思うが、なぜそうなのかと言われるとうまく言語化できないので、そういった意味で明快に解説している本書は一読の価値があると思う。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>SwiftUIでのスタイルのまとめかたとか</title>
            <link>https://t32k.me/mol/log/styles-swiftui/</link>
            <pubDate>Thu, 08 Oct 2020 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/styles-swiftui/</guid>
            <description>

&lt;p&gt;CSSだとスタイルはクラスでまとめられ、BEMなり、なんなりのクラスの命名規則で管理する。SwiftUIだとスタイルはViewに繋げられたモディファイアであり、これがダラダラと記述されているのは、見通しが悪い。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1008/00.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;)
            .font(.largeTitle)
            .foregroundColor(Color(.systemRed))
            .padding()
            .frame(maxWidth: .infinity, alignment: .leading)
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;カスタムモディファイア&#34;&gt;カスタムモディファイア&lt;/h1&gt;

&lt;p&gt;modifier というまんまのものがある。上記のコードは LargeText という ViewModifier 定義すると、.modifier(LargeText(color: Color(.systemRed))) だけを View に繋げれば良い。また引数を持つことができるので、色の部分を抜き出して、青色のテキストを表示したり、緑色のテキストを表示できるといった具合だ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1008/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;)
            .modifier(LargeText(color: Color(.systemRed)))
    }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LargeText&lt;/span&gt;: ViewModifier {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; color: Color
    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;(content: Content) -&amp;gt; some View {
        content
            .font(.largeTitle)
            .foregroundColor(color)
            .padding()
            .frame(maxWidth: .infinity, alignment: .leading)
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;カスタムスタイル&#34;&gt;カスタムスタイル&lt;/h1&gt;

&lt;p&gt;modifier と似ているが、特定のコンポーネントにはカスタムスタイルを定義する方法が提供されている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        Button(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ボタン&amp;#34;&lt;/span&gt;) { print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;タップ&amp;#34;&lt;/span&gt;) }
            .buttonStyle(MyButtonStyle())
    }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyButtonStyle&lt;/span&gt;: ButtonStyle {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;makeBody&lt;/span&gt;(configuration: &lt;span style=&#34;color:#66d9ef&#34;&gt;Self&lt;/span&gt;.Configuration) -&amp;gt; some View {
        configuration.label
            .padding()
            .foregroundColor(Color(.systemBlue))
            .overlay(
                RoundedRectangle(cornerRadius: &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
                    .stroke(Color(.systemBlue), lineWidth: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            )
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Button の場合は ButtonStyle がある。一見すると別に modifier でも問題じゃないかと思うが、ミソは&lt;code&gt;configuration&lt;/code&gt;の部分だ。 configuration.isPressedで、押されているのか、いないのかの状態がわかるので、ボタン押下時のスタイルも定義することができる。同様に、トグルにも ToggleStyle というものが提供されており、configuration.isOn でトグルの on/off 状態がわかるので、on/off でスタイルを変更することができる。ということで、ButtonやToggleのスタイルをまとめたいときはカスタムスタイルでまとめる。&lt;/p&gt;

&lt;h1 id=&#34;構造体でまとめる&#34;&gt;構造体でまとめる&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1008/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        List {
            HStack {
                Image(systemName: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;person.crop.circle.fill&amp;#34;&lt;/span&gt;)
                    .resizable()
                    .frame(width: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, height: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)
                    .padding()
                VStack(alignment: .leading) {
                    Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hoge Yamada&amp;#34;&lt;/span&gt;).font(.callout).fontWeight(.bold)
                    Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&amp;#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.&amp;#34;&lt;/span&gt;).lineLimit(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;).font(.caption)
                }
            }
            HStack {
                Image(systemName: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;person.crop.circle.fill&amp;#34;&lt;/span&gt;)
                    .resizable()
                    .frame(width: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, height: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)
                    .padding()
                VStack(alignment: .leading) {
                    Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fuga Yamada&amp;#34;&lt;/span&gt;).font(.callout).fontWeight(.bold)
                    Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&amp;#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.&amp;#34;&lt;/span&gt;).lineLimit(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;).font(.caption)
                }
            }
            HStack {
                Image(systemName: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;person.crop.circle.fill&amp;#34;&lt;/span&gt;)
                    .resizable()
                    .frame(width: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, height: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)
                    .padding()
                VStack(alignment: .leading) {
                    Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Piyo Yamada&amp;#34;&lt;/span&gt;).font(.callout).fontWeight(.bold)
                    Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&amp;#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.&amp;#34;&lt;/span&gt;).lineLimit(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;).font(.caption)
                }
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;受信メール一覧的なリストを作る場合、HStack でプロフ画像と文書を並べてとか一つ一つのリストアイテムを作っていく。まぁ愚直に書けば、上記みたいな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; friends = [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hoge Yamada&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fuga Yamada&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Piyo Yamada&amp;#34;&lt;/span&gt; ]
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        List {
            ForEach(friends, id: &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt;) { friend &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;
                ListItem(name: friend)
            }
        }
    }
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ListItem&lt;/span&gt;: View {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; name: String
        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
            HStack {
                Image(systemName: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;person.crop.circle.fill&amp;#34;&lt;/span&gt;)
                    .resizable()
                    .frame(width: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, height: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)
                    .padding()
                VStack(alignment: .leading) {
                    Text(name).font(.callout).fontWeight(.bold)
                    Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&amp;#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.&amp;#34;&lt;/span&gt;).lineLimit(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;).font(.caption)
                }
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HStack らへんを ListItem 構造体としてまとめるとこんな感じ。スタイルをまとめるというよりかは、ボタンなり、画像なりある程度の粒度をもったUIコンポーネントとしてまとめるといったことに近い。&lt;/p&gt;

&lt;p&gt;今作っているのは簡素な見た目のモックアプリなので、そこまでモディファイアをつなげるてスタイルを作り込んでいくことがないので、modifier はあんまり使わず、構造体でまとめて終わりって感じになっている。&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4815604061/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/416ZqsPCCjL._SX393_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;SwiftUI 徹底入門&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;金田 浩明&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;
</description>
        </item>
        
        <item>
            <title>SwiftUIでの色とか</title>
            <link>https://t32k.me/mol/log/color-swiftui/</link>
            <pubDate>Wed, 07 Oct 2020 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/color-swiftui/</guid>
            <description>&lt;p&gt;UIKitの&lt;code&gt;UIColor&lt;/code&gt;とSwiftUIの&lt;code&gt;Color&lt;/code&gt;は違うと気づいた最近。&lt;/p&gt;

&lt;p&gt;例えば、赤色を表示したいときは、SwiftUIでは &lt;code&gt;Color.red&lt;/code&gt; と書く。たまに&lt;code&gt;Color(.red)&lt;/code&gt; というのも見かけて、書き方の違いなんだろうか？と思ってたけど、全然違った。&lt;code&gt;Color(.red)&lt;/code&gt; は &lt;code&gt;Color(UIColor.red)&lt;/code&gt; の略した書き方で、&lt;code&gt;UIColor&lt;/code&gt; をSwiftUIの&lt;code&gt;Color&lt;/code&gt;として使う方法だった。&lt;/p&gt;

&lt;p&gt;ややこしいのは&lt;code&gt;Text(&amp;quot;hoge&amp;quot;).foregroundColor(.red)&lt;/code&gt;のようなケース。文字色を赤色にしたいとき、foregroundColorモディファイアは&lt;code&gt;Color&lt;/code&gt;が引数に来ると想定しているので、&lt;code&gt;foregroundColor(Color.red)&lt;/code&gt;と同じである。もし、UIColorの方の赤を指定したかったら、&lt;code&gt;foregroundColor(Color(.red))&lt;/code&gt;と書かなければならない。&lt;/p&gt;

&lt;p&gt;ちなみに、赤色としても微妙に違う。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1007/00.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        HStack {
            ZStack {
                Rectangle().foregroundColor(Color(.red))
                Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UIColor&amp;#34;&lt;/span&gt;).foregroundColor(.white)
            }
            ZStack {
                Rectangle().foregroundColor(Color.red)
                Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SwiftUI&amp;#39;s Color&amp;#34;&lt;/span&gt;).foregroundColor(.white)
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;どうして、気づくの時間がかかったかというと、今作成しているのはモックアプリでシステムカラーしか使ってなかったためである。つまり、&lt;code&gt;Color(.    systemRed)&lt;/code&gt;のような書き方で統一していたというか、システムカラーは&lt;code&gt;UIColor&lt;/code&gt;なので、そう書かざるをえなかった。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1007/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;システムカラーを使うと、ダークモードのときや、アクセシビリティモードのときに適切な色味に変換してくれるメリットがある。つまり、システムカラーさえ使っとけば、おーるおっけー。やったね 🤗&lt;/p&gt;

&lt;p&gt;気をつけなければならないのは、黒や白といったものである。コンポーネントの背景色を白色にしたいと思って、安易に &lt;code&gt;Color.white&lt;/code&gt; を使わない。当たり前だが&lt;code&gt;Color.white&lt;/code&gt; はダークモードのときも白色だがアプリ全体の背景色は黒色になる。そうしたとき、想定していない見た目になるかもしれな。そうゆうときは &lt;code&gt;Color(.systemBackground)&lt;/code&gt;を使うと良い。文字色も&lt;code&gt;Color(.label)&lt;/code&gt;を使うと、黒と白が反転して良い感じになる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1007/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;濃淡を使い分けたかったら、&lt;code&gt;SystemGray&lt;/code&gt;を使うと良い。&lt;/p&gt;

&lt;p&gt;CSSだけど、&lt;a href=&#34;https://t32k.me/mol/mol/log/dive-into-the-dark-side/&#34;&gt;このブログをダークモードに対応&lt;/a&gt;したとき、めんどくさかったんだよなと思い出した。そういう意味では、ダークモードだけでなくアクセシビリティモードのときのカラーセットもはじめから用意してくれているiOS様様である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/color/&#34;&gt;Color - Visual Design - iOS - Human Interface Guidelines - Apple Developer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4815604061/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/416ZqsPCCjL._SX393_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;SwiftUI 徹底入門&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;金田 浩明&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;
</description>
        </item>
        
        <item>
            <title>SwiftUIでの余白のとりかたとか</title>
            <link>https://t32k.me/mol/log/margin-padding-swiftui/</link>
            <pubDate>Thu, 01 Oct 2020 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/margin-padding-swiftui/</guid>
            <description>&lt;p&gt;Webレイアウトを組むにあたってMargin/Paddingは非常に重要だ。しかし、SwiftUIにおいてPaddingモディファイアはあるがMarginのそれはない。こんなの片腕をもがれた状態じゃないか！と思ったが、SwiftUIでは、どうやら勝手が違うようである。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1001/00.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        HStack(spacing: &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;) {
            Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;タグ１&amp;#34;&lt;/span&gt;)
                .padding()
                .background(Color.yellow)
            Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;タグ2&amp;#34;&lt;/span&gt;)
                .padding()
                .background(Color.blue)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のように、タグのようなものを横並びにしたいと思ったとき、Marginがないので、どこでタグ間の余白を調整すればよいのかと思っていた。とりあえず、親のHStackに&lt;code&gt;spacing&lt;/code&gt;プロパティを持つことができるので、ここでMarginの役割をもたせていた。&lt;/p&gt;

&lt;p&gt;あとから気づいたが、これは実にWeb的な考え方である。つまりCSSボックスモデルの呪縛からの脱却が必要だ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1001/01.png&#34; alt=&#34;&#34; /&gt;　&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Learn/CSS/Building_blocks/The_box_model&#34;&gt;ボックスモデル | MDN&lt;/a&gt;　より&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CSSボックスモデルとは上図のように、一番内側にコンテンツがあり次にPaddingとBorder、Marginと広がっていく。なので、一つのCSSセレクタにPadding/Border/Marginのプロパティは１回しか適用できない。この考えが私の頭にこびりついていたのだ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1001/02.png&#34; alt=&#34;&#34; /&gt;　&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;コンテンツ&amp;#34;&lt;/span&gt;)
            .padding()
            .background(Color.yellow)
            .padding()
            .border(Color.red, width: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            .padding()
            .padding()
            .border(Color.green, width: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            .padding()
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際のSwiftUIにそんなCSSボックスモデルのような制約はない。Paddingは何回使ってもいいし、Borderも何回でもかけることができる。Borderの次にPaddingを指定すれば、Webで言うMargin的な使い方もできる（青枠はデバッグ用のView表示領域）。&lt;/p&gt;

&lt;p&gt;ゆえにスタイリングのためにDIVを何個も入れ子にする必要はないのである。当初はMargin以上にDIV的なViewはないのかな？とよく思ったものであるが、そもそも最初からSwiftUIに必要なかったのである。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1001/03.png&#34; alt=&#34;&#34; /&gt;　&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        VStack {
            Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;コンテンツ&amp;#34;&lt;/span&gt;)
                .padding()
                .background(Color.yellow)
            Divider()
            Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;コンテンツ&amp;#34;&lt;/span&gt;)
                .background(Color.yellow)
                .padding()
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ただ、モディファイアの宣言順序は気をつける必要がある。コンテンツと余白に背景色を塗りたい場合は、最初にPaddingを指定しなければならなかったりとか。まぁ言い換えれば宣言順序どおりにSwiftUiはレンダリングしていくのだなと理解すればよい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1001/04.png&#34; alt=&#34;&#34; /&gt;　&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;コンテンツ&amp;#34;&lt;/span&gt;)
            .padding(.leading, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            .padding(.trailing, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
            .padding(.top, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
            .padding(.bottom, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
            .padding(.vertical, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
            .padding(.horizontal, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
            .padding(.all, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
            .padding(EdgeInsets(top: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, leading: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, bottom: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, trailing: &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))
            .background(Color.yellow)
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後にPaddingの値の指定のしかた一覧を書いて終わりにする。&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4815604061/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/416ZqsPCCjL._SX393_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;SwiftUI 徹底入門&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;金田 浩明&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;
</description>
        </item>
        
        <item>
            <title>SwiftUIでの文字寄せとか</title>
            <link>https://t32k.me/mol/log/text-align-swiftui/</link>
            <pubDate>Mon, 28 Sep 2020 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/text-align-swiftui/</guid>
            <description>&lt;p&gt;最近、SwiftUIデビューをした。太古の昔にTitanium MobileでiOSアプリを作ったことはあるが、基本Web畑で育ってきたt32kにとっては、iOSというかSwiftというかSwiftUIでのユーザーインターフェイス作成は、まるで外国での生活のようで、いろいろカルチャーギャップを感じる。そうゆうことを書きたい。&lt;/p&gt;

&lt;p&gt;まず初めに、文字寄せだが、テキストを左寄せ・右寄せにしたいときどうすればよいんだろうと思った。Xcodeでプロジェクトを作成すると&lt;code&gt;Hello World!&lt;/code&gt;の文字列を表示するボイラープレートが用意されている。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/0928/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;この文字列は上下・左右・真ん中に表示されている。これを左寄せにしたい。Webでいう、&lt;code&gt;text-align: left&lt;/code&gt;は、SwiftUIではどうするんだろうと私は考える。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/0928/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;)
            .frame(alignment: .leading)
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;frame&lt;/code&gt;モディファイアで&lt;code&gt;aligment&lt;/code&gt;というプロパティがあるのでそれに&lt;code&gt;.leading&lt;/code&gt;２セットすればよいらしい。&lt;/p&gt;

&lt;p&gt;なるほど。動かない。&lt;/p&gt;

&lt;p&gt;それもそのはずだ、Textビューのサイズ（青枠）を見ればわかる。文字でいっぱいいっぱいなので、どちらか片方に寄せれないっぽい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/0928/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;)
            .frame(maxWidth: .infinity, alignment: .leading)
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Frameのサイズを画面いっぱいにひろげてみると、なるほどな、左に寄せることができた。ちなみに右寄せの場合は&lt;code&gt;.trailing&lt;/code&gt;だ。&lt;/p&gt;

&lt;p&gt;またStackOveflowでこうゆう回答も見かけた。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        VStack {
            HStack {
                Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;)
                Spacer()
            }
            HStack {
                Spacer()
                Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;)
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Spacer()&lt;/code&gt;使うと楽だぜヒャッハーという。これだと&lt;code&gt;Spacer()&lt;/code&gt;が目一杯広がるので、frameのwidthを明示的に指定しなくてもいいし楽っぽい。&lt;/p&gt;

&lt;p&gt;でもSpacerというものWebでは邪道と言われ続けたスペーサーGIFのようなものと感じるので、あまり頼りすぎるのではよくないのではないかと思った。&lt;code&gt;alignment&lt;/code&gt;で明示的に文字寄せを表現しているのは意味的に正しいと思う。&lt;/p&gt;

&lt;p&gt;てか、そもそもなんで &lt;code&gt;text-align:left/right&lt;/code&gt; を &lt;code&gt;.leading/.trailing&lt;/code&gt; というのか考える必要がある。iOSはアラビア語圏などにも対応している。つまり右から左へ読む文化だ。つまり&lt;code&gt;.leading&lt;/code&gt;と指定した文字寄せは日本語圏などは左になるが、アラビア語圏などでは右に配置されるので、&lt;strong&gt;先頭&lt;/strong&gt; が変わるから&lt;code&gt;left/right&lt;/code&gt;という名前なんだと理解した。なるほど、多言語文化対応だ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView_Previews&lt;/span&gt;: PreviewProvider {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; previews: some View {
      ContentView().environment(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;.layoutDirection, .rightToLeft)
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というわけで、環境変数レイアウト方向にRTLにセットしてみると、&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/0928/04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        VStack {
            Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, alignment　左&amp;#34;&lt;/span&gt;)
                .frame(maxWidth: .infinity, alignment: .leading)
            Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, alignment　右&amp;#34;&lt;/span&gt;)
                .frame(maxWidth: .infinity, alignment: .trailing)
            
            HStack {
                Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, spacer 左&amp;#34;&lt;/span&gt;)
                Spacer()
            }
            HStack {
                Spacer()
                Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, spacer 右&amp;#34;&lt;/span&gt;)
            }
            
            HStack {
                Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;左&amp;#34;&lt;/span&gt;)
                Spacer()
                Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;右&amp;#34;&lt;/span&gt;)
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;alignment&lt;/code&gt;で指定した文字寄せは予想通り、反対になっている。予想外だったのは&lt;code&gt;Spacer()&lt;/code&gt;で文字寄せしたコードも反対になっている点だ。レイアウト方向にRTLになると&lt;code&gt;HStack&lt;/code&gt;(横方向に並べるやつ)の並びも反転するのか。。。これは頭がよいのか、おせっかいなのかよくわからないけど、注意する必要がある。&lt;/p&gt;

&lt;p&gt;まぁ、そんな感じで文字寄せひとつとってもいろいろ発見があるなーと思いました（こなみかん）&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4815604061/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/416ZqsPCCjL._SX393_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;SwiftUI 徹底入門&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;金田 浩明&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;
</description>
        </item>
        
        <item>
            <title>Wahoo KICKR&#39;18 スマートトレーナー</title>
            <link>https://t32k.me/mol/log/wahoo-kickr-2018/</link>
            <pubDate>Mon, 09 Mar 2020 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/wahoo-kickr-2018/</guid>
            <description>

&lt;h1 id=&#34;activity-data-platform&#34;&gt;Activity Data Platform&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://t32k.me/mol/mol/log/look-back-2019/&#34;&gt;以前の記事&lt;/a&gt;で、ランニングが続いてる（その割には痩せていない&amp;hellip;）と書いたが、なぜ1年以上も続いているのか、自分なりに考えてみると、やはりアクティビティログが貯まるのが自分の性に合っているのだと思う。ランニングであれば、月間の走行距離であり、&lt;a href=&#34;https://www.nike.com/jp/nrc-app&#34;&gt;Nike Run Club&lt;/a&gt;などで友人たちとどれくらい走ったか、競い合うというか、走行距離が積み上がっていくのは見ていて楽しい。貯金に似てるのかもしれない（健康貯金みたいなもんだし）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/0309/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;そうゆうわけで、走行距離だけを生きがいにしてきたわけだが、別に距離を稼ぐだけならジョグとか、それこそウォーキングとかで距離を稼いでもいいわけで、月間100km歩くのと、ゼェゼェ言うほどのスピードで走り切るのとは全然違う負荷である。&lt;/p&gt;

&lt;p&gt;ソーシャルフィットネスネットワークである&lt;a href=&#34;https://www.strava.com/&#34;&gt;Strava&lt;/a&gt;の有料会員（Summit）になると、アナリシスパックが有効になり、Fitness &amp;amp; Freshnessを確認することができる。まぁこれは体力のレベルみたいなもんだと思えば分かりやすいだろう。だいたいFitnessスコアが100になると身体が仕上がってるらしい（数値は相対的なものなので、私の100スコアとあなたの100スコアで体力は違う）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/0309/00.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;まぁ見てみると僕の場合、大会がある日(オレンジ色のところ)はグーッとスコアがあがるが、その後下降傾向にある。もちろん大会のときは全力なので心肺に長時間の負荷がかかる。逆に日々のトレーニングをしているにも関わらず、スコアが下がっているのは自分を追い込めていないのである。つまり、毎日ちんたら走っててもこのスコアは上がらない（LSDが要らないというわけではない）。&lt;/p&gt;

&lt;p&gt;というわけで、日々のトレーニングで最低限スコアを下げないようにしたい。&lt;/p&gt;

&lt;h1 id=&#34;indoor-training&#34;&gt;Indoor training&lt;/h1&gt;

&lt;p&gt;しかし、最近は徐々に暖かくなりつつあるが、それでも寒い。寒いのは嫌いだ。あと花粉もか。あとあと雨も多いということで、ランニングをサボりがちである。ジムに行ってトレッドミルで走るという選択もあるが、トレッドミルは風景が変わらないのでつまらない。モチベーションが続かない問題がある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wattcycling.jp/&#34;&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/0309/02.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そんなときに、近所のジムにWattbikeがあるのを知った。これは手持ちのスマホのアプリと連携ができて、そのデータをStravaにアップロードができる。つまり、Fitnessスコアに寄与できる。ランニングばかり続けていても膝に負担がかるし、膝に負担をかけずに心肺機能を鍛えるにはチャリ最高では？とt32kは思った。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/0309/03.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;トレッドミルで申し上げたが、エアロバイクでも風景は変わらないのでつまらない。そこでなにかいいものがないかと探したら、&lt;a href=&#34;https://zwift.com/ja&#34;&gt;Zwift&lt;/a&gt;というオンラインサイクリングアプリがあるということを知る。これはセカンドライフの自転車版みたいなもので、エアロバイク（じゃなくてもいいが）で実際にこいだパワーがアプリ上に反映されてバーチャルライディングを楽しむものである。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/0309/04.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;またワークアウトというメニューがあり、アプリが指定したパワー（ワット：w）でこぐことで効率的な練習ができる。これが辛いけど、ただやみくもに自転車こいでた自分にとっては楽しいものであった。&lt;/p&gt;

&lt;h1 id=&#34;the-smart-trainer&#34;&gt;The Smart Trainer&lt;/h1&gt;

&lt;p&gt;そうゆうわけで、ジムでZwiftを楽しんでいたのだけど、ジムのWiFiがしょぼくて、せっかくワークアウトしたのにデータがStravaがアップロードできていない、ということが何回かあった。だいぶテンション下がる事態である。&lt;/p&gt;

&lt;p&gt;また、昨今のCOVID-19騒ぎでジムを積極的に利用するのも控えられる現状、また在宅勤務が日常化し運動不足が懸念されるので、家で安定したネットワークで落ち着いてZwiftできないものか考えるようになった。&lt;/p&gt;

&lt;p&gt;先程のWattbikeは35万円くらいする。さすがにおいそれとは購入できない金額である。というわけでまたググってみると、手持ちの自転車の後輪にスマートトレイナーと呼ばれるモーターみたいなものをつけると、Zwiftと連携できるらしい。スマートトレイナー自体、10数万位の価格でエアロバイクを買うよりかは安い。自転車と取り外しができるので、飽きたら自転車だけで外で乗ればいいし、と思って購入を決めた。&lt;/p&gt;

&lt;p&gt;と思ったが、自分は自転車を持っていない。ましてやロードバイクなんて買うのも初めてだが、同僚の熱いアドバイスとメルカリの売上金もあったので中古で購入した。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/0309/05.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;空力性能に特化したエアロロードバイクなんだけど、別に室内でするZwiftにはまったくいらない。もっと安いロードバイクでもよかったが、自分が乗っていてテンションあがるかどうかが大事だ（と言い聞かせている）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/0309/06.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;そうゆうわけで、めでたく自転車も購入したので、KICKR&amp;rsquo;18スマートトレーナーも購入した。ロードバイク初心者でも簡単にセットアップできたし、静音性も高い。チェーンの音しかしない。Zwift完全対応しているので坂道を走ったり、ワークアウトでターゲット負荷が変わると、自動的に負荷が変更するので、いちいち自分でケイデンスやギアを変更する必要もないのもよい。ただ私はこくだけ( ˘ω˘)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/0309/07.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;というわけで、こんなご時世だからこそ、家ジム化してみませんか？&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07HCDQ348/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/51H8kWwHRrL._SL1000_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;WAHOO KICKR Smart ワフー キッカー スマート 自転車トレーナー WFBKTR118&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;Wahoo&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;
</description>
        </item>
        
        <item>
            <title>睡眠こそ最強の解決策である</title>
            <link>https://t32k.me/mol/log/978-4797395846-sleep/</link>
            <pubDate>Thu, 20 Feb 2020 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4797395846-sleep/</guid>
            <description>

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4797395842/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/51y8Zkys4UL._SX339_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;睡眠こそ最強の解決策である&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;Matthew Walker&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;世紀の大発見！寿命を延ばす画期的な方法がついに開発された。しかも、効果は長生きだけではない。記憶力と創造性も向上する。外見も魅力的になる。余計な食欲がなくなり、スリムな身体を維持することもできる。ガンや認知症とも無縁になれる。風邪やインフルエンザも撃退してくれる。心臓発作と脳卒中のリスクも下がる。もちろん糖尿病にもならない。幸福感まで高まり、抑うつや不安は消える。どんな方法か、興味はあるだろうか？ ― マシュー・ウォーカー. 睡眠こそ最強の解決策である&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最近、&lt;a href=&#34;https://www.amazon.co.jp/dp/B07TVR8TY9/?tag=warikiru-22&#34;&gt;シャオミのMi Smart Band 4&lt;/a&gt;という活動量計を購入した。これがえらいバッテリーの持ちがよく、1ヶ月経っても充電しなくてよいのでとりあえず着けたまま寝ていたら、睡眠スコアというのが確認できるようになった。&lt;/p&gt;

&lt;p&gt;数値化されると改善したくなるのがエンジニアの性なのか、良い睡眠とは何なのか？というのが気になっていたこともあり、本書を手にとってみた。&lt;/p&gt;

&lt;p&gt;まぁ、本書に興味を持っている時点で睡眠は大切だと理解してると思し、睡眠の働きに関しては本書にやたら詳しく記述されているので、ここでは特に述べない。どうしたら気持ちよく眠れるのか、睡眠の質を上げれるのか、実践したことについて書いてみた。&lt;/p&gt;

&lt;h2 id=&#34;カフェインとニコチンを摂取しない&#34;&gt;カフェインとニコチンを摂取しない&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/0220/04.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;カフェインの摂取は、人類史上もっとも長く続いている薬品の人体実験とも言えるだろう。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;タバコは吸わないので問題ないが、カフェインは別だ。大のコーヒー好きだ。もともと一日何杯もコーヒーを飲んでいたのだが、さらに最近はダイエットのために脂肪燃焼系のサプリもよくわからんまま飲んでいた。このサプリには大量のカフェインが含まれているのが分かって、どうりで眠れないわけだと思った。&lt;/p&gt;

&lt;p&gt;カフェインはアデノシンと呼ばれる眠気を誘う物質の信号を阻害するので、眠れなくなるという話らしい。しかもカフェインには５〜７時間の半減期があり、その時間が経ってようやく半分が体に排出されるので、午後にコーヒーは飲んではならない。&lt;/p&gt;

&lt;p&gt;またカフェインには運動能力向上効果があるので、マラソン大会当日の朝などはそういったサプリを摂るようにするが、それ以外は極力カフェインを取らないようにしている。最近、リモートワークも増えて、家にいる機会も多くなったので自宅のコーヒーメーカーも処分した。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/0220/06.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;なにもカフェインはコーヒーだけに含まれているわけではない。エナジー系のドリンクにも入ってるし、紅茶の種類によってはコーヒーよりも多く含まれているので、意図せず取りすぎているのかもしれないので注意が必要だ。麦茶飲もう。&lt;/p&gt;

&lt;p&gt;ちなみにスタバでカフェインレスの紅茶はハイビスカスとカモミールだ。&lt;/p&gt;

&lt;h2 id=&#34;寝室にデジタル機材を持ち込まない&#34;&gt;寝室にデジタル機材を持ち込まない&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/0220/05.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;暗闇のホルモンと呼ばれるメラトニン、その分泌を抑制する青色の波長の光を多く浴びてはならない。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ｉＰａｄの読書は、紙の読書に比べ、メラトニンの分泌を20％以上抑える&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;デジタル機器で仕事しないエンジニアなんてただのおっさんなので、これは個人的にどうしようもないが、一応、最後の抗いとして&lt;a href=&#34;https://www.zoff.co.jp/shop/contents/zoffpc.aspx&#34;&gt;Zoffのブルーライトカットレンズ&lt;/a&gt;を購入して、家で作業するときにはつけている。&lt;/p&gt;

&lt;h2 id=&#34;寝る前にお風呂につかる&#34;&gt;寝る前にお風呂につかる&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;ほとんどの人にとって、理想的な寝室の温度は摂氏18・３度だ。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;眠りに入るためには体の中心の温度(中核温)を1度下げる必要があるらしく、暑すぎす、寒すぎずの室温を維持しなければならない（上記引用の室温）。&lt;/p&gt;

&lt;p&gt;お風呂に入ると身体が温かくなって眠りやすくなるのだろうと思ってたら、実際は逆だった。お風呂に入ることで血流が表面に集まって、お風呂から出たときに拡張した血管から放熱で中核温が下がるためとのこと。&lt;/p&gt;

&lt;p&gt;確かに、いつも暑いのか夜中に起きて水を飲むことが多々ある。私たちは思った以上に暑い環境で寝てるのかもしれない。ということで、早速、&lt;a href=&#34;https://www.amazon.co.jp/dp/B07CWNLHJ8/?tag=warikiru-22&#34;&gt;Nature Remo&lt;/a&gt;のルーチンで寝る時間になったらエアコンの温度設定を低くするようにした。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/0220/00.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;冒頭でシャオミの活動計を使っていると言ったが、別に睡眠スコア自体は他のメーカーの製品でも確認できるらしい。体重計がWithingsを使っているのでウェルネス系の情報はWithingsでまとめようと思った。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/0220/02.png?v2&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;腕時計タイプを寝るときもつけるのは若干抵抗があったので、スリーピングマットを購入して日々の睡眠スコアを計測するようにした。見てみるとやはり土日に日々の生活リズムが乱れて月曜の朝の睡眠スコアがよくないなぁみたいなことが分かる。あと、いびきをかいてるかどうかも計測できるらしい。&lt;/p&gt;

&lt;p&gt;まぁいろいろやってるわけだけど、やっぱり個人的にコーヒーを辞めたのが一番寝つきがよくなったのが実際のところ。麦茶飲もう。&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07B7KVTS9/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/81XXJgLHVkL._SL1500_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;Withings フランス生まれのスマート睡眠パッド 睡眠サイクル分析 心拍計測 Sleep IFFFT対応【日本正規代理店品】 WSM02-ALL-JP&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;Withings&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;
</description>
        </item>
        
        <item>
            <title>みずほ銀行システム統合、苦闘の19年史</title>
            <link>https://t32k.me/mol/log/978-4296105359-mizuho/</link>
            <pubDate>Wed, 19 Feb 2020 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4296105359-mizuho/</guid>
            <description>&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/null/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51kcMMmX%2BSL.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;みずほ銀行システム統合、苦闘の19年史　史上最大のITプロジェクト「3度目の正直」&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;大和田 尚孝&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;35万人月、4000億円をつぎ込んだIT業界のサグラダファミリア、みずほ銀行システム統合の話題の本を読んでみた。最近のWebサービス開発に携わっているまぁ普通の（？）開発者目線で言えば、カルチャーギャップがありすぎて前編はほぼ理解できないというか、なかなか頭に入ってこない。&lt;/p&gt;

&lt;p&gt;第一部はみずの新システム『MINORI』が完成に至るまで経緯が書かれている。銀行はお金を管理しているわけなので、そのシステムも、そりゃ何重ものセキュリティなり冗長化なり必要なんだろうけど、そんなにお金かかる？そんなに時間かかる？？というのが読んでいての率直な感想だろうか。あとベンダーとのやりとりや、銀行合併による各行の事務手続きの違いとか、あんまり馴染めないので興味なかったら読み飛ばしてもいいと思う。&lt;/p&gt;

&lt;p&gt;2度のみずほ銀行大規模障害に関しては第2部、第3部について書かれているので、なぜ問題が起こったのか、について知りたい読者であれば後半を読めばいいだろう。&lt;/p&gt;

&lt;p&gt;読んだ結果を言えば、経営層のITシステムへの軽視が招いた惨事としか言えない。合併による同じ銀行内で複数システムの存在や、システムの老朽化など、マンパワーでなんとか平常運転しているのに、それに甘んじて改修のための投資をしてこなかったのが原因なんだろう。&lt;/p&gt;

&lt;p&gt;2000年代、米国の銀行はITシステムに既に数千億円の投資をしていたらしい。そのことは頭取などの経営者層にも頭に入ってたはずだ。事実、1999年みずほ銀行が統合された当時の記者会見では、ITへの投資というキーワードが頻繁に登場していたのにもかかわらず、その後、2度の大規模障害を起こし、金融庁からも業務改善命令を言い渡されている（業務改善命令って仮想通貨取引所以外でもうけるんだなと個人的に思ってしまったｗ）。&lt;/p&gt;

&lt;p&gt;スタートアップのエンジニア視点からみれば、リファクタリングやアーキテクチャの変更など、エンドユーザーにはあまりメリットを感じにくい改善施策もCTOなりCEOが近い存在なので、言い続けていれば実行に移すことが可能だと思うし、そういった事例を見聞きしているので、やはり組織が大きくなりすぎて現場の声が届いてなかったのが問題なんだと思う。&lt;/p&gt;

&lt;p&gt;あらためて、組織の未来をどこに向かうのか、どう動くのか決定するのがトップの仕事であり、それを間違えるととんでもない悲惨が待っているのだと理解した1冊だった。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>