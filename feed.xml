<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>MOL</title>
        <generator uri="https://gohugo.io">Hugo</generator>
        <link>https://t32k.me/mol/</link>
        
        
        
        <updated>Sun, 03 Dec 2023 00:00:00 UTC</updated>
        
        <item>
            <title>Zwift 環境2023</title>
            <link>https://t32k.me/mol/log/zwift-env-2023/</link>
            <pubDate>Sun, 03 Dec 2023 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/zwift-env-2023/</guid>
            <description>

&lt;p&gt;ちょっと前まで、暑くて、こんな暑かったら外でランニングできないやと思ってたら、今度は寒くてランニングできない。ましてや、最近また太ったので走るとちょっと膝が痛い。こんな俺にはランニングよりサイクリングだ！ということで、また室内サイクリング環境を整えたいと思った。&lt;/p&gt;

&lt;h2 id=&#34;fitbox-lite&#34;&gt;FITBOX LITE&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://amazon.co.jp/dp/B089CTFHPP?tag=warikiru-22&#34;&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2023/1203/00.jpg&#34; alt=&#34;FITBOX LITE 第3世代フィットネスバイク スピンバイク ダイエット器具 組み立て簡単 静音 トレーニングバイク&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まずはフィットネスバイクで一番有名そうなやつを購入した。最近のはマグネット負荷システムというのらしく、負荷を上げてもぜんぜん静かで、セールとかで3万円くらいで買えたのでモノとしては満足している。しかし、単純にこいでてもおもしろくない。ということで、Zwiftをまたやりたいと思うようになった。&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://amazon.co.jp/dp/B0CHVMHJL1?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://m.media-amazon.com/images/I/61QkNAQHA5L._AC_SL1500_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt; 【公式】FITBOX ケイデンスセンサー Zwift/Kinomap 対応 &lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt; フィットボックス(FITBOX) &lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;調べてみると、どうやらFITBOX公式のケイデンスセンサーがあるようなので、これでFITBOX LITEの漕いでる回転数をZwiftに送信できる。つまりZwift上でサイクリングできる。&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://amazon.co.jp/dp/B0CFQFSTSN?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://m.media-amazon.com/images/I/61d5QF14wPL._AC_SL1500_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt; COROS（カロス）PACE 3 ランニングウォッチ スポーツウォッチ 30g &lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt; COROS &lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;ちなみに、心拍数もZwiftに送信する必要があるが、こちらはランニング用に買ったCOROS PASE 3から心拍数を送信できる。&lt;/p&gt;

&lt;p&gt;ということで、ケイデンスと心拍数が計測可能になったのでZwiftをプレイしたのだが、パワーメーターがないので、FITBOXで一番軽い負荷も一番重い負荷にしても回転数が同じであれば、当たり前っちゃ当たり前だが、同じパワーしか出ないのだ。今度はパワーメーターが欲しいなと思い始めた。調べてみるとどうやらクランク（ペダルのところ）型のパワーメーターがあるので、それをFITBOXに装着すると計測可能になるらしいのだが、5~6万円するらしい。FITBOX本体が3万くらいで買ったのに、なんでセンサーにその倍払わなきゃいけないんだと思い、こうなれば普通にロードバイクとサイクルトレーナー買ってやればいいんじゃないかと考えた。&lt;/p&gt;

&lt;h2 id=&#34;wahoo-kickr-core&#34;&gt;Wahoo KICKR CORE&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://amazon.co.jp/dp/B08J7D9NVD?tag=warikiru-22&#34;&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2023/1203/02.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;サイクルトレーナーは最近だと国内ブランドのも出たりして、前より選択肢は増えていると思う。しかし、まぁ信頼性とうことでWahoo製品にした。前回はKICKRを購入したが、今回はKICKRの廉価版であるKICKR COREを購入した。KICKRが最大パワー2200Wに対して、KICKR COREは1800Wが最大パワーになっている。初心者の自分がやる分には瞬間的に立ちこぎしても300、400Wくらいがせいぜい限界なのでぜんぜん許容レベルである。ということでフリマサイトで安く購入できた。&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://amazon.co.jp/dp/B07DLM2ZDK?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://m.media-amazon.com/images/I/718xoD76sGL._AC_SL1500_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt; シマノ(SHIMANO) CS-R7000 11S 11-28T 12345791358 スプロケット ICSR700011128&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;SHIMANO&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;廉価版ということで標準でスプロケットがついてこないので。シマノのCS-R7000 11S 11-28Tを購入して装着。&lt;/p&gt;

&lt;h2 id=&#34;tern-surge&#34;&gt;TERN SURGE&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://amazon.co.jp/dp/B09SLN4F7V?tag=warikiru-22&#34;&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2023/1203/01.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;サイクルトレーナーは購入できたので、今度はロードバイクを購入しなければならない。&lt;a href=&#34;https://t32k.me/mol/mol/log/wahoo-kickr-2018/&#34;&gt;前回はなぜか初心者のくせにGIANTのエアロカーボンフレーム&lt;/a&gt;を買ってしまい、Zwiftを辞めたときに、こんなガチな車体で外走るのは初心者としてちょっと恥ずかしいと思い、Zwiftを辞めた同時にロードバイクも売却したのだった。&lt;/p&gt;

&lt;p&gt;今回はZwift辞めた後でも、ちゃんと（？）街乗りにできるような車体がいいなと思い、ミニベロのTERN SURGEを購入した。かっこいい。&lt;/p&gt;

&lt;h2 id=&#34;zwift-環境-2023&#34;&gt;Zwift 環境 2023&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2023/1203/03.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;というわけで、できたZwift環境 2023!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2023/1203/04.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;扇風機と空気清浄機もあるぜ！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2023/1203/05.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ミニベロだとサイクルトレーナーをつけると前輪が低くなるので、フラットにするために踏み台を置いている。&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://amazon.co.jp/dp/B0C2ZHS6QQ?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://m.media-amazon.com/images/I/61kC9xuqacL._AC_SL1500_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;SENUN 踏み台 低踏み台 高さ9.5cm&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;SENUN&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2023/1203/06.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;普通に漕いでてもチェーンの音しかしないが、ここはマンションの4階のため念のため防振パッドをかましている。&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://amazon.co.jp/dp/B08FD7Z87W?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://m.media-amazon.com/images/I/81Q4mJM7A-L._AC_SL1500_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;GROWTAC(グロータック) ブルカット3（2個セット） ローラー台専用防振パッド&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;GROWTAC&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2023/1203/07.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;あとお尻痛いのでクッションと汗カバー。&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://amazon.co.jp/dp/B0B19S6ZCY?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://m.media-amazon.com/images/I/51rIlNVwSmS._AC_SL1000_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;Magi&#39;s Gift自転車サドルカバー 超肉厚 お尻痛くない ロードバイクサドルカバー&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;Magi&#39;s Gift&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2023/1203/08.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こんな感じでiPad Air 10.9インチを見ながらしている（欲を言えば、もうちょっと大きいタブレットほしいけど、ZwiftしたいがためにiPad Pro 12.9インチを買うのは流石にオーバースペックすぎる）。&lt;/p&gt;

&lt;p&gt;というわけで、また春になったら飽きて売ってるんだろうなと思うけども頑張って続けたい。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>帝京大学理工学部情報科学科通信教育課程に編入した</title>
            <link>https://t32k.me/mol/log/teikyo-university/</link>
            <pubDate>Tue, 11 Apr 2023 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/teikyo-university/</guid>
            <description>&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2023/0411/00.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;表題の通り理系男子大学生になった。今年40歳になるというのに、また16~17年かかってようやく奨学金の返済を完了したところなのに、まさか自分がまた大学に行くとは思っていなかった（通信だが）。&lt;/p&gt;

&lt;p&gt;自分は都内でデザインエンジニア（UI寄りなWebフロントエンドエンジニア）の肩書で、デザイン部に所属している。はじめの大学も文系のデザイン専攻で卒業後、Webデザイナーとして働いてたらHTML/CSSコーディングが好きだったので、徐々にフロントエンドよりになり、今に至っている。自分のアンカーとしてはやはり今もデザイナーな気持ちがある。&lt;/p&gt;

&lt;p&gt;ただ現在勤めている会社のミッションが『データによって人の価値を最大化する』というもので、実際作っているプロダクトでもSQLの知識を必要とされているものだったりして、
デザインエンジニアだがUI（フロントエンド）という領域だけでは、問題は正しく理解できないように感じていた。つまり、データベースなりバックエンドの知識も必要と感じ始めていた。&lt;/p&gt;

&lt;p&gt;また、数学が大の苦手だ。大学入試センター試験のときも200点満点中100点ぐらいしか取れなかったのが今でも悔しく思ってる。高校入学当初、部活で疲れてて、数学の授業を寝ててたら全くついていけなくなった。大学入試が近づいても得意の日本史だけを伸ばすことに注力してて、数学は放置していた。ただ今の時代、インターネットがある。Youtubeがある。なんならChatGPT先生に聞けば、自分のペースで学習できる。学び直しに最適な時代に来ているのでないだろうか。また、分からないことが分かるようになりたいという単純な欲求もあった。&lt;/p&gt;

&lt;p&gt;ということで大学にもう一回行こうと思った。大学選びに関しては、先人の偉大なまとめがあるので、それを参照してもらいたい。大変助かりました。ありがとうございます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/gkz/articles/why-i-became-student&#34;&gt;いろいろ悩んで帝京大学理工学部(通信教育課程)の社会人大学生になった&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;記事の通り、最初自分もなんとなく社会人大学生というと大学院に行くのかなと漠然と考えていたが、大学院というところは研究するところであって、自分のように情報学？を体系的に学びたいというのは当たり前だが大学で学ぶらしい。でも大学4年間かー長いなーと思っていたら、上記の記事の通り、既に4年制の大学を卒業していたら（一般教養などの単位が取得済と認定され）2年次に編入というパターンもあるらしいということで、それなら大丈夫かもと思い出願した。&lt;/p&gt;

&lt;p&gt;どの単位が認められるか分からなかったので、とりあえず3年次編入で出願しといて、単位が少ししか認められなかったら2年次編入で合格になると事前の説明会で聞いたので、そう出願したら、幸いにも52単位認められて3年次編入合格となった。帝京大学の通信課程は年間の授業料が15万くらいだったので、お財布にも優しい。2年間ストレートで卒業したい&amp;hellip;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;出願書類を揃えるにあたって、結構ギリギリだったので、当日発行の健康診断書とかシラバスが印刷したものしか受け付けないということで、キンコーズで当日印刷したりして、結構金額がかかったので、余裕を持って準備しよう。おっさんとの約束ナ！&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4046020911/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://m.media-amazon.com/images/I/51W3qR9xsIL._SX350_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;塾よりわかる中学数学&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;小倉 悠司 (著), 田村 高之 (著)&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;中学数学からやり直そう&amp;hellip;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>プロダクトビジョン</title>
            <link>https://t32k.me/mol/log/978-4621306925-product-vision/</link>
            <pubDate>Thu, 13 Oct 2022 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4621306925-product-vision/</guid>
            <description>&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621306928/?tag=warikiru-22&#34; target=&#34;_blank&#34;&gt;
&lt;img src=&#34;https://m.media-amazon.com/images/I/41-CYqPCBwL._SX352_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;プロダクトビジョン&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;安藤 昌也 (監修, 翻訳)&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;読書の秋なんで、山積みになってるのを読もうと思う。&lt;/p&gt;

&lt;p&gt;タイトルからデザイナーの組織論っぽいのかなと思ったけど、手っ取り早く言えば、デザイナー向けのプロダクトマネージャーへの指南書みたいなかんじ。&lt;/p&gt;

&lt;p&gt;別にプロダクトマネージャーになるためにデザイナーになる必要もないと思うが、デザインとは広義では設計の意味なので、プロダクトのビジョンを設計すると考えれば自然の流れなのかもしれない。そういったデザイナーを本書では戦略デザイナーと呼び、いわゆるデザイナーと言われて想像するUIやインタラクションをデザインするデザイナーを戦術デザイナーと呼称している。&lt;/p&gt;

&lt;p&gt;戦術デザイナーから戦略デザイナーになろうって話だけど、まぁ普通のデザイナーとしての作業をしているだけでは足りなくて、コミュニケーション能力であったり、データ分析能力であったり、そういったものも身につけていかなければならないよとのこと。&lt;/p&gt;

&lt;p&gt;興味深かったのは、ビジョンを考えて実行していく組織・チーム編成の段階だ。BEDRC（ベッドロック）（ビジネス・エンジニアリング・デザイン・リサーチ・コンテンツ）と呼ばれる５つの専門分野に長けた人たちが必要と述べている。5つの分野だからといって最低5人必要というわけでなく、だれか兼務したりしてもいいし、10人ぐらいのチームで担当を分けたりすることもできる。&lt;/p&gt;

&lt;p&gt;最初の３つはよく言われてることなので、ふむふむと思うけど、リサーチ・コンテンツも重要なんだなぁと理解したので、この辺も勉強していかなければならないなぁと思った。&lt;/p&gt;

&lt;p&gt;とはいえ、個人的にはUIをこねくりましているほうが好きなので、戦略デザイナーになりたいというモチベーションが足らず、本書全体として、あまりピンとこない印象を持った。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Visual Studio Code完全入門</title>
            <link>https://t32k.me/mol/log/978-4295013457-vsc/</link>
            <pubDate>Thu, 06 Oct 2022 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4295013457-vsc/</guid>
            <description>&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4295013455/?tag=warikiru-22&#34; target=&#34;_blank&#34;&gt;
&lt;img src=&#34;https://m.media-amazon.com/images/I/51BkK+DIb8L._SX350_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;Visual Studio Code完全入門&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;リブロワークス (著)&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;読書の秋なんで、山積みになってるのを読もうと思う。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://vscode.dev/&#34;&gt;Visual Studio Code&lt;/a&gt;は、リリースされたときから割と使っているが、ファッション的になんか良さげ！と波に乗っただけで、使いこなしてるわけではなかった。我流と言ったらなんだが、とりあえず仕事してて必要そうなところからかいつまんで、身につけていったかんじだ。&lt;/p&gt;

&lt;p&gt;というわけで、基本から学ぶには本書はうってつけの本だった。VSCの各UIがなんという名前なのか（アクティビティバーとかパネルとか）とか、ドロップダウンメニューの奥に隠れてたいたZenモードを見つけたとか、いろいろ発見があった。&lt;/p&gt;

&lt;p&gt;内容的には拡張機能の種類からいってもWeb系をターゲットしているみたいなので、駆け出しフロントエンドエンジニアの方などに良いかもしれない。しらんけど。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>文字レイアウトの法則</title>
            <link>https://t32k.me/mol/log/978-4802512459-type-tricks/</link>
            <pubDate>Fri, 30 Sep 2022 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4802512459-type-tricks/</guid>
            <description>&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4802512457/?tag=warikiru-22&#34; target=&#34;_blank&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/413-iZ1IZFL._SX371_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;1ページずつ学ぶ 文字レイアウトの法則&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;ソフィー・バイヤー (著)&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;読書の秋なんで、山積みになってるのを読もうと思う。&lt;/p&gt;

&lt;p&gt;タイポグラフィというと小林章さんの欧文書体が有名だけど、本書はもっと初心者向けというか基本をまとめたもの。200くらいのルールがあるという。まぁ最初の方のルールは、当たり前やろ！みたいなことも多いが、非常にためになる一冊である。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;レディング
活版印刷では、文字と文字の間には金属製や木製の板を、行と行の間には薄い鉛板を入れて余白を作っていました。そのため、英語では行送り（行間）のことは、いまでも鉛（lead）に由来する『レディング』（leading）と呼ばれています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;へーと思った。&lt;/p&gt;

&lt;p&gt;最後の方にちょっとだけだけど、（Web）インタフェースのお約束についても触れてあったのが、今どきに合わせてきたなという印象。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>UXデザインの法則</title>
            <link>https://t32k.me/mol/log/978-4873119496-law-of-ux/</link>
            <pubDate>Wed, 14 Jul 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4873119496-law-of-ux/</guid>
            <description>&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119499/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/51uSGP2lHHS._SX350_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;UXデザインの法則 &lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;Jon Yablonski (著)&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;心理学と聞くと、ちょっと仰々しい感じがするが、中身は一度は聞いたことがある法則だたったり、デザイナーなら無意識でやってるようなテクニックであったり、そんなに小難しくない。中には知らない法則もあったりして、自分が作成したデザインを説明するときに、これらの引用を添えて説明すると説得力も増すだろう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ヤコブの法則：慣れ的なアレ&lt;/li&gt;
&lt;li&gt;フィッツの法則：ターゲットの大きさと近さのアレ&lt;/li&gt;
&lt;li&gt;ヒックの法則：選択肢の多さについてのアレ&lt;/li&gt;
&lt;li&gt;ミラーの法則：マジックナンバーのアレ&lt;/li&gt;
&lt;li&gt;ポステルの法則：寛容な入力に対応しよう&lt;/li&gt;
&lt;li&gt;ピークエンドの法則：ピークとエンドが大事&lt;/li&gt;
&lt;li&gt;美的ユーザビリティ効果：ふつくしい is よい&lt;/li&gt;
&lt;li&gt;フォン・レストルフ効果：リズムを変える的なアレ&lt;/li&gt;
&lt;li&gt;テスラーの法則：a.k.a. 複雑性保存の法則&lt;/li&gt;
&lt;li&gt;ドハティのしきい値：応答が0.4秒以内にしろ！&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;中でも良かったのは第11章の『力には責任が伴う』だ。上記のような法則をうまく使えば、自身のサービスを使いやすいものとすることができる反面、中毒性のあるものにしてしまうかもしれない。FacebookのようなSNSサービスで承認欲求を満たしたいなど。&lt;/p&gt;

&lt;p&gt;デザイナーはなにも悪いものを作ろうとしているわけではないが、結果としてそうなってしまう可能性があるということに意識を向けないといけない。スタートアップでは、早く作って、早く出すというようなマインドがあるが、本書ではその歩みを緩め、倫理観を持ってプロダクトを作ろうと提言しているのが、個人的に印象深かった。&lt;/p&gt;

&lt;p&gt;デジタルサービスはますます私たちの生活に深く入り込んできているので、それをデザインし、ユーザーの行動に良くも悪くも影響を与える私たちの役割は大きくもあり責任重大だ。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>株式会社プレイドにジョインしました！</title>
            <link>https://t32k.me/mol/log/joining-plaidinc/</link>
            <pubDate>Tue, 01 Jun 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/joining-plaidinc/</guid>
            <description>&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0601/00.jpg&#34; alt=&#34;PLAID, Inc.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;気づいたら、入社してました。社内を見渡すとツヨツヨなエンジニアばかりでガクブルですが、自分はデザイナー職での採用でした。といってもWebフロントエンドのコード(front-of-the-front-end)も書くのですが、いわゆるデザインエンジニアって感じです。最近は、デザインエンジニアって何するんだろう？と思いながら、下記の記事を訳してました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://t32k.me/mol/mol/log/i-think-im-a-design-engineer/&#34;&gt;【翻訳】私ってデザインエンジニアかも... - MOL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といってもこれはクライアントワークを主とするClearleft社のデザインエンジニアの話なわけで、&lt;a href=&#34;https://karte.io/&#34;&gt;KARTE&lt;/a&gt;を提供するSaaS会社のデザインエンジニアにはまた違った側面があったりするんだろうなと思ったり、難しい。&lt;/p&gt;

&lt;p&gt;自分でデザインしてコーディングするぶんには問題ないわけですが、バックエンドも書くエンジニア（ややこしい）の皆さんも不慣れなUIコードを書くわけで、そこでいかに負担をかけずにデザイナーの意図したUIをちゃんと再現できるかを考えると、デザインシステムみたいな仕組みも必要になってくるわけで、いろいろとやることは多いです&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wantedly.com/projects/218105&#34;&gt;SaaSのブラッシュアップに高速で挑むデザイナー - 株式会社プレイドの求人 - Wantedly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そういうわけで、プレイドではデザインエンジニア絶賛募集中なので応募してね！&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>【翻訳】私ってデザインエンジニアかも...</title>
            <link>https://t32k.me/mol/log/i-think-im-a-design-engineer/</link>
            <pubDate>Tue, 27 Apr 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/i-think-im-a-design-engineer/</guid>
            <description>

&lt;p&gt;&lt;cite class=&#34;citation&#34;&gt;
&lt;img src=&#34;https://t32k.me/mol/mol/images/people/trys_mudford.jpg&#34; alt=&#34;Trys Mudford&#34; /&gt;
Original：&lt;a href=&#34;https://www.trysmudford.com/blog/i-think-im-a-design-engineer/&#34;&gt;I think I might be a design engineer&amp;hellip;&lt;/a&gt;（&lt;time&gt;2021-02-17&lt;/time&gt;）by &lt;a href=&#34;https://twitter.com/trysmudford&#34;&gt;Trys Mudford&lt;/a&gt;
&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;この記事はデザインエンジニアリングについてのシリーズの一部です。Web開発者の役割の変化やデザインとエンジニアリングの違いについて議論していきたいと思います。長くなりそうだったので、この記事を補足するために &lt;a href=&#34;https://www.trysmudford.com/blog/prototyping/&#34;&gt;Prototyping&lt;/a&gt;、&lt;a href=&#34;https://www.trysmudford.com/blog/design-foundations/&#34;&gt;Systemised design foundations&lt;/a&gt;と&lt;a href=&#34;https://www.trysmudford.com/blog/designer-and-developer-relationship/&#34;&gt;The designer &amp;amp; developer relationship&lt;/a&gt;に記事を分けました。それでは始めましょう。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;数年前から、自分がWeb開発のどの領域に当てはまるのか考えてきました。自分のキャリアを振り返れば、ある種の仕事に収束しているのを感じていましたが、それが何という名前なのか、今までは分かりませんでした。&lt;/p&gt;

&lt;h2 id=&#34;web開発者はwebサイトを構築するのか&#34;&gt;Web開発者はWebサイトを構築するのか？&lt;/h2&gt;

&lt;p&gt;「Web開発者」として最初の数年間、実際のところ、その役割はWebサイトを構築することを意味しなかったのです。Webサイトをコピーして更新したり、ファイルをFTPでアップロードしたり、お茶を入れたり、何か問題が起きたときにサーバー管理者に連絡したりしていました。&lt;/p&gt;

&lt;p&gt;しだいに責任ある仕事を任されるようになり、実際にWebサイトを構築するようになりました。しかし、それだけではなく、インフラの管理、メールテンプレートの作成、企画の立案、マーケティングキャンペーンの手伝いなども行っていました。それはただWebサイトを構築するだけではありません。&lt;/p&gt;

&lt;p&gt;とあるスタートアップに入社したことで、2人の新しいデザイナーと、プロダクトのヘッドレスAPIを開発するバックエンド・エンジニアリング・チームと初めて出会いました。フロントエンドチームは、「フロント」と「バックオブフロントエンド」の両方を担当しました。&lt;a href=&#34;https://bradfrost.com/blog/post/front-of-the-front-end-and-back-of-the-front-end-web-development/&#34;&gt;ボタンを作り、それをつなぎ込んでいく&lt;/a&gt;。今でもWebサイトを開発していますが、エンジニアリングチームとの共同作業です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://clearleft.com/&#34;&gt;Clearleft&lt;/a&gt;のようなデザイン力の高い会社の一員になったことで、デザイナーとエンジニアのより良いコラボレーションの方法に目を向けるようになったり、デザインプロセス全体をより深く理解するようになりました。すべてのプロジェクトとは言いませんが、「フロント・オブ・フロントエンド」に注力するようになり、実際のWebサイトを完成するために「バック・オブ・フロントエンド」をエンジニアリング・チームに引き継ぐようになっています。&lt;/p&gt;

&lt;h2 id=&#34;デザインの意図を理解しリリースする&#34;&gt;デザインの意図を理解しリリースする&lt;/h2&gt;

&lt;p&gt;これはWeb開発者の仕事の中でも非常に大きな部分を占めています。しかも、ビジュアルデザインだけではなく、リサーチ、UX、プロダクト、コンテンツ、それまでのプロセス全体が対象となります。プロジェクトに参加する前の良いアイデアをすべて取り入れ、それらをエレガントにまとめ上げ、ユーザーに適切に提供するにはどうすればよいでしょうか。&lt;/p&gt;

&lt;p&gt;あなたが「Webサイトを構築する」Web開発者であるならば、それはあなたの責任です。しかし、もしあなたが開発工程の末端ではないとしたらどうでしょう？もしあなたが自分のコードをエンジニアに渡せるとしたら&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;webのためのweb開発者&#34;&gt;WebのためのWeb開発者&lt;/h2&gt;

&lt;p&gt;大規模な代理店やほとんどのプロダクトチームには、「エンジニアリング」チームがあり、それは2つの領域に分かれています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;バックエンド&lt;/li&gt;
&lt;li&gt;バック・オブ・フロントエンド&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一般論ですが、これらの分野の開発者は「システムを考える人」であり、プログラミング &amp;gt; デザインという考え方で物事に取り組む傾向があります。私の経験では、彼らの脳はそのように働く傾向があるのです。彼らのスキルは、エレガントで堅牢、かつスケーラブルなコードを書くことで、何か問題が起きたときにプロダクトが破綻しないようにすることです。彼らのスキルは、プロダクト全体を合理的なチャンクに分解し、データを効率的に保存して、簡単にクエリを投げるようににすることです。また、データの漏洩を防ぎ、ユーザーが不正なデータを保存するのを阻止し、ハッカーの攻撃を阻止することにあります。&lt;/p&gt;

&lt;p&gt;彼らのスキルは（繰り返しますが、あくまで一般論です）、デザインのニュアンスを理解することではありません。誤解しないでください、それは素晴らしいことです。このようなチームで働く機会を持っているなら、自分が得意なことに集中して、本当のプロに専門分野を任せることができるのは、とても良いことです。このチームでは、（これまで説明してきた）Web開発者は、より大きな開発工程の一部です。彼らは&lt;strong&gt;Webサイトを構築&lt;/strong&gt;するというよりも&lt;strong&gt;Webのために構築している&lt;/strong&gt;のです。&lt;/p&gt;

&lt;h2 id=&#34;デザイン-エンジニアリングの溝&#34;&gt;デザイン→エンジニアリングの溝&lt;/h2&gt;

&lt;p&gt;しかし、最近では「デザイン」から「エンジニアリング」へと直進し、フロント・オブ・フロントエンドを完全に見落としている組織が増えています、結局、デザインの次の段階がコードなのだから、エンジニアにUIを作らせればいいのではないか。ちょっと待って下さい、この2つの機能の間にある巨大な溝に飛び込むことは、素晴らしいデザインの意図を失う可能性があります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/natalyathree&#34;&gt;Natalya Shelburne&lt;/a&gt;氏の&lt;a href=&#34;https://beyondtellerrand.com/events/berlin-2019/speakers/natalya-shelburne&#34;&gt;Beyond Tellerrandでの講演&lt;/a&gt;から引用したスライドが、このギャップを説明するのにうってつけなので、私は大好きです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0427/0.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ソフトウェアエンジニアの帽子をかぶってデザイナーと仕事をしていると、まるで、ただの丸を渡されて、美しいフクロウを作らなければならないような気分になります。彼らはコードや品質、私がアーキテクチャでやらなければならないことを理解も評価もせず、Webサイトの写真を見てばかり、私が自分がヒーローのように感じます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0427/1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;一方で、私がデザイナーとしてプロジェクトに参加しているとき、どのデザインでも細部まで完璧に仕上げたフクロウを誰かに渡すと、彼らはdivを渡してきます。ごめん、それはただの丸です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上記の引用と画像は、Natalyaのトークから抜粋したものです。&lt;a href=&#34;https://beyondtellerrand.com/events/berlin-2019/speakers/natalya-shelburne&#34;&gt;スクリプト&lt;/a&gt;・&lt;a href=&#34;https://vimeo.com/373397621&#34;&gt;講演&lt;/a&gt;には一見の価値があります。&lt;/p&gt;

&lt;p&gt;どちらの領域でも、期待が満たされないことに失望することがあります。しかし、このように2つの役割が異なる考え方を持っている場合、効率的に引き継ぎを成功させるためにはどうすればよいのでしょうか？&lt;/p&gt;

&lt;h2 id=&#34;私たちのアプローチ&#34;&gt;私たちのアプローチ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.trysmudford.com/blog/design-foundations/&#34;&gt;Design foundations&lt;/a&gt;&lt;br /&gt;
デザインやコーディングの段階に入る前に、私たちはプロジェクトを管理するための基本的な指示や計算、つまり&lt;strong&gt;タイポグラフィ、スペース、カラー、グリッド&lt;/strong&gt;を作成します。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.trysmudford.com/blog/prototyping/&#34;&gt;Prototyping&lt;/a&gt;&lt;br /&gt;
デザインが表示される場所は最終的にはブラウザなので、デザインを早く実際のデバイスで動かすことができれば、仮定をより早く検証することができます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;デザインの翻訳&#34;&gt;デザインの翻訳&lt;/h2&gt;

&lt;p&gt;大規模な開発工程の中でWeb開発者としての私たちの目標は可能な限り最善の方法でデザインを「翻訳」することだと思います。経験上、スクラップからシステムを構築するよりも、開発とデザインの両方がシステムを使って構築されていれば、それはかなり簡単なことです。だからこそ私たちは、デザイン段階からコーディング入り、連携して一緒に意思決定するようにしています。つまり、フロントエンドのコードはデザインの延長線上にあります。&lt;/p&gt;

&lt;p&gt;あるいは、Jamesがこう言っています：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;プロダクトのコードバージョンの忠実性は、デザインの後ではなく、デザイン段階で構築されます。開発者は、デザイナーのマイクが床に落ちる前にキャッチするのを待つのではなく、デザインチームに組み込まれます。 ― James Gilyead&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;この役割はなんですか&#34;&gt;この役割はなんですか？&lt;/h2&gt;

&lt;p&gt;このような方法はとても効果的であり、私の興味を非常にかき立てました。私は、&lt;a href=&#34;https://www.trysmudford.com/blog/rapid-building/&#34;&gt;迅速なビルド&lt;/a&gt;、システム設計、エレガントでスケーラブルなコードを書くことが好きです。&lt;/p&gt;

&lt;p&gt;しかし、もはや&lt;strong&gt;Webサイトを構築している&lt;/strong&gt;とは思えませんし、&lt;strong&gt;Webのための構築している&lt;/strong&gt;とも思えないこともあります。たとえファンデーションがプロダクトに組み込まれたとしても、プロトタイプは、ほとんどが捨てられてしまいます。デザインをエンジニアリングに翻訳するためや、プロジェクトの前提条件を検証するという目的を果たした後、消えてしまうのです。ある意味で、これは&lt;strong&gt;エンジニアのためのビルド&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;このささいな気持ちからこの役割には名前があるのではないかと考えました。そしたらあったのです。&lt;/p&gt;

&lt;h2 id=&#34;デザインエンジニアリング&#34;&gt;✨ デザインエンジニアリング ✨&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.designbetter.co/design-engineering-handbook/&#34;&gt;デザインエンジニアリング・ハンドブック&lt;/a&gt;を読んでいて、第1章の最後にある段落が私の心を捉えました。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;デザインエンジニアリングとは、デザインとエンジニアリングの重複部分を精査し、納品やアイデアの検証を迅速に行うための分野の名称です。プロトタイピングからプロダクションレディなコードの作成まで、デザイン決定を迅速に行い、リスクを軽減し、UIコードの品質を確立する職能です。デザインエンジニアの仕事は、プロダクト開発とイノベーションを最適化するために、デザイナーとエンジニアが最も効果的にコラボレーションできるようなシステム、ワークフロー、テクノロジーを包括しています。 ― Natalya Shelburne&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;それ-私&#34;&gt;それ、私&lt;/h3&gt;

&lt;p&gt;この段落は、私が気づかないうちに押し進めようとしていた役割を完全に言い当てています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アイデア検証&lt;/li&gt;
&lt;li&gt;ラピッドプロトタイピング&lt;/li&gt;
&lt;li&gt;プロダクションコード&lt;/li&gt;
&lt;li&gt;UIコードの品質&lt;/li&gt;
&lt;li&gt;便利なツールの作成&lt;/li&gt;
&lt;li&gt;システムのカプセル化&lt;/li&gt;
&lt;li&gt;プロジェクトの土台作り&lt;/li&gt;
&lt;li&gt;効果的なコラボレーション&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;イエス！これは非常にエキサイティングな発見でした。&lt;/p&gt;

&lt;h2 id=&#34;デザインエンジニアの居場所&#34;&gt;デザインエンジニアの居場所&lt;/h2&gt;

&lt;p&gt;デザインエンジニアは、先に述べた2つの分野の間の溝に位置し、2つの分野をスムーズに翻訳する方法を見つけ出します。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;片方で、デザイナーはピクセルパーフェクトなモックアップと美しいインターフェイスを目指します。もう片方でエンジニアはシステムの設計やパターンの最適化に努めます。その中間には、この2つのアプローチがどのように交わるかを考えるデザイナーとエンジニアがいます。 ― Adekunle Oduye | &lt;a href=&#34;https://www.designbetter.co/design-engineering-handbook/&#34;&gt;デザインエンジニアリング・ハンドブック&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;デザインエンジニアが書くもの&#34;&gt;デザインエンジニアが書くもの&lt;/h2&gt;

&lt;p&gt;CSSは、デザインエンジニアの主要言語です。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CSSはプログラミングデザインのために作られたもの。デザイナーとエンジニアの両方に役立つツールであるがゆえに、このような議論がなされることが多いのです。異なるメンタルモデルを持つ人たちが一緒に仕事をしなければならない交差点では、声が大きくなりがちで、時には敵対的になることもありますが、そこにこそ学びがあるのです。 ― Natalya Shelburne | &lt;a href=&#34;https://www.designbetter.co/design-engineering-handbook/&#34;&gt;デザインエンジニアリング・ハンドブック&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;どのようにコードを書こうとも、最終的にはHTML、CSS、JSに集約されます。デザインエンジニアは、ユーザーエクスペリエンスとデベロッパーエクスペリエンスのバランスを取る必要があります。チームが自分たちに合った方法で優れたコードを書けるようにすると同時に、ユーザーエクスペリエンスに悪影響を与えないようにしなければなりません。&lt;/p&gt;

&lt;p&gt;そのためには、通常は選択しないような技術を学び、使用することもありますが、それがチームに最高の製品を生み出す力を与えることは間違いありません。&lt;/p&gt;

&lt;p&gt;言葉もツールのひとつです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デザインとエンジニアリングが直面する課題を&lt;strong&gt;議論する&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;デザインエンジニアが提案するソリューションを&lt;strong&gt;説明する&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.trysmudford.com/blog/design-foundations/&#34;&gt;ファンデーション&lt;/a&gt;、&lt;a href=&#34;https://www.trysmudford.com/blog/prototyping/&#34;&gt;プロトタイプ&lt;/a&gt;、システムを&lt;strong&gt;ドキュメント化する&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本質的には、デザインエンジニアの目標は&lt;strong&gt;役に立つこと&lt;/strong&gt;です。UXが適切な判断を下すのを助け、リサーチがテストから最も有用なインサイトを得るのを助け、デザイナーが健全で実現可能なアイデアを生み出すのを助け、エンジニアがデザインの意図を理解するのを助ける。しかし、最も重要なのは、エンジニアリングチームのためにデザインを翻訳するためにできることをすることです。&lt;/p&gt;

&lt;p&gt;私たちは「クリエイター」と「メンテナー」という言葉を使います。それは、仕事をする人と、うまく維持する人です。しかし、私はこれはスペクトルだと考えています。デザインエンジニアは、クリエイター陣営の中でも最も「創造的」な部分に位置しており、素早く開発し、素早く失敗し、他のクリエイターが後に続くことができるように、悪いアイデアの道を切り開きます。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;そうですね、私は実際のところデザインエンジニアかもしれません。今までやってきたことを大きく変えるわけではありません。私がこれまでに手がけてきた&lt;a href=&#34;https://www.trysmudford.com/blog/design-foundations/&#34;&gt;ファンデーション&lt;/a&gt;、&lt;a href=&#34;https://www.trysmudford.com/blog/prototyping/&#34;&gt;プロトタイプ&lt;/a&gt;、デザインシステムはすべてこの職能に該当します。 そして、そこにいるのが昔の私ではないということに、とても安心感を覚えています。もっとこのコミュニティを掘り下げていきたいと思っています。&lt;/p&gt;

&lt;p&gt;さて、ここで最後の質問ですが&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;すべてのプロジェクトでデザインエンジニアが必要でしょうか&#34;&gt;すべてのプロジェクトでデザインエンジニアが必要でしょうか？&lt;/h3&gt;

&lt;p&gt;あえて言えば、プロジェクトをまとめるエンジニアリングの職能があれば、イエスと言えるでしょう。さらに、私はすべてのプロジェクトのデザインプロセスに開発者が関わるべきだと確信しています。開発をウォーターフォールの下流に置くのは簡単なことですが、デザイン＆エンジニアリングの「フクロウの嘆き」からもわかるように、デザイン・エンジニアリングの関与が早ければ早いほど、プロセスはスムーズに進みます。&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://t32k.me/mol/mol/log/design-engineering/&#34;&gt;【翻訳】デザインエンジニアリング - MOL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2015年にも同様な話題についての記事を訳したが、最近、フロントエンドエンジニアの職域が広がりすぎていているのを感じている。自分はWebデザイナー上がりのフロントエンドエンジニアなので、やっぱりUIを作り込みたいという気持ちがあるし、その領域で自分のスキルが発揮できると思っている。フロント・オブ・フロントエンドとバック・オブ・フロントエンドを分けるの良いと思う一方で、小さなスタートアップでそこまでフロントエンドにリソースを割くことも難しいと思うので、まぁ適材適所で頑張りましょうとしか言えない。とりあえず、もう少しこのデザインエンジニアリングというものを今後探っていきたいと思う。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Webフォント読み込み戦略（2021年）</title>
            <link>https://t32k.me/mol/log/optimize-webfont-loading/</link>
            <pubDate>Wed, 21 Apr 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/optimize-webfont-loading/</guid>
            <description>

&lt;h1 id=&#34;preload-web-fonts&#34;&gt;Preload web fonts&lt;/h1&gt;

&lt;p&gt;前回、といっても2年前だが、&lt;a href=&#34;https://t32k.me/mol/mol/log/font-display-swap/&#34;&gt;display=swapとはなにか&lt;/a&gt;で、Google Fontsを読み込むときはURLパラメータに &lt;code&gt;display=swap&lt;/code&gt; をつけるといいよと言った。というわけで、それ以降、『目標をセンターに入れて、display=swap&amp;hellip;』と盲目的に考えるようになってた。&lt;/p&gt;

&lt;p&gt;おさらいとして &lt;code&gt;display=swap&lt;/code&gt; では、まず代替フォントを表示し、Webフォントをダウンロードしたら、随時スワップするという挙動になる。この場合、代替フォントからWebフォントへ切り替わる &lt;strong&gt;FOUT (flash of unstyled text)&lt;/strong&gt; が起こってしまう。こんな感じ↓&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0421/00.png?v2&#34; alt=&#34;&#34; /&gt;
出典：&lt;a href=&#34;https://codepen.io/simonjhearne/pen/rNMGJyr&#34;&gt;font-face descriptor playground&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まぁ何も表示されないよりかは良いかと思うわけだが、時は流れ、最近ではWebの指標として、&lt;a href=&#34;https://web.dev/vitals/&#34;&gt;Web Vitals&lt;/a&gt;というものがある。その中の&lt;a href=&#34;https://web.dev/cls/&#34;&gt;CLS&lt;/a&gt;（Cumulative Layout Shift）では、レイアウトの安定性というのも評価する。つまり、代替フォントからWebフォントへ切り替わる際のレイアウトのズレ・ちらつきが、このCLSを下げてしまう原因になる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0421/01.png?v2&#34; alt=&#34;&#34; /&gt;
出典：&lt;a href=&#34;https://speakerdeck.com/notwaldorf/fontastic-web-performance?slide=74&#34;&gt;Fontastic web performance - Speaker Deck&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ということで、今回紹介する &lt;code&gt;font-display: optional&lt;/code&gt; の場合はどうなるかだが、100msのブロック期までにWebフォントを取得できたらWebフォントを表示する、できなかったら代替フォントを表示するという分かりやすい挙動。&lt;/p&gt;

&lt;p&gt;この場合、FOUTはないが、最初に100msのブロック期があるので不可視テキストが表示される &lt;strong&gt;FOIT(Flash of Invisible Text)&lt;/strong&gt; が起こってしまう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0421/02.png?v2&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;出典：&lt;a href=&#34;https://web.dev/preload-optional-fonts/&#34;&gt;Prevent layout shifting and flashes of invisible text (FOIT) by preloading optional fonts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;と思っていたら、Chrome 83で改善が行われ、&lt;code&gt;&amp;lt;link rel=&amp;quot;preload&amp;quot;&amp;gt;&lt;/code&gt; と一緒に使うことで、ブロック期に不可視テキストを表示せず、というかレンダリング自体をブロックして、100ms後に一気に表示することでレイアウトのカタツキを無くすことにしているようだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- HTML --&amp;gt;&lt;/span&gt;
 &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;preload&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NotoSansJP-Regular.woff2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;font&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;font/woff2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;crossorigin&lt;/span&gt; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* CSS */&lt;/span&gt;
@&lt;span style=&#34;color:#66d9ef&#34;&gt;font-face&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;font-family&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Noto Sans JP&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;font-style&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;normal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;font-weight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;400&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;local&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Noto Sans JP&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;NotoSansJP-Regular&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;woff2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;woff2&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;font-display&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;optional&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こんな感じに、fontファイルをpreloadして、optional設定すれば、レイアウトジャンクなしにWebフォントを読み込める。&lt;/p&gt;

&lt;h1 id=&#34;google-fonts&#34;&gt;Google Fonts&lt;/h1&gt;

&lt;p&gt;Google Fontsから読み込む場合の最善手については、CSS Wizardryさんが詳解な説明をしているので下記を読んでほしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://csswizardry.com/2020/05/the-fastest-google-fonts/&#34;&gt;The Fastest Google Fonts – CSS Wizardry – Web Performance Optimisation&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;preconnect&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://fonts.gstatic.com&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;crossorigin&lt;/span&gt; /&amp;gt;

&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;preload&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;style&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$CSS&amp;amp;display=swap&amp;#34;&lt;/span&gt; /&amp;gt;

&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$CSS&amp;amp;display=swap&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;media&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;print&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onload&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;this.media=&amp;#39;all&amp;#39;&amp;#34;&lt;/span&gt; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;長いので要点は上のように設定すればよい。&lt;code&gt;$CSS&lt;/code&gt; のところに自分の読み込みたいフォントのURLが当たる。まず最初に、woffファイルなどの配信元である&lt;code&gt;fonts.gstatic.com&lt;/code&gt;に事前に接続しておく。&lt;/p&gt;

&lt;p&gt;そいで、 &lt;code&gt;display=swap&lt;/code&gt;でスタイルシートをpreloadしておく。&lt;/p&gt;

&lt;p&gt;そいで、最後にGoogle Fontsのスタイルシートを設定するのだが、見慣れない記述がある。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;media=&amp;#34;print&amp;#34; onload=&amp;#34;this.media=&amp;#39;all&amp;#39;&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちょっまっ！印刷用CSSになってんじゃん！と思うじゃん。それでいい。ブラウザはこのCSSを印刷メディアのCSSだと理解して、現在のレンダリングと無関係に読み込み始める。これが狙いだ。そして読み込み終わったら現在のメディアに適用するといったことをしている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.filamentgroup.com/lab/load-css-simpler/&#34;&gt;The Simplest Way to Load CSS Asynchronously | Filament Group, Inc.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これが一番簡単に非同期でCSSを読み込めるハックっぽい。&lt;code&gt;display=optional&lt;/code&gt;ではないのは、この読み込み方と相性が悪いためだそうだ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0421/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;というわけで、本ブログでもNoto Sans JPを読み込んでいたので、CSS Wizardryさんのやり方で読み込んだら大幅にPeformanceが改善した。これはCLS改善というよりCSSの非同期読み込みによる改善が大きな要因だ。CLS自体は&lt;code&gt;0.004 -&amp;gt; 0&lt;/code&gt;になったので、まぁ、うん。。。&lt;/p&gt;

&lt;p&gt;結局、色々調べた結果、t32kにはWebフォントは早すぎると感じたので、本ブログでのNoto Sans JPの読み込みを辞めた。うん、スッキリ。お後がよろしいようで。&lt;/p&gt;

&lt;h3 id=&#34;参考資料&#34;&gt;参考資料&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.dev/preload-optional-fonts/&#34;&gt;Prevent layout shifting and flashes of invisible text (FOIT) by preloading optional fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.dev/font-display/&#34;&gt;Ensure text remains visible during webfont load&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.dev/avoid-invisible-text/&#34;&gt;Avoid invisible text during font loading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.dev/optimize-webfont-loading/&#34;&gt;Optimize WebFont loading and rendering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.dev/reduce-webfont-size/&#34;&gt;Reduce WebFont Size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jxck.io/entries/2021-02-25/font-metrics-override.html&#34;&gt;Web Font のメトリクス上書きによる CLS の改善 | blog.jxck.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jxck.io/entries/2018-02-13/web-font-woff2.html&#34;&gt;WebFont の WOFF2 対応によるサイズ最適化 | blog.jxck.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
        <item>
            <title>ユーザーインタビューをはじめよう</title>
            <link>https://t32k.me/mol/log/978-4802510585-user-interviews/</link>
            <pubDate>Mon, 12 Apr 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4802510585-user-interviews/</guid>
            <description>&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://amazon.co.jp/dp/4802510586/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://m.media-amazon.com/images/P/B071X9BKPC.01._SCLZZZZZZZ_SX500_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;ユーザーインタビューをはじめよう&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;スティーブ・ポーチガル (著), 安藤貴子 (翻訳)&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;サブタイトルにあるように「聞くこと」入門の本だなぁという小並感。UXリサーチのためのユーザーインタビューと聞くと小難しいテクニック満載なのかなと思ったのだけど、読んでみると、信頼関係（ラポール）構築とか静かな環境を準備するとか当たり前だけど大事なことについて解説している。&lt;/p&gt;

&lt;p&gt;ユーザーインタビューする機会なんて、まぁそうそうにはないが「聞くこと」に関しては、日常的にしている行為であるので、聞き上手になりたければ本書を手にとってみるのもありだろう。&lt;/p&gt;

&lt;p&gt;最近では、エンジニアがポッドキャストを配信したりYoutuberになったりしてるから、そうゆうケースで、ゲストから面白い話を聞く術を身につけるという点でも良いかもしれない。&lt;/p&gt;

&lt;p&gt;そいうゆうわけで当たり前をちゃんとやっていくために必要な本だと思った。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>100Wの急速充電器を購入した</title>
            <link>https://t32k.me/mol/log/b07fsm5lkw-hyppr-pd-gan-100w/</link>
            <pubDate>Sun, 28 Mar 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/b07fsm5lkw-hyppr-pd-gan-100w/</guid>
            <description>&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0328/00.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最近、16インチMacBook Proを持ち歩くようになった。これが重いこと重いこと&amp;hellip;せめてものあらがいで、充電器だけでも軽量化しようと思った。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0328/01.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/gp/product/B07FSM5LKW/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/71G4xbMW5aL._AC_SL1500_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;Hyppr PD 充電器 100W E-MARK線付き 急速充電器 GaN (窒化ガリウム)採用 タイプC 2USB-Cポート【PD3.0対応/PSE認証済/折畳式/】最新のMacBook Pro 16&#34;対応 (ブラック)&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;ブランド: Hyppr&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Hyppr PD 100W GaN 急速充電器というのものを購入した。流行りのGaNだ！ MacBook Pro標準の充電器と比べて、まぁ少し、ひとまわり小さいが、厚さは本製品のほうが厚いので、そこまで感動がない。&lt;/p&gt;

&lt;p&gt;黒色が好きなので、黒を買ったが白色のほうが安い。（どうゆうことよ）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0328/02.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;重さが89g軽い！（うん微妙&amp;hellip;）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0328/03.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;充電器だけではMacBook Proを充電できないので、USB-Cケーブルも軽量化が図れるぞ！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0328/04.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;標準でついてくるケーブルは2mもあるので、もっと短いほうがいいということで、Ankerの100W充電できる0.9mのUSB-Cケーブルを購入した。17.9g軽い！（ちなみに、Hyppr PD充電器に付属のUSB-Cケーブルがついてくるの買う必要はない）&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/gp/product/B072JYDQ7N/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/51Lw0-1QYnL._AC_SL1200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;Anker PowerLine II USB-C &amp; USB-C 3.1(Gen2) ケーブル(0.9m ブラック)【Power Delivery対応/USB-IF認証取得/超高耐久】&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;ブランド: Hyppr&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;ということで、106.9gの軽量化に成功した！&lt;/p&gt;

&lt;p&gt;約100gなんて、ちょっと文庫本でも同じリュックサックに入れたら帳消しになるくらいだけど、両手で持って比べてみるとやっぱ軽いなぁと思うので、精神的に軽くなったんだと強く思い込もうと思ったのであった。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>NETFLIXの最強人事戦略</title>
            <link>https://t32k.me/mol/log/978-4334962210-netflix/</link>
            <pubDate>Mon, 15 Mar 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4334962210-netflix/</guid>
            <description>&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://amazon.co.jp/dp/4334962211/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://m.media-amazon.com/images/I/41V5QfScRtL.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;NETFLIXの最強人事戦略&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;パティ・マッコード (著), 櫻井祐子  (翻訳)&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;ちょっと前の本。この本を読む前まではネットフリックスと聞くと強いエンジニアたちが集まって、ハイパフォーマンスを出さなくなったエンジニアは、バッサバッサ解雇するようなイメージだったが、この本を読む限り、ちょっと違うようだ。&lt;/p&gt;

&lt;p&gt;プロスポーツチームのように考えれば分かりやすいのかもしれない。プロスポーツ選手は多額の報酬をもらえるかわりに、報酬に見合った活躍をしなければ契約を解除される。エンジニアも（ネットフリックスのエンジニアは特に）またプロスポーツ選手並かそれに近い報酬を得ていることだろうから、この考えをエンジニアにあてはめるのは間違ってないのかもしれない。&lt;/p&gt;

&lt;p&gt;またプロスポーツ選手は加齢によるパフォーマンス低下というあらがいようがない事実はあるが、エンジニアはまぁそこまで極端に落ちることがない分、よいかもしれない。本書でもエンジニアのパフォーマンス不足による解雇例はあるが、それよりも事業フェーズの変化によるエンジニアとの価値観のミスマッチが多いみたいだ。&lt;/p&gt;

&lt;p&gt;例えば、できたてのほやほやスタートアップであれば、従業員数もまだ少ないので、みんなファミリーみたいに感じで仕事ができるが、会社が大きくなるにつれて、そういった感覚が希薄になってくる。ネットフリックスもまたそういった成長をし、『昔はよかった〜』と思うような従業員に関してはどんどん辞めてもらってるそうだ。プロスポーツチームも監督が変われば、監督の方針にあわない選手は解雇され、方針にあう選手を他のチームから招き入れたりしている。&lt;/p&gt;

&lt;p&gt;解雇と聞くと、やはりとんでもない不安なイメージがあるのは日本人だからだろうか。もっと気楽にとらえても良いのかもしれない。会社と向かう方向が違うと感じたのなら、さっさとお互い別れて、同じ方向に向かう人・会社のところに行ったほうが結果的にはよいのかもしれない。この辺は、&lt;a href=&#34;https://t32k.me/mol/mol/log/978-4478062579-alliance/&#34;&gt;ALLIANCE アライアンス&lt;/a&gt;でも同じことが言われていた。&lt;/p&gt;

&lt;p&gt;あと、従業員エンゲージメントを高めるためにやたらパーティなりいろんな福利厚生をつける会社があるが、ネットフリックスはこれに懐疑的である。成功に貢献することが最大のモチベーションと述べてあるように、確かに、適切な目標設定をし、それに向かって問題解決してるときこそ、仕事している感があってモチベーションが高いような気がする。いつかはネットフリックスでエンジニアをしてみたいと思わせる一冊だった。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>一人から始めるユーザーエクスペリエンス</title>
            <link>https://t32k.me/mol/log/978-4621089514-uxone/</link>
            <pubDate>Mon, 15 Mar 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4621089514-uxone/</guid>
            <description>&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://amazon.co.jp/dp/462108951X/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://m.media-amazon.com/images/I/51jGjqYqbbL.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;一人から始めるユーザーエクスペリエンス&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;長谷川 敦士(監修), 深澤 大気(翻訳), 森本 恭平 (翻訳)　他&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;昔、購入して積ん読してあったのをようやく読了。デザイナー向けの本かなと思ったらそうでもなかった。どちらかというと、企業のWeb担当者などがUXデザインやるぞ！と思ったときに、どうやって一人で始めていくかを解説してある。なので、UXデザインで使う各手法について軽く説明してある程度である。自分で実践してもっと知りたいと思ったら、ペルソナなり、ユーザービリティテストなりの専門書を手にとって見るのもよいだろう。&lt;/p&gt;

&lt;p&gt;個人的にUX関連の手法というかワードがいっぱいあって、ごっちゃになっていたので、各ポイントを簡潔に説明してあったのは良かった。またUXデザイナーはいわゆるデザイナーだけのキャリアアップの職種ではなく、エンジニアからUXデザイナーになることもあれば、コンテンツ担当者からUXデザイナーになるこもとある。&lt;/p&gt;

&lt;p&gt;そういうわけで、デザイナーだけでなく、エンジニアなどの方も本書を手に取るとよいかもしれない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;現状把握と計画立案

&lt;ul&gt;
&lt;li&gt;UXセルフチェック&lt;/li&gt;
&lt;li&gt;UXプロジェクト計画&lt;/li&gt;
&lt;li&gt;リスニングツアー&lt;/li&gt;
&lt;li&gt;機会探索ワークショップ&lt;/li&gt;
&lt;li&gt;プロジェクトブリーフ&lt;/li&gt;
&lt;li&gt;UX戦略ワークショップ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ユーザーリサーチ

&lt;ul&gt;
&lt;li&gt;ユーザーリサーチ計画&lt;/li&gt;
&lt;li&gt;ゲリラユーザーリサーチ&lt;/li&gt;
&lt;li&gt;プロトペルソナ&lt;/li&gt;
&lt;li&gt;ヒューリスティックマークアップ&lt;/li&gt;
&lt;li&gt;相対評価&lt;/li&gt;
&lt;li&gt;コンテンツパターン&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;デザイン

&lt;ul&gt;
&lt;li&gt;デザインブリーフ&lt;/li&gt;
&lt;li&gt;デザイン原則&lt;/li&gt;
&lt;li&gt;スケッチ&lt;/li&gt;
&lt;li&gt;スケッチボード&lt;/li&gt;
&lt;li&gt;タスクフロー&lt;/li&gt;
&lt;li&gt;ワイヤーフレーム&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テストと検証

&lt;ul&gt;
&lt;li&gt;ペーパープロトタイプ・インタラクティブプロトタイプ&lt;/li&gt;
&lt;li&gt;ブラックハットセッション&lt;/li&gt;
&lt;li&gt;クイックアンドダーティユーザービリティテスト&lt;/li&gt;
&lt;li&gt;５秒間テスト&lt;/li&gt;
&lt;li&gt;UXヘルスチェック&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後に各フェーズにおけるUX手法の目次を置いておく。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>デザインの伝え方</title>
            <link>https://t32k.me/mol/log/978-4873117799-design/</link>
            <pubDate>Sun, 14 Mar 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4873117799-design/</guid>
            <description>&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873117798/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/41Qw6D84dFL._SX351_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;デザインの伝え方&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;Tom Greever, 坂田 一倫他&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;エンジニアもコードレビューのときにいろいろ気をつけることはあるが、こちらの本はデザイナーがデザインレビューするときではなくて、デザイナーがデザインの決定権を持つステークホルダーなどに自分のデザインを説明する方法について解説している。&lt;/p&gt;

&lt;p&gt;デザインとは見た目に起因するところが多いので、デザイナー以外から、いろいろ言われやすい職種である。エンジニアをしていて、ディレクターなりPMなりに、そこは三項演算子使わないほうがいいんじゃない？みたいなことはヒャクパー言われたことないのにも関わらず、デザイナーはデザイナーからはもちろん、すべてのステークホルダーからなんやかんや言われる。&lt;/p&gt;

&lt;p&gt;偉大なデザイナーは偉大なコミュニーケーターであるように、本書もまたデザインの本というより、コミュニケーションの本に近い。それは目次をかいつまんでもながめてみると『親しい間柄になる努力を』、『良好な関係を築く・ものを贈る』などと、まぁなんとウェットなコミュニケーションであろうか。&lt;/p&gt;

&lt;p&gt;もちろんデータに基づく決定や、論理的な説明でわかってもらえればそれにこしたことはないが、そうもいかないのが現実で、事前の根回しだったり、そのデザイナーの信頼残高がものを言ったりするのも事実。&lt;/p&gt;

&lt;p&gt;とはいえ、やはり自分はこうゆうのが苦手だったりするので、偉大なデザイナーさんに同情するとともに敬意を持って相対していきたいと思う一冊だった。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>SegmentedPickerによるビュー切り替えトランジション</title>
            <link>https://t32k.me/mol/log/segmentedpickerstyle-transition/</link>
            <pubDate>Wed, 24 Feb 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/segmentedpickerstyle-transition/</guid>
            <description>&lt;p&gt;まぁ題名の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    @State &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; selection = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        VStack(spacing:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
            Picker(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;画面切替&amp;#34;&lt;/span&gt;, selection: &lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;selection) {
                Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;).tag(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
                Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;).tag(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            }.pickerStyle(SegmentedPickerStyle()).padding()
            
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; selection == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
                viewA
            } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
                viewB
            }
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; viewA: some View {
        ZStack {
            Color(.blue).edgesIgnoringSafeArea(.all)
            Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;).foregroundColor(.white)
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; viewB: some View {
        ZStack {
            Color(.red).edgesIgnoringSafeArea(.all)
            Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;).foregroundColor(.white)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;よくあるタブ切り替えのような感じのものをPickerのSegmentedPickerStyleで＠Stateを切り替えることでビューも変わる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0224/00.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;普通に作ったらこんなかんじで、パッパッと切り替わる。当たり前だ。transitionを指定してないから。&lt;/p&gt;

&lt;p&gt;どう動かしたら、ビュー遷移のメンタルモデルが自然にできあがるのだろうか。こうゆう感じの。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0224/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;セグメントコントロールを右にスライドしているのだから（A-&amp;gt;B）、それに対応するビューも左から右に出てきてほしいものだ。イメージ的に。なんとなく。たぶん。その逆（A&amp;lt;-B）は右から出て左にいってほしいもの。イメージ的に。なんとなく。たぶん。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;VStack {
    Picker
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; selection == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
        viewAlpha
            .transition(
	            .asymmetric(
		            insertion: .move(edge: .trailing),
		            removal: .move(edge: .leading)
		        ))
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        viewBeta
            .transition(
	            .asymmetric(
		            insertion: .move(edge: .leading),
		            removal: .move(edge: .trailing)
		        ))
    }
}.animation(.&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最初はGeometryReaderでビューの幅サイズを求めて、オフセット値をいじって画面外まで移動させればいいのかな？めんどくさいなーいやだなーと思ったけど、&lt;/p&gt;

&lt;p&gt;trainsitionを設定するだけでよかった。そう、SwiftUIならね！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;.transition(.move(edge: .leading)) &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;普通はこんな感じでtransitionを指定すると思うのだけど、これだと一方方向にしか動かない。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;.transition(
	.asymmetric(
		insertion: .move(edge: .trailing),
		removal: .move(edge: .leading)
))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;asymmetric&lt;/code&gt;を利用することで、transitionのinsertionとremovalを個別に指定することができる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0224/01.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;うん、なんかそれっぽくなった🤗&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>