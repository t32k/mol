<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>MOL</title>
        <generator uri="https://gohugo.io">Hugo</generator>
        <link>https://t32k.me/mol/</link>
        
        
        
        <updated>Mon, 26 Apr 2021 00:00:00 UTC</updated>
        
        <item>
            <title>【翻訳】私ってデザインエンジニアかも...</title>
            <link>https://t32k.me/mol/log/i-think-im-a-design-engineer/</link>
            <pubDate>Mon, 26 Apr 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/i-think-im-a-design-engineer/</guid>
            <description>

&lt;p&gt;&lt;cite class=&#34;citation&#34;&gt;
&lt;img src=&#34;https://t32k.me/mol/mol/images/people/trys_mudford.jpg&#34; alt=&#34;Trys Mudford&#34; /&gt;
Original：&lt;a href=&#34;http://timkadlec.com/2010/12/the-color-of-speed/&#34;&gt;I think I might be a design engineer&amp;hellip;&lt;/a&gt;（&lt;time&gt;2021-02-17&lt;/time&gt;）by &lt;a href=&#34;https://twitter.com/trysmudford&#34;&gt;Trys Mudford&lt;/a&gt;
&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;この記事はデザインエンジニアリングについてのシリーズの一部です。Web開発者の役割の変化やデザインとエンジニアリングの違いについて議論していきたいと思います。長くなりそうだったので、この記事を補足するために &lt;a href=&#34;https://www.trysmudford.com/blog/prototyping/&#34;&gt;Prototyping&lt;/a&gt;、&lt;a href=&#34;https://www.trysmudford.com/blog/design-foundations/&#34;&gt;Systemised design foundations&lt;/a&gt;と&lt;a href=&#34;https://www.trysmudford.com/blog/designer-and-developer-relationship/&#34;&gt;The designer &amp;amp; developer relationship&lt;/a&gt;に記事を分けました。それでは始めましょう。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;数年前から、自分がWeb開発のどの領域に当てはまるのか考えてきました。自分のキャリアを振り返れば、ある種の仕事に収束しているのを感じていましたが、それが何という名前なのか、今までは分かりませんでした。&lt;/p&gt;

&lt;h2 id=&#34;web開発者はwebサイトを構築するのか&#34;&gt;Web開発者はWebサイトを構築するのか？&lt;/h2&gt;

&lt;p&gt;「Web開発者」として最初の数年間、実際のところ、その役割はWebサイトを構築することを意味しなかったのです。Webサイトをコピーして更新したり、ファイルをFTPでアップロードしたり、お茶を入れたり、何か問題が起きたときにサーバー管理者に連絡したりしていました。&lt;/p&gt;

&lt;p&gt;しだいに責任ある仕事を任されるようになり、実際にWebサイトを構築するようになりました。しかし、それだけではなく、インフラの管理、メールテンプレートの作成、企画の立案、マーケティングキャンペーンの手伝いなども行っていました。それはただWebサイトを構築するだけではありません。&lt;/p&gt;

&lt;p&gt;とあるスタートアップに入社したことで、2人の新しいデザイナーと、プロダクトのヘッドレスAPIを開発するバックエンド・エンジニアリング・チームと初めて出会いました。フロントエンドチームは、「フロント」と「バックオブフロントエンド」の両方を担当しました。&lt;a href=&#34;https://bradfrost.com/blog/post/front-of-the-front-end-and-back-of-the-front-end-web-development/&#34;&gt;ボタンを作り、それをつなぎ込んでいく&lt;/a&gt;。今でもWebサイトを開発していますが、エンジニアリングチームとの共同作業です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://clearleft.com/&#34;&gt;Clearleft&lt;/a&gt;のようなデザイン力の高い会社の一員になったことで、デザイナーとエンジニアのより良いコラボレーションの方法に目を向けるようになったり、デザインプロセス全体をより深く理解するようになりました。すべてのプロジェクトとは言いませんが、「フロント・オブ・フロントエンド」に注力するようになり、実際のWebサイトを完成するために「バック・オブ・フロントエンド」をエンジニアリング・チームに引き継ぐようになっています。&lt;/p&gt;

&lt;h2 id=&#34;デザインの意図を理解しリリースする&#34;&gt;デザインの意図を理解しリリースする&lt;/h2&gt;

&lt;p&gt;これはWeb開発者の仕事の中でも非常に大きな部分を占めています。しかも、ビジュアルデザインだけではなく、リサーチ、UX、プロダクト、コンテンツ、それまでのプロセス全体が対象となります。プロジェクトに参加する前の良いアイデアをすべて取り入れ、それらをエレガントにまとめ上げ、ユーザーに適切に提供するにはどうすればよいでしょうか。&lt;/p&gt;

&lt;p&gt;あなたが「Webサイトを構築する」Web開発者であるならば、それはあなたの責任です。しかし、もしあなたが開発工程の末端ではないとしたらどうでしょう？もしあなたが自分のコードをエンジニアに渡せるとしたら&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;webのためのweb開発者&#34;&gt;WebのためのWeb開発者&lt;/h2&gt;

&lt;p&gt;大規模な代理店やほとんどのプロダクトチームには、「エンジニアリング」チームがあり、それは2つの領域に分かれています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;バックエンド&lt;/li&gt;
&lt;li&gt;バック・オブ・フロントエンド&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一般論ですが、これらの分野の開発者は「システムを考える人」であり、プログラミング &amp;gt; デザインという考え方で物事に取り組む傾向があります。私の経験では、彼らの脳はそのように働く傾向があるのです。彼らのスキルは、エレガントで堅牢、かつスケーラブルなコードを書くことで、何か問題が起きたときにプロダクトが破綻しないようにすることです。彼らのスキルは、プロダクト全体を合理的なチャンクに分解し、データを効率的に保存して、簡単にクエリを投げるようににすることです。また、データの漏洩を防ぎ、ユーザーが不正なデータを保存するのを阻止し、ハッカーの攻撃を阻止することにあります。&lt;/p&gt;

&lt;p&gt;彼らのスキルは（繰り返しますが、あくまで一般論です）、デザインのニュアンスを理解することではありません。誤解しないでください、それは素晴らしいことです。このようなチームで働く機会を持っているなら、自分が得意なことに集中して、本当のプロに専門分野を任せることができるのは、とても良いことです。このチームでは、（これまで説明してきた）Web開発者は、より大きな開発工程の一部です。彼らは&lt;strong&gt;Webサイトを構築&lt;/strong&gt;するというよりも&lt;strong&gt;Webのために構築している&lt;/strong&gt;のです。&lt;/p&gt;

&lt;h2 id=&#34;デザイン-エンジニアリングの溝&#34;&gt;デザイン→エンジニアリングの溝&lt;/h2&gt;

&lt;p&gt;しかし、最近では「デザイン」から「エンジニアリング」へと直進し、フロント・オブ・フロントエンドを完全に見落としている組織が増えています、結局、デザインの次の段階がコードなのだから、エンジニアにUIを作らせればいいのではないか。ちょっと待って下さい、この2つの機能の間にある巨大な溝に飛び込むことは、素晴らしいデザインの意図を失う可能性があります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/natalyathree&#34;&gt;Natalya Shelburne&lt;/a&gt;氏の&lt;a href=&#34;https://beyondtellerrand.com/events/berlin-2019/speakers/natalya-shelburne&#34;&gt;Beyond Tellerrandでの講演&lt;/a&gt;から引用したスライドが、このギャップを説明するのにうってつけなので、私は大好きです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0427/0.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ソフトウェアエンジニアの帽子をかぶってデザイナーと仕事をしていると、まるで、ただの丸を渡されて、美しいフクロウを作らなければならないような気分になります。彼らはコードや品質、私がアーキテクチャでやらなければならないことを理解も評価もせず、Webサイトの写真を見てばかり、私が自分がヒーローのように感じます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0427/1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;一方で、私がデザイナーとしてプロジェクトに参加しているとき、どのデザインでも細部まで完璧に仕上げたフクロウを誰かに渡すと、彼らはdivを渡してきます。ごめん、それはただの丸です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上記の引用と画像は、Natalyaのトークから抜粋したものです。&lt;a href=&#34;https://beyondtellerrand.com/events/berlin-2019/speakers/natalya-shelburne&#34;&gt;スクリプト&lt;/a&gt;・&lt;a href=&#34;https://vimeo.com/373397621&#34;&gt;講演&lt;/a&gt;には一見の価値があります。&lt;/p&gt;

&lt;p&gt;どちらの領域でも、期待が満たされないことに失望することがあります。しかし、このように2つの役割が異なる考え方を持っている場合、効率的に引き継ぎを成功させるためにはどうすればよいのでしょうか？&lt;/p&gt;

&lt;h2 id=&#34;私たちのアプローチ&#34;&gt;私たちのアプローチ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.trysmudford.com/blog/design-foundations/&#34;&gt;Design foundations&lt;/a&gt;&lt;br /&gt;
デザインやコーディングの段階に入る前に、私たちはプロジェクトを管理するための基本的な指示や計算、つまり&lt;strong&gt;タイポグラフィ、スペース、カラー、グリッド&lt;/strong&gt;を作成します。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.trysmudford.com/blog/prototyping/&#34;&gt;Prototyping&lt;/a&gt;&lt;br /&gt;
デザインが表示される場所は最終的にはブラウザなので、デザインを早く実際のデバイスで動かすことができれば、仮定をより早く検証することができます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;デザインの翻訳&#34;&gt;デザインの翻訳&lt;/h2&gt;

&lt;p&gt;大規模な開発工程の中でWeb開発者としての私たちの目標は可能な限り最善の方法でデザインを「翻訳」することだと思います。経験上、スクラップからシステムを構築するよりも、開発とデザインの両方がシステムを使って構築されていれば、それはかなり簡単なことです。だからこそ私たちは、デザイン段階からコーディング入り、連携して一緒に意思決定するようにしています。つまり、フロントエンドのコードはデザインの延長線上にあります。&lt;/p&gt;

&lt;p&gt;あるいは、Jamesがこう言っています：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;プロダクトのコードバージョンの忠実性は、デザインの後ではなく、デザイン段階で構築されます。開発者は、デザイナーのマイクが床に落ちる前にキャッチするのを待つのではなく、デザインチームに組み込まれます。 ― James Gilyead&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;この役割はなんですか&#34;&gt;この役割はなんですか？&lt;/h2&gt;

&lt;p&gt;このような方法はとても効果的であり、私の興味を非常にかき立てました。私は、&lt;a href=&#34;https://www.trysmudford.com/blog/rapid-building/&#34;&gt;迅速なビルド&lt;/a&gt;、システム設計、エレガントでスケーラブルなコードを書くことが好きです。&lt;/p&gt;

&lt;p&gt;しかし、もはや&lt;strong&gt;Webサイトを構築している&lt;/strong&gt;とは思えませんし、&lt;strong&gt;Webのための構築している&lt;/strong&gt;とも思えないこともあります。たとえファンデーションがプロダクトに組み込まれたとしても、プロトタイプは、ほとんどが捨てられてしまいます。デザインをエンジニアリングに翻訳するためや、プロジェクトの前提条件を検証するという目的を果たした後、消えてしまうのです。ある意味で、これは&lt;strong&gt;エンジニアのためのビルド&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;このささいな気持ちからこの役割には名前があるのではないかと考えました。そしたらあったのです。&lt;/p&gt;

&lt;h2 id=&#34;デザインエンジニアリング&#34;&gt;✨ デザインエンジニアリング ✨&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.designbetter.co/design-engineering-handbook/&#34;&gt;デザインエンジニアリング・ハンドブック&lt;/a&gt;を読んでいて、第1章の最後にある段落が私の心を捉えました。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;デザインエンジニアリングとは、デザインとエンジニアリングの重複部分を精査し、納品やアイデアの検証を迅速に行うための分野の名称です。プロトタイピングからプロダクションレディなコードの作成まで、デザイン決定を迅速に行い、リスクを軽減し、UIコードの品質を確立する職能です。デザインエンジニアの仕事は、プロダクト開発とイノベーションを最適化するために、デザイナーとエンジニアが最も効果的にコラボレーションできるようなシステム、ワークフロー、テクノロジーを包括しています。 ― Natalya Shelburne&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;それ-私&#34;&gt;それ、私&lt;/h3&gt;

&lt;p&gt;この段落は、私が気づかないうちに押し進めようとしていた役割を完全に言い当てています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アイデア検証&lt;/li&gt;
&lt;li&gt;ラピッドプロトタイピング&lt;/li&gt;
&lt;li&gt;プロダクションコード&lt;/li&gt;
&lt;li&gt;UIコードの品質&lt;/li&gt;
&lt;li&gt;便利なツールの作成&lt;/li&gt;
&lt;li&gt;システムのカプセル化&lt;/li&gt;
&lt;li&gt;プロジェクトの土台作り&lt;/li&gt;
&lt;li&gt;効果的なコラボレーション&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;イエス！これは非常にエキサイティングな発見でした。&lt;/p&gt;

&lt;h2 id=&#34;デザインエンジニアの居場所&#34;&gt;デザインエンジニアの居場所&lt;/h2&gt;

&lt;p&gt;デザインエンジニアは、先に述べた2つの分野の間の溝に位置し、2つの分野をスムーズに翻訳する方法を見つけ出します。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;片方で、デザイナーはピクセルパーフェクトなモックアップと美しいインターフェイスを目指します。もう片方でエンジニアはシステムの設計やパターンの最適化に努めます。その中間には、この2つのアプローチがどのように交わるかを考えるデザイナーとエンジニアがいます。 ― Adekunle Oduye | &lt;a href=&#34;https://www.designbetter.co/design-engineering-handbook/&#34;&gt;デザインエンジニアリング・ハンドブック&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;デザインエンジニアが書くもの&#34;&gt;デザインエンジニアが書くもの&lt;/h2&gt;

&lt;p&gt;CSSは、デザインエンジニアの主要言語です。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CSSはプログラミングデザインのために作られたもの。デザイナーとエンジニアの両方に役立つツールであるがゆえに、このような議論がなされることが多いのです。異なるメンタルモデルを持つ人たちが一緒に仕事をしなければならない交差点では、声が大きくなりがちで、時には敵対的になることもありますが、そこにこそ学びがあるのです。 ― Natalya Shelburne | &lt;a href=&#34;https://www.designbetter.co/design-engineering-handbook/&#34;&gt;デザインエンジニアリング・ハンドブック&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;どのようにコードを書こうとも、最終的にはHTML、CSS、JSに集約されます。デザインエンジニアは、ユーザーエクスペリエンスとデベロッパーエクスペリエンスのバランスを取る必要があります。チームが自分たちに合った方法で優れたコードを書けるようにすると同時に、ユーザーエクスペリエンスに悪影響を与えないようにしなければなりません。&lt;/p&gt;

&lt;p&gt;そのためには、通常は選択しないような技術を学び、使用することもありますが、それがチームに最高の製品を生み出す力を与えることは間違いありません。&lt;/p&gt;

&lt;p&gt;言葉もツールのひとつです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デザインとエンジニアリングが直面する課題を&lt;strong&gt;議論する&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;デザインエンジニアが提案するソリューションを&lt;strong&gt;説明する&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.trysmudford.com/blog/design-foundations/&#34;&gt;ファンデーション&lt;/a&gt;、&lt;a href=&#34;https://www.trysmudford.com/blog/prototyping/&#34;&gt;プロトタイプ&lt;/a&gt;、システムを&lt;strong&gt;ドキュメント化する&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本質的には、デザインエンジニアの目標は&lt;strong&gt;役に立つこと&lt;/strong&gt;です。UXが適切な判断を下すのを助け、リサーチがテストから最も有用なインサイトを得るのを助け、デザイナーが健全で実現可能なアイデアを生み出すのを助け、エンジニアがデザインの意図を理解するのを助ける。しかし、最も重要なのは、エンジニアリングチームのためにデザインを翻訳するためにできることをすることです。&lt;/p&gt;

&lt;p&gt;私たちは「クリエイター」と「メンテナー」という言葉を使います。それは、仕事をする人と、うまく維持する人です。しかし、私はこれはスペクトルだと考えています。デザインエンジニアは、クリエイター陣営の中でも最も「創造的」な部分に位置しており、素早く開発し、素早く失敗し、他のクリエイターが後に続くことができるように、悪いアイデアの道を切り開きます。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;そうですね、私は実際にデザインエンジニアかもしれません。今までやってきたことを大きく変えるわけではありません。私がこれまでに手がけてきた&lt;a href=&#34;https://www.trysmudford.com/blog/design-foundations/&#34;&gt;ファンデーション&lt;/a&gt;、&lt;a href=&#34;https://www.trysmudford.com/blog/prototyping/&#34;&gt;プロトタイプ&lt;/a&gt;、デザインシステムはすべてこの職能に該当します。 そして、そこにいるのが昔の私ではないということに、とても安心感を覚えています。もっとこのコミュニティを掘り下げていきたいと思っています。&lt;/p&gt;

&lt;p&gt;さて、ここで最後の質問ですが&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;すべてのプロジェクトでデザインエンジニアが必要でしょうか&#34;&gt;すべてのプロジェクトでデザインエンジニアが必要でしょうか？&lt;/h3&gt;

&lt;p&gt;あえて言えば、プロジェクトをまとめるエンジニアリングの職能があれば、イエスと言えるでしょう。さらに、私はすべてのプロジェクトのデザインプロセスに開発者が関わるべきだと確信しています。開発をウォーターフォールの下流に置くのは簡単なことですが、デザイン＆エンジニアリングの「フクロウの嘆き」からもわかるように、デザイン・エンジニアリングの関与が早ければ早いほど、プロセスはスムーズに進みます。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Webフォント読み込み戦略（2021年）</title>
            <link>https://t32k.me/mol/log/optimize-webfont-loading/</link>
            <pubDate>Wed, 21 Apr 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/optimize-webfont-loading/</guid>
            <description>

&lt;h1 id=&#34;preload-web-fonts&#34;&gt;Preload web fonts&lt;/h1&gt;

&lt;p&gt;前回、といっても2年前だが、&lt;a href=&#34;https://t32k.me/mol/mol/log/font-display-swap/&#34;&gt;display=swapとはなにか&lt;/a&gt;で、Google Fontsを読み込むときはURLパラメータに &lt;code&gt;display=swap&lt;/code&gt; をつけるといいよと言った。というわけで、それ以降、『目標をセンターに入れて、display=swap&amp;hellip;』と盲目的に考えるようになってた。&lt;/p&gt;

&lt;p&gt;おさらいとして &lt;code&gt;display=swap&lt;/code&gt; では、まず代替フォントを表示し、Webフォントをダウンロードしたら、随時スワップするという挙動になる。この場合、代替フォントからWebフォントへ切り替わる &lt;strong&gt;FOUT (flash of unstyled text)&lt;/strong&gt; が起こってしまう。こんな感じ↓&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0421/00.png?v2&#34; alt=&#34;&#34; /&gt;
出典：&lt;a href=&#34;https://codepen.io/simonjhearne/pen/rNMGJyr&#34;&gt;font-face descriptor playground&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まぁ何も表示されないよりかは良いかと思うわけだが、時は流れ、最近ではWebの指標として、&lt;a href=&#34;https://web.dev/vitals/&#34;&gt;Web Vitals&lt;/a&gt;というものがある。その中の&lt;a href=&#34;https://web.dev/cls/&#34;&gt;CLS&lt;/a&gt;（Cumulative Layout Shift）では、レイアウトの安定性というのも評価する。つまり、代替フォントからWebフォントへ切り替わる際のレイアウトのズレ・ちらつきが、このCLSを下げてしまう原因になる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0421/01.png?v2&#34; alt=&#34;&#34; /&gt;
出典：&lt;a href=&#34;https://speakerdeck.com/notwaldorf/fontastic-web-performance?slide=74&#34;&gt;Fontastic web performance - Speaker Deck&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ということで、今回紹介する &lt;code&gt;font-display: optional&lt;/code&gt; の場合はどうなるかだが、100msのブロック期までにWebフォントを取得できたらWebフォントを表示する、できなかったら代替フォントを表示するという分かりやすい挙動。&lt;/p&gt;

&lt;p&gt;この場合、FOUTはないが、最初に100msのブロック期があるので不可視テキストが表示される &lt;strong&gt;FOIT(Flash of Invisible Text)&lt;/strong&gt; が起こってしまう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0421/02.png?v2&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;出典：&lt;a href=&#34;https://web.dev/preload-optional-fonts/&#34;&gt;Prevent layout shifting and flashes of invisible text (FOIT) by preloading optional fonts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;と思っていたら、Chrome 83で改善が行われ、&lt;code&gt;&amp;lt;link rel=&amp;quot;preload&amp;quot;&amp;gt;&lt;/code&gt; と一緒に使うことで、ブロック期に不可視テキストを表示せず、というかレンダリング自体をブロックして、100ms後に一気に表示することでレイアウトのカタツキを無くすことにしているようだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- HTML --&amp;gt;&lt;/span&gt;
 &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;preload&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NotoSansJP-Regular.woff2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;font&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;font/woff2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;crossorigin&lt;/span&gt; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* CSS */&lt;/span&gt;
@&lt;span style=&#34;color:#66d9ef&#34;&gt;font-face&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;font-family&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Noto Sans JP&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;font-style&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;normal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;font-weight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;400&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;local&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Noto Sans JP&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;NotoSansJP-Regular&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;woff2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;woff2&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;font-display&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;optional&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こんな感じに、fontファイルをpreloadして、optional設定すれば、レイアウトジャンクなしにWebフォントを読み込める。&lt;/p&gt;

&lt;h1 id=&#34;google-fonts&#34;&gt;Google Fonts&lt;/h1&gt;

&lt;p&gt;Google Fontsから読み込む場合の最善手については、CSS Wizardryさんが詳解な説明をしているので下記を読んでほしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://csswizardry.com/2020/05/the-fastest-google-fonts/&#34;&gt;The Fastest Google Fonts – CSS Wizardry – Web Performance Optimisation&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;preconnect&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://fonts.gstatic.com&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;crossorigin&lt;/span&gt; /&amp;gt;

&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;preload&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;style&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$CSS&amp;amp;display=swap&amp;#34;&lt;/span&gt; /&amp;gt;

&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$CSS&amp;amp;display=swap&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;media&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;print&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onload&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;this.media=&amp;#39;all&amp;#39;&amp;#34;&lt;/span&gt; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;長いので要点は上のように設定すればよい。&lt;code&gt;$CSS&lt;/code&gt; のところに自分の読み込みたいフォントのURLが当たる。まず最初に、woffファイルなどの配信元である&lt;code&gt;fonts.gstatic.com&lt;/code&gt;に事前に接続しておく。&lt;/p&gt;

&lt;p&gt;そいで、 &lt;code&gt;display=swap&lt;/code&gt;でスタイルシートをpreloadしておく。&lt;/p&gt;

&lt;p&gt;そいで、最後にGoogle Fontsのスタイルシートを設定するのだが、見慣れない記述がある。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;media=&amp;#34;print&amp;#34; onload=&amp;#34;this.media=&amp;#39;all&amp;#39;&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちょっまっ！印刷用CSSになってんじゃん！と思うじゃん。それでいい。ブラウザはこのCSSを印刷メディアのCSSだと理解して、現在のレンダリングと無関係に読み込み始める。これが狙いだ。そして読み込み終わったら現在のメディアに適用するといったことをしている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.filamentgroup.com/lab/load-css-simpler/&#34;&gt;The Simplest Way to Load CSS Asynchronously | Filament Group, Inc.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これが一番簡単に非同期でCSSを読み込めるハックっぽい。&lt;code&gt;display=optional&lt;/code&gt;ではないのは、この読み込み方と相性が悪いためだそうだ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0421/03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;というわけで、本ブログでもNoto Sans JPを読み込んでいたので、CSS Wizardryさんのやり方で読み込んだら大幅にPeformanceが改善した。これはCLS改善というよりCSSの非同期読み込みによる改善が大きな要因だ。CLS自体は&lt;code&gt;0.004 -&amp;gt; 0&lt;/code&gt;になったので、まぁ、うん。。。&lt;/p&gt;

&lt;p&gt;結局、色々調べた結果、t32kにはWebフォントは早すぎると感じたので、本ブログでのNoto Sans JPの読み込みを辞めた。うん、スッキリ。お後がよろしいようで。&lt;/p&gt;

&lt;h3 id=&#34;参考資料&#34;&gt;参考資料&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.dev/preload-optional-fonts/&#34;&gt;Prevent layout shifting and flashes of invisible text (FOIT) by preloading optional fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.dev/font-display/&#34;&gt;Ensure text remains visible during webfont load&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.dev/avoid-invisible-text/&#34;&gt;Avoid invisible text during font loading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.dev/optimize-webfont-loading/&#34;&gt;Optimize WebFont loading and rendering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.dev/reduce-webfont-size/&#34;&gt;Reduce WebFont Size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jxck.io/entries/2021-02-25/font-metrics-override.html&#34;&gt;Web Font のメトリクス上書きによる CLS の改善 | blog.jxck.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jxck.io/entries/2018-02-13/web-font-woff2.html&#34;&gt;WebFont の WOFF2 対応によるサイズ最適化 | blog.jxck.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
        <item>
            <title>ユーザーインタビューをはじめよう</title>
            <link>https://t32k.me/mol/log/978-4802510585-user-interviews/</link>
            <pubDate>Mon, 12 Apr 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4802510585-user-interviews/</guid>
            <description>&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://amazon.co.jp/dp/4802510586/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://m.media-amazon.com/images/P/B071X9BKPC.01._SCLZZZZZZZ_SX500_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;ユーザーインタビューをはじめよう&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;スティーブ・ポーチガル (著), 安藤貴子 (翻訳)&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;サブタイトルにあるように「聞くこと」入門の本だなぁという小並感。UXリサーチのためのユーザーインタビューと聞くと小難しいテクニック満載なのかなと思ったのだけど、読んでみると、信頼関係（ラポール）構築とか静かな環境を準備するとか当たり前だけど大事なことについて解説している。&lt;/p&gt;

&lt;p&gt;ユーザーインタビューする機会なんて、まぁそうそうにはないが「聞くこと」に関しては、日常的にしている行為であるので、聞き上手になりたければ本書を手にとってみるのもありだろう。&lt;/p&gt;

&lt;p&gt;最近では、エンジニアがポッドキャストを配信したりYoutuberになったりしてるから、そうゆうケースで、ゲストから面白い話を聞く術を身につけるという点でも良いかもしれない。&lt;/p&gt;

&lt;p&gt;そいうゆうわけで当たり前をちゃんとやっていくために必要な本だと思った。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>100Wの急速充電器を購入した</title>
            <link>https://t32k.me/mol/log/b07fsm5lkw-hyppr-pd-gan-100w/</link>
            <pubDate>Sun, 28 Mar 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/b07fsm5lkw-hyppr-pd-gan-100w/</guid>
            <description>&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0328/00.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最近、16インチMacBook Proを持ち歩くようになった。これが重いこと重いこと&amp;hellip;せめてものあらがいで、充電器だけでも軽量化しようと思った。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0328/01.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/gp/product/B07FSM5LKW/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/71G4xbMW5aL._AC_SL1500_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;Hyppr PD 充電器 100W E-MARK線付き 急速充電器 GaN (窒化ガリウム)採用 タイプC 2USB-Cポート【PD3.0対応/PSE認証済/折畳式/】最新のMacBook Pro 16&#34;対応 (ブラック)&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;ブランド: Hyppr&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Hyppr PD 100W GaN 急速充電器というのものを購入した。流行りのGaNだ！ MacBook Pro標準の充電器と比べて、まぁ少し、ひとまわり小さいが、厚さは本製品のほうが厚いので、そこまで感動がない。&lt;/p&gt;

&lt;p&gt;黒色が好きなので、黒を買ったが白色のほうが安い。（どうゆうことよ）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0328/02.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;重さが89g軽い！（うん微妙&amp;hellip;）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0328/03.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;充電器だけではMacBook Proを充電できないので、USB-Cケーブルも軽量化が図れるぞ！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0328/04.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;標準でついてくるケーブルは2mもあるので、もっと短いほうがいいということで、Ankerの100W充電できる0.9mのUSB-Cケーブルを購入した。17.9g軽い！（ちなみに、Hyppr PD充電器に付属のUSB-Cケーブルがついてくるの買う必要はない）&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/gp/product/B072JYDQ7N/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/51Lw0-1QYnL._AC_SL1200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;Anker PowerLine II USB-C &amp; USB-C 3.1(Gen2) ケーブル(0.9m ブラック)【Power Delivery対応/USB-IF認証取得/超高耐久】&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;ブランド: Hyppr&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;ということで、106.9gの軽量化に成功した！&lt;/p&gt;

&lt;p&gt;約100gなんて、ちょっと文庫本でも同じリュックサックに入れたら帳消しになるくらいだけど、両手で持って比べてみるとやっぱ軽いなぁと思うので、精神的に軽くなったんだと強く思い込もうと思ったのであった。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>NETFLIXの最強人事戦略</title>
            <link>https://t32k.me/mol/log/978-4334962210-netflix/</link>
            <pubDate>Mon, 15 Mar 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4334962210-netflix/</guid>
            <description>&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://amazon.co.jp/dp/4334962211/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://m.media-amazon.com/images/I/41V5QfScRtL.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;NETFLIXの最強人事戦略&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;パティ・マッコード (著), 櫻井祐子  (翻訳)&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;ちょっと前の本。この本を読む前まではネットフリックスと聞くと強いエンジニアたちが集まって、ハイパフォーマンスを出さなくなったエンジニアは、バッサバッサ解雇するようなイメージだったが、この本を読む限り、ちょっと違うようだ。&lt;/p&gt;

&lt;p&gt;プロスポーツチームのように考えれば分かりやすいのかもしれない。プロスポーツ選手は多額の報酬をもらえるかわりに、報酬に見合った活躍をしなければ契約を解除される。エンジニアも（ネットフリックスのエンジニアは特に）またプロスポーツ選手並かそれに近い報酬を得ていることだろうから、この考えをエンジニアにあてはめるのは間違ってないのかもしれない。&lt;/p&gt;

&lt;p&gt;またプロスポーツ選手は加齢によるパフォーマンス低下というあらがいようがない事実はあるが、エンジニアはまぁそこまで極端に落ちることがない分、よいかもしれない。本書でもエンジニアのパフォーマンス不足による解雇例はあるが、それよりも事業フェーズの変化によるエンジニアとの価値観のミスマッチが多いみたいだ。&lt;/p&gt;

&lt;p&gt;例えば、できたてのほやほやスタートアップであれば、従業員数もまだ少ないので、みんなファミリーみたいに感じで仕事ができるが、会社が大きくなるにつれて、そういった感覚が希薄になってくる。ネットフリックスもまたそういった成長をし、『昔はよかった〜』と思うような従業員に関してはどんどん辞めてもらってるそうだ。プロスポーツチームも監督が変われば、監督の方針にあわない選手は解雇され、方針にあう選手を他のチームから招き入れたりしている。&lt;/p&gt;

&lt;p&gt;解雇と聞くと、やはりとんでもない不安なイメージがあるのは日本人だからだろうか。もっと気楽にとらえても良いのかもしれない。会社と向かう方向が違うと感じたのなら、さっさとお互い別れて、同じ方向に向かう人・会社のところに行ったほうが結果的にはよいのかもしれない。この辺は、&lt;a href=&#34;https://t32k.me/mol/mol/log/978-4478062579-alliance/&#34;&gt;ALLIANCE アライアンス&lt;/a&gt;でも同じことが言われていた。&lt;/p&gt;

&lt;p&gt;あと、従業員エンゲージメントを高めるためにやたらパーティなりいろんな福利厚生をつける会社があるが、ネットフリックスはこれに懐疑的である。成功に貢献することが最大のモチベーションと述べてあるように、確かに、適切な目標設定をし、それに向かって問題解決してるときこそ、仕事している感があってモチベーションが高いような気がする。いつかはネットフリックスでエンジニアをしてみたいと思わせる一冊だった。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>一人から始めるユーザーエクスペリエンス</title>
            <link>https://t32k.me/mol/log/978-4621089514-uxone/</link>
            <pubDate>Mon, 15 Mar 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4621089514-uxone/</guid>
            <description>&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://amazon.co.jp/dp/462108951X/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://m.media-amazon.com/images/I/51jGjqYqbbL.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;一人から始めるユーザーエクスペリエンス&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;長谷川 敦士(監修), 深澤 大気(翻訳), 森本 恭平 (翻訳)　他&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;昔、購入して積ん読してあったのをようやく読了。デザイナー向けの本かなと思ったらそうでもなかった。どちらかというと、企業のWeb担当者などがUXデザインやるぞ！と思ったときに、どうやって一人で始めていくかを解説してある。なので、UXデザインで使う各手法について軽く説明してある程度である。自分で実践してもっと知りたいと思ったら、ペルソナなり、ユーザービリティテストなりの専門書を手にとって見るのもよいだろう。&lt;/p&gt;

&lt;p&gt;個人的にUX関連の手法というかワードがいっぱいあって、ごっちゃになっていたので、各ポイントを簡潔に説明してあったのは良かった。またUXデザイナーはいわゆるデザイナーだけのキャリアアップの職種ではなく、エンジニアからUXデザイナーになることもあれば、コンテンツ担当者からUXデザイナーになるこもとある。&lt;/p&gt;

&lt;p&gt;そういうわけで、デザイナーだけでなく、エンジニアなどの方も本書を手に取るとよいかもしれない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;現状把握と計画立案

&lt;ul&gt;
&lt;li&gt;UXセルフチェック&lt;/li&gt;
&lt;li&gt;UXプロジェクト計画&lt;/li&gt;
&lt;li&gt;リスニングツアー&lt;/li&gt;
&lt;li&gt;機会探索ワークショップ&lt;/li&gt;
&lt;li&gt;プロジェクトブリーフ&lt;/li&gt;
&lt;li&gt;UX戦略ワークショップ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ユーザーリサーチ

&lt;ul&gt;
&lt;li&gt;ユーザーリサーチ計画&lt;/li&gt;
&lt;li&gt;ゲリラユーザーリサーチ&lt;/li&gt;
&lt;li&gt;プロトペルソナ&lt;/li&gt;
&lt;li&gt;ヒューリスティックマークアップ&lt;/li&gt;
&lt;li&gt;相対評価&lt;/li&gt;
&lt;li&gt;コンテンツパターン&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;デザイン

&lt;ul&gt;
&lt;li&gt;デザインブリーフ&lt;/li&gt;
&lt;li&gt;デザイン原則&lt;/li&gt;
&lt;li&gt;スケッチ&lt;/li&gt;
&lt;li&gt;スケッチボード&lt;/li&gt;
&lt;li&gt;タスクフロー&lt;/li&gt;
&lt;li&gt;ワイヤーフレーム&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テストと検証

&lt;ul&gt;
&lt;li&gt;ペーパープロトタイプ・インタラクティブプロトタイプ&lt;/li&gt;
&lt;li&gt;ブラックハットセッション&lt;/li&gt;
&lt;li&gt;クイックアンドダーティユーザービリティテスト&lt;/li&gt;
&lt;li&gt;５秒間テスト&lt;/li&gt;
&lt;li&gt;UXヘルスチェック&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後に各フェーズにおけるUX手法の目次を置いておく。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>デザインの伝え方</title>
            <link>https://t32k.me/mol/log/978-4873117799-design/</link>
            <pubDate>Sun, 14 Mar 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4873117799-design/</guid>
            <description>&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873117798/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/41Qw6D84dFL._SX351_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;デザインの伝え方&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;Tom Greever, 坂田 一倫他&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;エンジニアもコードレビューのときにいろいろ気をつけることはあるが、こちらの本はデザイナーがデザインレビューするときではなくて、デザイナーがデザインの決定権を持つステークホルダーなどに自分のデザインを説明する方法について解説している。&lt;/p&gt;

&lt;p&gt;デザインとは見た目に起因するところが多いので、デザイナー以外から、いろいろ言われやすい職種である。エンジニアをしていて、ディレクターなりPMなりに、そこは三項演算子使わないほうがいいんじゃない？みたいなことはヒャクパー言われたことないのにも関わらず、デザイナーはデザイナーからはもちろん、すべてのステークホルダーからなんやかんや言われる。&lt;/p&gt;

&lt;p&gt;偉大なデザイナーは偉大なコミュニーケーターであるように、本書もまたデザインの本というより、コミュニケーションの本に近い。それは目次をかいつまんでもながめてみると『親しい間柄になる努力を』、『良好な関係を築く・ものを贈る』などと、まぁなんとウェットなコミュニケーションであろうか。&lt;/p&gt;

&lt;p&gt;もちろんデータに基づく決定や、論理的な説明でわかってもらえればそれにこしたことはないが、そうもいかないのが現実で、事前の根回しだったり、そのデザイナーの信頼残高がものを言ったりするのも事実。&lt;/p&gt;

&lt;p&gt;とはいえ、やはり自分はこうゆうのが苦手だったりするので、偉大なデザイナーさんに同情するとともに敬意を持って相対していきたいと思う一冊だった。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>SegmentedPickerによるビュー切り替えトランジション</title>
            <link>https://t32k.me/mol/log/segmentedpickerstyle-transition/</link>
            <pubDate>Wed, 24 Feb 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/segmentedpickerstyle-transition/</guid>
            <description>&lt;p&gt;まぁ題名の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    @State &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; selection = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        VStack(spacing:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
            Picker(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;画面切替&amp;#34;&lt;/span&gt;, selection: &lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;selection) {
                Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;).tag(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
                Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;).tag(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            }.pickerStyle(SegmentedPickerStyle()).padding()
            
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; selection == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
                viewA
            } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
                viewB
            }
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; viewA: some View {
        ZStack {
            Color(.blue).edgesIgnoringSafeArea(.all)
            Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;).foregroundColor(.white)
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; viewB: some View {
        ZStack {
            Color(.red).edgesIgnoringSafeArea(.all)
            Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;).foregroundColor(.white)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;よくあるタブ切り替えのような感じのものをPickerのSegmentedPickerStyleで＠Stateを切り替えることでビューも変わる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0224/00.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;普通に作ったらこんなかんじで、パッパッと切り替わる。当たり前だ。transitionを指定してないから。&lt;/p&gt;

&lt;p&gt;どう動かしたら、ビュー遷移のメンタルモデルが自然にできあがるのだろうか。こうゆう感じの。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0224/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;セグメントコントロールを右にスライドしているのだから（A-&amp;gt;B）、それに対応するビューも左から右に出てきてほしいものだ。イメージ的に。なんとなく。たぶん。その逆（A&amp;lt;-B）は右から出て左にいってほしいもの。イメージ的に。なんとなく。たぶん。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;VStack {
    Picker
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; selection == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
        viewAlpha
            .transition(
	            .asymmetric(
		            insertion: .move(edge: .trailing),
		            removal: .move(edge: .leading)
		        ))
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        viewBeta
            .transition(
	            .asymmetric(
		            insertion: .move(edge: .leading),
		            removal: .move(edge: .trailing)
		        ))
    }
}.animation(.&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最初はGeometryReaderでビューの幅サイズを求めて、オフセット値をいじって画面外まで移動させればいいのかな？めんどくさいなーいやだなーと思ったけど、&lt;/p&gt;

&lt;p&gt;trainsitionを設定するだけでよかった。そう、SwiftUIならね！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;.transition(.move(edge: .leading)) &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;普通はこんな感じでtransitionを指定すると思うのだけど、これだと一方方向にしか動かない。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;.transition(
	.asymmetric(
		insertion: .move(edge: .trailing),
		removal: .move(edge: .leading)
))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;asymmetric&lt;/code&gt;を利用することで、transitionのinsertionとremovalを個別に指定することができる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2021/0224/01.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;うん、なんかそれっぽくなった🤗&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>受け師の道 百折不撓の棋士・木村一基</title>
            <link>https://t32k.me/mol/log/978-4808310479-kimura/</link>
            <pubDate>Wed, 24 Feb 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4808310479-kimura/</guid>
            <description>&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4808310473/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/51bKbz2WFyL._SX339_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;受け師の道 百折不撓の棋士・木村一基&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;樋口薫&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;最近、ABEMAで将棋チャンネルをよく見ている。藤井聡太王位・棋聖があまりにも強くて、異世界転生ラノベでよく見る俺つえーーー！！を現実世界で見せられているような感じで、最年少記録や連勝記録をどこまで更新できるのか見ていて面白い。&lt;/p&gt;

&lt;p&gt;そうゆうわけでもっぱら見る将になってしまったが、将棋の戦法というより、どちらかというと解説・聞き手の日常の話が好きで聞いている。当たり前だが藤井二冠以外にも棋士には色んな人がいて面白い。その中でも解説名人と言われている木村一基九段の話は特に面白くて、本書を手にとった。&lt;/p&gt;

&lt;p&gt;本書は2019年に最年長で王位タイトル獲得したを木村九段の話である。先述の通り、歯に衣着せぬ解説や指導でファンが多い木村九段が46歳にして念願のタイトル獲得で涙なしでは読めない。決して木村九段が弱いわけではない。羽生世代より少し若い程度なので、キャリア全盛期のほとんどが羽生永世七冠の無双時代とかぶっていることもあり、なかなかタイトルと縁がなかった。それでも挑戦権を獲得して挑戦するも、緊張・不眠のせいかタイトル戦で思うように実力を発揮できず、負けてしまうことも6度。&lt;/p&gt;

&lt;p&gt;7度目の挑戦で、豊島名人（当時）から王位を奪取した。最近はコンピュータソフトによる研究が盛んなせいか、若手の台頭が目立つ中で木村九段も積極的に将棋ソフトを駆使し自己研鑽に努めている。百折不撓の意味通り、何回挫折してあきらめず今なお成長を続ける木村九段を知れば、応援せざるをえないと思う。&lt;/p&gt;

&lt;p&gt;将棋をまったく知らない人でも楽しめるつくりとなっているが、やはり木村九段の将棋をさしているところを見てから読んだほうが100倍楽しめるだろう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://abema.tv/video/episode/288-23_s62_p40&#34;&gt;第3回AbemaTVトーナメント&lt;/a&gt;は、5分フィッシャールールという早指しなので、初心者でも見ていて面白いと思う。さらに将棋ではめずらしいチーム戦で、木村九段のチームが、本書にも出てくる行方尚史九段、野月浩貴八段の同い年トリオで非常に仲が良いおじさんチームとなっている。是非ともこちらを見てから本書を手に取るとよいだろう。&lt;/p&gt;

&lt;p&gt;本書のあとの話になるが、最年長でタイトルで獲得した木村九段だが、翌年には最年少で棋聖タイトルを獲得し、その勢いのまま王位タイトルに挑戦した藤井二冠に王位の座を奪われてしまう（最年少二冠）。このへんもなんというか、ドラマだなぁと思うがまた木村九段にタイトルを取ってほしいものである。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>近代から現代までのデザイン史入門</title>
            <link>https://t32k.me/mol/log/978-4771018242-design-history/</link>
            <pubDate>Mon, 15 Feb 2021 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4771018242-design-history/</guid>
            <description>&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4771018243/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/31TMX2spJbL._SX354_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;近代から現代までのデザイン史入門&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;トーマス ハウフェ (著)&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;高校生の頃から歴史が好きで日本史を選択していたが、デザインの歴史も好きだ。ということで、大学生のとき以来にデザイン史の本を手にとってみた。&lt;/p&gt;

&lt;p&gt;まず近代というのはどこからということだが、本書では1750年となっている。産業革命がはじまったころであり、生活が工業化してきた時代だ。工場で画一的な製品が大量に生産できるようになった反面、職人が手作業で丁寧に作ったモノが再評価されるようになった。&lt;/p&gt;

&lt;p&gt;それからのアーツ・アンド・クラフツ運動であり、アール・ヌーヴォーである。おもしろいことに、無機質なデザインが世の中に溢れれば、有機的なデザインが反動でくる。また無機質なデザインと、歴史は繰り返しているように思う。アプリケーションデザインで、スキューモーフィズムからフラットデザインに変わっていったように。&lt;/p&gt;

&lt;p&gt;デザインといっても、建築、ファッション、グラフィック、インダストリアルデザインなど多岐にわたるので、本書で登場する事例や人物の作品も申しわけ程度に紹介されるだけだが（しかもモノクロ写真）、今の時代、気になったデザイナー名をあとで調べてwikipediaでも見ておこう。&lt;/p&gt;

&lt;p&gt;すっかり忘れていたデザイナーなどもいたので、ざっと近代デザイン史をおさらいする意味でも本書は有益だった。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>SwiftのOptional型とか</title>
            <link>https://t32k.me/mol/log/swift-optional-type/</link>
            <pubDate>Fri, 11 Dec 2020 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/swift-optional-type/</guid>
            <description>

&lt;p&gt;TypeScriptもあんまり使ったことなかったから、型がどうも苦手というか慣れない。 &lt;code&gt;Int&lt;/code&gt; とか &lt;code&gt;String&lt;/code&gt; とかそうゆうシンプルなものだと分かるが、そのシンプルな型をよくわからないものにするのがOptional型だと苦手意識を持っていた。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; a: String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;swift&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; b: String? = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; c: Optional&amp;lt;String&amp;gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;b&lt;/code&gt; と &lt;code&gt;c&lt;/code&gt; は書き方が違うだけでどちらもオプショナルString型。まぁ&lt;code&gt;nil&lt;/code&gt;を許容するかどうかって話なのだが、問題は扱い方。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; foo: Int? = &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; bar: Int = foo &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;bar&lt;/code&gt; のところでエラーになる。アンラップしろよとかなんとか注意される。&lt;/p&gt;

&lt;h2 id=&#34;アンラップ-開示&#34;&gt;アンラップ（開示）&lt;/h2&gt;

&lt;p&gt;なんでや!! &lt;code&gt;foo&lt;/code&gt; に3が代入されとるのは明らかやろ！と思っていたが、アンラップしろと言われているので、とりあえずアンラップしてみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; foo: Int? = &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; bar: Int = foo! &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;foo&lt;/code&gt; は &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt; であって、 &lt;code&gt;Int&lt;/code&gt; ではないので、違う型同士で足し算はできない。そこで、オプショナルIntからIntを取り出さなければならない。これをアンラップといい、上記のようにビックリマークをおしりにつける。そうするとちゃんと計算を実行できるようになる。&lt;/p&gt;

&lt;p&gt;なんかアンラップしろって言われたら、とりあえずビックリマークつけときゃいいんやなと雑に覚えてしまっっていたので、のちのち困ることになった。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; foo: Int?
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; bar: Int = foo! &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;foo&lt;/code&gt; に値が代入されていない場合、アンラップしても &lt;code&gt;nil&lt;/code&gt; が返ってくるのでエラーになる。&lt;/p&gt;

&lt;h2 id=&#34;オプショナルバインディング-if-let文&#34;&gt;オプショナルバインディング (if-let文)&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; foo: Int? = &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; f = foo {
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;答えは&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\(&lt;/span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;です&amp;#34;&lt;/span&gt;)
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;答えは1です&amp;#34;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もし値が入ってなかったら、違う処理を記述したいと思う。そうゆうときは &lt;code&gt;if let　~ { }&lt;/code&gt; みたいな感じの構文を書く。これをオプショナルバインディングと呼ぶ。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;foo&lt;/code&gt; に値があれば、&lt;code&gt;f&lt;/code&gt; に代入されて、答えは4です。とprintされるが、&lt;code&gt;foo&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; だったら、else節に飛び、答えは1です。とエラーにならずにprintされる。&lt;/p&gt;

&lt;h2 id=&#34;guard文&#34;&gt;guard文&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; foo: String?
&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printStr&lt;/span&gt;(message: String?) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;guard&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; str = message &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nilです&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
    }
    print(str)
}
printStr(message: foo)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;guard文でも似たようなことができる。 &lt;code&gt;guard 条件 else { /* returnやbreak */ }&lt;/code&gt; と書いて、条件が成立しなかった場合、else節にとび、処理を中断したりできる。&lt;/p&gt;

&lt;h2 id=&#34;nil合体演算子-nil-coalescing-operator&#34;&gt;nil合体演算子(Nil-Coalescing Operator)&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;(foo &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;) ? foo! : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;にる！&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;foo&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; じゃなかったらその値を使って、 &lt;code&gt;nil&lt;/code&gt; なら &lt;code&gt;にる！&lt;/code&gt;を使うみたいな条件を、三項演算子で書くとこうなるが、&lt;code&gt;??&lt;/code&gt; のnil合体演算子を使うともっとシンプルにこう書ける。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;foo ?? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;にる！&amp;#34;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;便利。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;とまぁ、そんなムズカシイことではないんだけど。実際のユースケースで体験してこなかったので、身についてなかったんだと思う。&lt;/p&gt;

&lt;p&gt;今、図書管理アプリを作っているのだが、本の情報をGoogle Books APIを叩いてとってきている。しかし、この取ってきたデータに著者情報があったりなかったり、サブタイトルがあったりなかったりと結構チグハグなデータだったのだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Book&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; id: String
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; author: String?
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; title: String
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; subtitle: String?
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; description: String?
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; imageLinks: ImageLinks?
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; publisher:  String?
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; publishedDate: String?
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;モデルで表すとこんな感じで、やたらOptional型を多用するはめになった。あるのかないのか、はっきしろ！とGoogleさんには言えないので、今回Optional型とちゃっと向き合わざるをえなかったのである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;VStack {
  Text(book.title)
  Text(book.subtitle ?? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; d = publishedDate {
    Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;出版年: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\(&lt;/span&gt;d&lt;span style=&#34;color:#e6db74&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
  }
  Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;著者: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\(&lt;/span&gt;book.author ?? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;不明&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SwiftUIで画面を構築するときもこんな感じで、値がなかったときの表示の仕方や、デフォルト値を表示するなど、今回学んだことを大いに活用した。&lt;/p&gt;

&lt;p&gt;もう、Optinal型なんて怖くない＞ｍ＜！&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4815604061/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/416ZqsPCCjL._SX393_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;SwiftUI 徹底入門&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;金田 浩明&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;
</description>
        </item>
        
        <item>
            <title>投資対象としてのスニーカー👟</title>
            <link>https://t32k.me/mol/log/rstrs/</link>
            <pubDate>Mon, 07 Dec 2020 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/rstrs/</guid>
            <description>

&lt;p&gt;皆さん、お金儲け好きですか？僕は好きです。最近、投資対象としてのスニーカーについて話したので、ここでもシェアするぞ。&lt;/p&gt;

&lt;h2 id=&#34;目次&#34;&gt;目次&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;　1. 投資対象としてのスニーカー&lt;br /&gt;
        　　- ダブルネーム&lt;br /&gt;
        　　- カラーリング&lt;br /&gt;
        　　- 発売年&lt;br /&gt;
    　2. リスクと重要事項について&lt;br /&gt;
        　　- 復刻発売による価値の希薄化&lt;br /&gt;
        　　- 保管スペースの確保&lt;br /&gt;
        　　- 劣化の可能性&lt;br /&gt;
        　　- 偽物の流通&lt;br /&gt;
        　　- 抽選販売が当たらない&lt;br /&gt;
    　3. 代わりのご提案&lt;br /&gt;
        　　- Restore&lt;br /&gt;
        　　- Custom Painting&lt;br /&gt;
        　　- YouTube&lt;br /&gt;
    　4. まとめ&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ちなみに、私の投資経験の始まりは2017年ごろの仮想通貨で大損こきました。2020年、現在もビットコイン価格があがってきており、また仮想通貨ブームが再燃しそうですが、私の持っているのはイーサリアム系コインで今のところ恩恵を享受できてません😇&lt;/p&gt;

&lt;p&gt;仮想通貨は投資というか投機なので、もうちょっと真っ当な投資をしようと思い、今度は国内株式に手を出しました。というのも仮想通貨を始めて指値や板寄せなどといった用語を覚えたので、ちゃんと堅実に儲けようと思ったのですが、投資した株は昨今のコロナのせいで、マイナス何十％となり、仮想通貨並みのボラティリティになってます😇&lt;/p&gt;

&lt;p&gt;この際、自分が本当に好きなものに投資しようと思いました。そして今回紹介するのが、こちら！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/00.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;空飛ぶバスケットボーラー・マイケルジョーダン！ではなく彼の履いてるバッシュ・スニーカーについてです。ここでは特にNIKE・JORDAN BRANDのスニーカーについて解説します。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;スニーカーが流行しだしたのは、1970年代後期のことである。それまで若者は、キャンバス地や堅い革のスポーツシューズを好んで履いていたが、一気にスニーカー一色となった。きっかけとしては、アメリカでNBAが1976年にABAから4チームを迎え入れ、それを機に各靴メーカーが大々的にマーケットを広げたことが挙げられる。1980年代、NBAの一大スターマイケル・ジョーダン (Michael Jordan) のスポンサーであったナイキが、彼をスポークスマンとしてバスケットシューズの新ラインを発表・販売。当時のエア・ジョーダン (Air Jordan) は、100ドルという当時では高価であったにも拘らず、アメリカの販売店では長蛇の列ができ飛ぶ様に売れた。そのコレクション性から、後に日本ではコレクターの間で何万、何十万という値段が付いた。 - &lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%8B%E3%83%BC%E3%82%AB%E3%83%BC&#34;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;は？スニーカーだって？？とお思いのことでしょう。&lt;a href=&#34;https://stockx.com/ja-jp/&#34;&gt;StockX&lt;/a&gt;の創業者ジョシュ・ルーパーは、スニーカー市場がいかに巨大で規制がないか、話しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/01.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ted.com/talks/josh_luber_why_sneakers_are_a_great_investment?language=ja&#34;&gt;知られざるスニーカー・マーケットとそれが重要である理由 | TED Talk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;では、実際に彼の作ったサービスStockXの画面を見てみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/02.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-1-retro-high-dior?country=JP&#34;&gt;Jordan 1 Retro High Dior - CN8607-002&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これはエアジョーダン1とハイブランドDiorのコラボモデルで、定価自体が25万円ほどするのですが、このときは100万円に近い値段がついています。そして株式のように買値と売値があり、これまでの売買履歴も確認できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/03.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;またStockXで購入したスニーカーは自動的にポートフォリオに組み込まれ、どういった種類でどれくらい利益がでているのか、ひと目で見ることができます。&lt;/p&gt;

&lt;p&gt;またStockXでは個人間売買の仲介に入り鑑定作業をするので、ホンモノであると保証されています。これをCtoCのフリマアプリで買ったとすると、パッと見、靴の相場もわからないので、相場より割高で買ってしまうこともあります。また送られてきたものが、ニセモノという危険性もあります。&lt;/p&gt;

&lt;p&gt;つまり、StockXのようなサービスがあることで高額なスニーカーであろうとも公正な取引ができるということです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/04.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://snkrdunk.com/&#34;&gt;スニーカーダンク(スニダン) | 人気の新作スニーカーを安心売買&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://monokabu.com/&#34;&gt;モノカブ｜スニーカー・ストリートウェアを安心売買&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;StockXのようなサービスは国内にも存在しています。最近TVCMでも見かけるスニーカーダンクと、スニーカーだけでなくストリートウェアも取り扱うモノカブなどがあります。&lt;/p&gt;

&lt;p&gt;スニーカーは儲かりそうだ、投資商品として購入する環境も整っている。では、どういったものが高い利益を出すスニーカーなんでしょうか？&lt;/p&gt;

&lt;h2 id=&#34;ダブルネーム&#34;&gt;ダブルネーム&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/05.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-1-retro-high-travis-scott&#34;&gt;Jordan 1 Retro High Travis Scott - CD4487-100&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-4-retro-travis-scott-cactus-jack?country=JP&#34;&gt;Jordan 4 Retro Travis Scott Cactus Jack - 308497-406&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-6-retro-travis-scott&#34;&gt;Jordan 6 Retro Travis Scott - CN1084-200&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これはアメリカ人ラッパーのトラヴィス・スコットとエアジョーダンのコラボモデルですが、ジョーダンのシューズはだいたい定価が2万円前後なので、これらのモデルは10万円以上しています。AJ1はナイキのスウォッシュが反転してるのがポイントですね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/06.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-1-retro-high-off-white-chicago&#34;&gt;Jordan 1 Retro High Off-White Chicago - AA3834-101&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-4-retro-off-white-sail-w&#34;&gt;Jordan 4 Retro Off-White Sail (W) - CV9388-100&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-5-retro-off-white-black&#34;&gt;Jordan 5 Retro Off-White Black - CT8480-001&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次はルイ・ヴィトンのデザイナーでありヴァージル・アブロー自身のブランドOff-Whiteとジョーダンのコラボモデルです。ダブルクオーテーションで囲んだ単語（&amp;rdquo;AIR&amp;rdquo;）などが特徴的ですね。Off-WhiteのAJ1は人気のシカゴカラーということもあり、50万円くらい値段になっています🚀🚀🚀&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/07.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-1-retro-high-union-los-angeles-blue-toe&#34;&gt;Jordan 1 Retro High Union Los Angeles Blue Toe - BV1300-146&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-4-retro-union-guava-ice&#34;&gt;Jordan 4 Retro Union Guava Ice - DC9533-800&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-delta-mid-union-off-noir&#34;&gt;Jordan Delta Mid Union Off Noir - DA1951-001&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;続いて、ロサンゼルスのセレクトショップ・UNIONとのコラボモデル。これもおされセレクトショップらしいカラーリングで人気のモデルとなっています。&lt;/p&gt;

&lt;p&gt;まぁこういったモデルは極端に供給量が少ない上に、もともとの購買層のジョーダンファンにプラス、トラヴィス・スコットファンや、Off-Whiteファンなどの需要が増えるので、需要と供給の関係から価格が跳ね上がります。買えたらラッキーですが、まず買えないと思っていたほうがよさそう。&lt;/p&gt;

&lt;h2 id=&#34;カラーリング&#34;&gt;カラーリング&lt;/h2&gt;

&lt;p&gt;エアジョーダンはマイケル・ジョーダンのシグネチャーモデルなので、当然、彼が在籍していたシカゴ・ブルズに関係する色が重要になってきます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/08.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/jordan-1-retro-chicago-2015&#34;&gt;Jordan 1 Retro Chicago (2015) - 555088-101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こちらはエアジョーダン１のシカゴカラー、赤・白・黒のホーム用のゲームシャツの色ですね。エアジョーダンシリーズの王道中の王道といった感じで、エアジョーダンといえばこれを思い浮かべる人も多いはずです。なんのダブルネームでもないですが、20万近い値段になっています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/09.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-11-retro-playoffs-2019&#34;&gt;Jordan 11 Retro Playoffs Bred (2019) - 378037-061&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;赤・黒の配色でブレッドと呼ばれるカラーリングです。ブラック・レッドなのでブレッドでロード用のゲームシャツのカラーリングです。こちらも人気の高いカラーリングです。&lt;/p&gt;

&lt;h2 id=&#34;発売年&#34;&gt;発売年&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/10.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-4-retro-pure-money-2017&#34;&gt;Jordan 4 Retro Pure Money (2017) - 308497-100&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こちらはAJ4 Pure Moneyの売買履歴なんですが、これは2017年に限定発売されたのですが、売れ残り、最終的にセールプライスでも売られていた一足で、誰でも買おうと思えば買える一足でした。&lt;/p&gt;

&lt;p&gt;価格の推移を見てみると、基本的に発売当初は転売屋が値を吊り上げて出品しますし、一刻でも早く欲しいAJファンが飛びつく形になります（一番左の矢印）。しかし、冷静になると、まぁ定価で買えますし、売れない。焦った転売屋は在庫を持ちたくないので定価割れで売りに出すことになります（二番目の矢印）。その後、じわじわ値があがって、2,3年後には利益率100~200％になります。人気のあるジョーダンシリーズで奇抜ではないカラーリングのジョーダンであれば、だいたいこういった値動きになっているような気がします（肌感覚）。&lt;/p&gt;

&lt;p&gt;長期間ホールドで必ず上がる理由は、StockXで扱うシューズは新品でなければならないからです。なので、一回でも履いた状態になると売り物になりません。僕もそうですが、スニーカーヘッズは履きたいわけですよ。発売当初は十分な供給量だったものも、どんどんとみんなが履くので、市場全体の新品の在庫数は減るわけですが、需要としては、発売当時、学生でお金がなかったとか、たまたまスニーカーデビューしたのが遅かったとかで、こんなモデルが発売してたのかと後になって購入層になるケースもあります。&lt;/p&gt;

&lt;p&gt;よって供給は増えることはないが需要が増えるので、徐々に価格が上がっていくのです。&lt;/p&gt;

&lt;h1 id=&#34;リスクと重要事項について&#34;&gt;リスクと重要事項について&lt;/h1&gt;

&lt;p&gt;スニーカーは必ず儲かる商品だというの分かったような気がしますが、世の中リターンがあればリスクもあります。ここではスニーカー投資を始めるにあって注意しなければならないことを解説します。&lt;/p&gt;

&lt;h2 id=&#34;復刻版発売による価値の希薄化&#34;&gt;復刻版発売による価値の希薄化&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/11.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://stockx.com/ja-jp/search/sneakers?s=Air%20More%20Uptempo%20Olympic&#34;&gt;Air More Uptempo Olympicの検索結果&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先ほど、需要は増えることはあっても供給が増えることはないと言いましたが、復刻版発売という形で、供給量が増えることがあります。&lt;/p&gt;

&lt;p&gt;こちらは、ジョーダンシリーズではありませんが、エアモアアップテンポのオリンピックカラーで人気のあるモデルですが、オリンピックイヤーの4年ごとに復刻版が出ています。今年（2020年）も出ました。定価が19,250円で供給量が十分ある状態なので、たいしてプレ値がついてない感じになっています。&lt;/p&gt;

&lt;p&gt;だいたい人気なモデルの復刻版リリースは5~10年の間隔になっているような気がしますが、中には二十年ぶりといったものもありますから、これに関してはNIKE社がコントロールしてるとしか言えません。&lt;/p&gt;

&lt;p&gt;エアマックス95のイエローグラデが人気爆発したとき「エアマックス狩り」という事件が起こったように、NIKE社はあまりにも値が高騰するのを嫌ってるためか、2~3年間隔で復刻版がリリースされているモデルもあります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/12.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/jordan-3-retro-black-cement-2011&#34;&gt;Jordan 3 Retro Black Cement (2011) - 136064-010&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-3-retro-black-cement-2018&#34;&gt;Jordan 3 Retro Black Cement (2018) - 854262-001&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;必ずしも、復刻イコール供給量が増えるといったこともないケースがあります。AJ3のブラックセメントですが、2011年復刻と2018年の復刻モデルがありますが、発売年からいって2011年モデルのほうが高い気がしますが、2018年モデルのほうが人気があります。&lt;/p&gt;

&lt;p&gt;これは、アウトソールとヒールのロゴがNIKEかJORDANの違いがあります。今でこそジョーダンはNIKE社から独立してJORDAN BRANDとして別会社になっています。しかし、マイケル・ジョーダンが現役で活躍していた頃はあくまで、NIKE社の１ブランドラインでしかなかったので、当時はNIKEロゴが使われていました。&lt;strong&gt;オリジナルに近いか？&lt;/strong&gt; という観点からいえば、発売年は新しいですがNIKEロゴの2018年復刻がより人気が高いといったことがあります。&lt;/p&gt;

&lt;p&gt;その他にもタグがNIKEなのかJORDANなのか、箱がNIKEなのかJORDANなのかといった確認ポイントもあるので、NIKE社のうまいところはそういったところを微妙に変えてきて復刻版をリリースするので、コレクター心をうまくくすぐっているのです。&lt;/p&gt;

&lt;h2 id=&#34;保管スペースの確保&#34;&gt;保管スペースの確保&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/13.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;株式のようにスニーカーを取り扱っていると言いましたが、残念ながらスニーカーは株式のように電子取引はできません。なのでスニーカーを購入すれば、ご自宅にスニーカーが入ったダンボールが届きます（物理）。&lt;/p&gt;

&lt;p&gt;上記の写真は私の自宅ですが、最近引っ越しました。というのも、以前は1K7畳にも満たない部屋に住んでたのですが、スニーカーが増えすぎて、このままではスニーカーに埋もれてしまうということで、スニーカー部屋を作るために引っ越しました😇&lt;/p&gt;

&lt;p&gt;StockXでは新品しか取り扱わないと言いましたが、箱もちゃんとした状態で保存していないと、鑑定を通過しません。なので、スペースはとりますが、箱も大事に保管しなければならないのです。&lt;/p&gt;

&lt;p&gt;現物を取り扱うということで、アービトラージ（取引所間取引）やデイトレーディング（頻繁な取引）はおすすめできないのです。なぜならサービス手数料以外にも配送料がかかります。米国のStockXで購入すると2800円もの配送料プラス関税もかかってきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;手数料（鑑定料）＝ 購入価格の3~4%&lt;/li&gt;
&lt;li&gt;配送料 ＝ 国内：1,000円、海外：2,800円&lt;/li&gt;
&lt;li&gt;関税(海外取引所）＝ 神のみぞ知る…(3000円~？)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なので、じっと長期ホールドするのです。。。&lt;/p&gt;

&lt;h2 id=&#34;劣化の可能性&#34;&gt;劣化の可能性&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/14.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;長期ホールドと言いましたが、長期すぎるのも考えものです。左は89年のオリジナルのAJ4ですが、ミッドソールがボロボロになっています。これはポリウレタン系のミッドソールは空気中の水分と反応して加水分解がおこり、このような状態になってしまうのです。&lt;/p&gt;

&lt;p&gt;30年前のスニーカーなんだから当たり前じゃないかと思いますが、高温多湿の日本で雑に保管していると、ほんの数年でこのような状態になることもあります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/15.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;なので保管する際は、左のようにジップロックなどに乾燥剤を入れた状態で保管するか、右のようにスニーカーフィルムで密閉して乾燥剤を入れるかしましょう。&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07RL5SRPT/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/71-IAHF0PIL._AC_SL1500_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;ジップロック スタイル ストレージバッグ XL 5枚&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;ブランド: ジップロック&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07FPGFYYT/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/61fRfhMg-SL._AC_UL1280_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;[KicksWrap] 10枚入SET ５足分 キックスラップ スニーカー観賞用フィルム 国内正規品 新品 未開封 レアスニーカー保護フィルム&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;ブランド: KicksWrap&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0065C8I2O/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/41kiLja326L._AC_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;シリカゲル乾燥剤「なんでも除湿シリカゲル」20g×20個入り&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;ブランド: 坂本石灰工業所&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;h2 id=&#34;偽物の流通&#34;&gt;偽物の流通&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/16.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.fakebusters-iva.com/ja&#34;&gt;FAKE BUSTERS｜スニーカーやアパレルの真贋鑑定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;StockXやモノカブのような鑑定作業が含まれるサービスを使えば問題ないのですが、フリマアプリや、プレ値で売っているスニーカーショップなどで購入すると偽物を掴まされる可能性があります。&lt;/p&gt;

&lt;p&gt;たまにフリマアプリで評価ゼロのユーザーがトラヴィス・スコットのエアジョーダンを定価で売りに出しているのを見かけると、まぁ偽物だよねって分かりやすい例です。今回買ったのはYahooショッピングのとあるショップで、プレ値の相場より若干安い値段設定だったので購入しましたが、不安だったのでフェイクバスターズという鑑定サービスを使い鑑定してもらったら、案の定、フェイク認定でした。&lt;/p&gt;

&lt;p&gt;悔しかったので、この後スニーカーダンクで本物を購入して、見比べてみましたが、パッと見ほぼ同じ、いわゆるスーパーコピー品と呼ばれるものです。近年、コピー品の出来もよくなってきており、素人には違いが分からないですから、やはり鑑定ありのサイトで購入したほうが無難でしょう。&lt;/p&gt;

&lt;h2 id=&#34;抽選販売が当たらない&#34;&gt;抽選販売が当たらない&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/17.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nike.com/jp/launch?s=upcoming&#34;&gt;近日発売予定の商品。Nike SNKRS JP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後の重要事項で、これが一番大事なのですが、エアジョーダン欲しいと思った方がNIKEの店舗に行っても、ここで紹介したようなエアジョーダンシリーズは売っていません。週末のSNKRSというサイト・アプリで限定抽選販売されるのですが、全く当たりません。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/18.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;NBA選手が自身のシグネチャーモデルのバッシュ販売の抽選に外れたとかゆうニュースも見かけました。このような抽選販売は&lt;a href=&#34;https://launch.atmos-tokyo.com/category/upcoming/&#34;&gt;atmos&lt;/a&gt;などの大手のスニーカーショップでも行われているので、いっぱい参加して抽選口数を増やすしかないです&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;代わりのご提案&#34;&gt;代わりのご提案&lt;/h1&gt;

&lt;h2 id=&#34;ダブルネーム-中古購入-修復&#34;&gt;ダブルネーム =&amp;gt; 中古購入 + 修復&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/jordan-5-retro-supreme-white&#34;&gt;Jordan 5 Retro Supreme White - 824371-101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Fsy2DucQzaM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;上記はSupremeとエアジョーダン5のコラボで、新品だと10万くらいで取り引きされているものです。新品ではとてもとても買えないので中古のボロボロだったものを3万円くらいで購入しました。&lt;/p&gt;

&lt;p&gt;それを綺麗にクリーニングし、ペイントがかすれているところをリペイントし、黄ばんだクリアソールをとることで、新品に近い状態までもっていけます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/19.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goat.com/sneakers?condition=goat_clean&#34;&gt;Shop All Sneakers | GOAT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;StockXでは新品しか取り扱わないと言いましたが、StockXと似たようなサービスのGOATでは、新品のほかにも中古スニーカーも取り扱っています。中古の履きつぶしたスニーカーをGOATに送ることで、GOATのクリーニングスタッフが綺麗にし、ちゃんとした商品写真も撮って出品してくれます。売れたらその分の手数料を払うといったビジネスモデルです。&lt;/p&gt;

&lt;h2 id=&#34;カラーリング-カスタムペイント&#34;&gt;カラーリング =&amp;gt; カスタムペイント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stockx.com/ja-jp/air-jordan-1-low-gym-red-white&#34;&gt;Jordan 1 Low Gym Red White - 553558-611&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/ZI1_28NG37E&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;これはエアジョーダン1 LOWのジムレッドですが、これ自体は限定発売ということはなく、ついこないだまで普通に買えるなんのへんてつもないシューズです。&lt;/p&gt;

&lt;p&gt;この赤色のスウォッシュ部分は黒くすれば、ほぼ人気のあるシカゴカラーと同じような感じになりますので、マスキングをし、&lt;a href=&#34;https://atrandom.shop/&#34;&gt;アンジェラスペイント&lt;/a&gt;というスニーカー専用の塗料を使い、シューレースを黒色に変えることで、シカゴカラーになりました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/20.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;私は単純にカラーリングを変えただけですが、スニーカーにグラフィティなペイントをしてくれるサービスもあります。真っ白なエアフォース１にペイントしてくれるのですが、これは靴代は含まず、ペイント代で600~800ドルくらいしますね。&lt;/p&gt;

&lt;h2 id=&#34;youtube-branding&#34;&gt;YouTube + Branding&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/21.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCA1U45AZ1PRsPp4nZPhh2Tg&#34;&gt;RESHOEVN8R - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://reshoevn8r.com/&#34;&gt;Reshoevn8r | Premium Shoe Care Products | Ultimate Sneaker Cleaner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とはいえ、スニーカークリーニングもペイントも非常に労力のかかる作業です。もっと楽して儲けたいと思うあなたのために、 YouTubeでブランディングするのはどうでしょう。&lt;/p&gt;

&lt;p&gt;リシューブネイターはスニーカーのクリーニング・修復などの動画をYouTubeにアップロードしています。チャンネル登録者数は100万人を超え、YouTubeだけの広告収入だけでも結構な額でしょうが、彼らは自社のスニーカーケア用品も販売しています。リシューブネイターのブラシだったり洗剤だったり、パッケージもおされです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCrBbduvKVMtnwxnN-UNCwUg&#34;&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1207/22.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCrBbduvKVMtnwxnN-UNCwUg&#34;&gt;RSTRS - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というわけで、自分もYouTube始めてみました。今のところ買ったスニーカーの紹介とかが多いですが、クリーニング動画・カスタムペイント動画も随時アップロードしていきますので、ご登録よろしくおねがいしますm(_ _)m&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;スニーカービジネスはけっこう色々ある&lt;/li&gt;
&lt;li&gt;SNKRS抽選はとりあえず参加（毎週）&lt;/li&gt;
&lt;li&gt;t32kのシューケアブランドに投資だ！&lt;br /&gt;
(いつかクラウドファンディングする)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ということで、お金お金と言いましたが、下記にあげたような動画を見ると、マイケル・ジョーダンすげーな！かっこいいな！と思いますし、もうおっさんですが彼のようになりたいと思い、彼のスニーカーを履きたいと思うので、やっぱりスニーカーが大好きです🥰&lt;/p&gt;

&lt;p&gt;みなさんも素敵なスニーカーライフを👟&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/null/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://m.media-amazon.com/images/I/41XcckqyezL.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;東京スニーカー史 (立東舎)&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;小澤 匡行 (著) &lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;h3 id=&#34;スニーカーが好きになるnetflix&#34;&gt;スニーカーが好きになるNETFLIX&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netflix.com/title/80203144&#34;&gt;マイケル・ジョーダン ラストダンス&lt;/a&gt;&lt;br /&gt;
MJのプレーヤー人生をおさらい（足元にも注目）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netflix.com/title/80057883&#34;&gt;アート・オブ・デザイン – ティンカー・ハットフィールド&lt;/a&gt;&lt;br /&gt;
AJシリーズのシューズデザイナーのドキュメンタリー（season１）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netflix.com/title/81249713&#34;&gt;オレたちスニーカーヘッズ&lt;/a&gt;&lt;br /&gt;
アメリカとスニーカー文化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netflix.com/title/80223149&#34;&gt;ビンス・カーター: カナダにバスケをもたらした男&lt;/a&gt;&lt;br /&gt;
バスケとポップカルチャーとの密接な関係&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
        <item>
            <title>オブジェクト指向UIデザイン</title>
            <link>https://t32k.me/mol/log/978-4297113513-do-not-mode-me-in/</link>
            <pubDate>Fri, 20 Nov 2020 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/978-4297113513-do-not-mode-me-in/</guid>
            <description>&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4297113511/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/41ncKIL-yRL._SX350_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;オブジェクト指向UIデザイン──使いやすいソフトウェアの原理 (WEB+DB PRESS plusシリーズ)&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;上野 学&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;いわゆる、銀の弾丸を読んだ。&lt;/p&gt;

&lt;p&gt;オブジェクト指向UIとはまず対象となるオブジェクトを選択して、それに対するアクションを行う。例えば、デスクトップで書類ファイルを削除したければ、マウスなどで対象の書類ファイルをクリックし、「削除する」などのメニューを選ぶ。つまり、「名詞 -&amp;gt; 動詞」の流れだ。これに対しタスク志向UIというのは、例えば、CLIでdeleteコマンドみたいなものをまず打ち込み、次に対象となる書類ファイルのパスを入力するといった「動詞 -&amp;gt; 名詞」の流れだ。&lt;/p&gt;

&lt;p&gt;CLIアプリケーションなら理解できるが、GUIのアプリケーションにおいてこういったものをあまり目にしたことがないような気がする。&lt;/p&gt;

&lt;p&gt;タスク志向UI（モード）を作らざるを得ない状況として、次のような場合だという。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;タスクによって処理対象となるオブジェクト集合が異なる場合。この場合、タスク選択はアプリケーションの選択と同じような位置づけとなる。&lt;/li&gt;
&lt;li&gt;タスクによって、ユーザーに提示すべきオブジェクトの属性やアクションが大きく異る場合。この場合、先にオブジェクトを提示しようとすると、情報量が多くなりすぎてUIに収まりきらなくなる&lt;/li&gt;
&lt;li&gt;オブジェクトが（ユーザーのメンタルモデルにおいて）意識されてない、あるいはオブジェクトがひとつだけで選択の必要がなく、アクションの引数としての入力がタスクの大部分である場合。たとえばATM&lt;/li&gt;
&lt;li&gt;ユーザーの創造的な作業を禁止し、一定の順序で限定的な操作をさせたい場合&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いわゆる業務アプリケーションで多いという。確かに、C向けアプリケーションを作ってきた経験が多い自分にとっては、あまり悩んだ記憶がない。だからといって、気にしなくてよい問題かというそうでもない。&lt;/p&gt;

&lt;p&gt;タスク志向は「動詞 -&amp;gt; 名詞」の流れと説明したが、その動詞を選択すると&lt;strong&gt;モード&lt;/strong&gt;になる。ビデオカメラで「録画する」ならば、そのときは録画モードで、録画に関すること以外、システムは受け付けないだろう。これはユーザーからコントロール権を奪う行為であり、あまりよろしくない。&lt;/p&gt;

&lt;p&gt;GUIでモーダルな代表例としてはモーダルダイアログであろう。モーダルダイアログと言われると、たしかになにも考えず使ってる気がする&amp;hellip;&lt;/p&gt;

&lt;p&gt;モードレスにする方法としては以下のようなことがある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「名詞 -&amp;gt; 動詞」の操作をひとつのジェスチャで行う&lt;/li&gt;
&lt;li&gt;パラメータを保存してオブジェクト化する&lt;/li&gt;
&lt;li&gt;アクションを分割する&lt;/li&gt;
&lt;li&gt;サブミットボタンをなくす&lt;/li&gt;
&lt;li&gt;モーダルダイアログなくす&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;昨今、React/Vue/AngularなどのMVVMフレームワークを使用していると、状態を変更してUIにすぐに反映することができるので、「サブミットボタンをなくす」といったことができる。以前の記事・&lt;a href=&#34;https://t32k.me/mol/mol/log/microinteractions/&#34;&gt;マイクロインタラクション事始め以前&lt;/a&gt;でもちょっと解説したが、やはりモードレスを意識してないと、惰性的に「モーダルダイアログ展開して〜」といった実装をしがちである。気をつけないと。&lt;/p&gt;

&lt;p&gt;全体的に、toC向けのサービスを作っているデザイナーであれば、まぁそんな画面デザインにはならないだろうと思うが、なぜそうなのかと言われるとうまく言語化できないので、そういった意味で明快に解説している本書は一読の価値があると思う。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>SwiftUIでのスタイルのまとめかたとか</title>
            <link>https://t32k.me/mol/log/styles-swiftui/</link>
            <pubDate>Thu, 08 Oct 2020 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/styles-swiftui/</guid>
            <description>

&lt;p&gt;CSSだとスタイルはクラスでまとめられ、BEMなり、なんなりのクラスの命名規則で管理する。SwiftUIだとスタイルはViewに繋げられたモディファイアであり、これがダラダラと記述されているのは、見通しが悪い。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1008/00.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Swift&#34; data-lang=&#34;Swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;)
            .font(.largeTitle)
            .foregroundColor(Color(.systemRed))
            .padding()
            .frame(maxWidth: .infinity, alignment: .leading)
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;カスタムモディファイア&#34;&gt;カスタムモディファイア&lt;/h1&gt;

&lt;p&gt;modifier というまんまのものがある。上記のコードは LargeText という ViewModifier 定義すると、.modifier(LargeText(color: Color(.systemRed))) だけを View に繋げれば良い。また引数を持つことができるので、色の部分を抜き出して、青色のテキストを表示したり、緑色のテキストを表示できるといった具合だ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1008/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;)
            .modifier(LargeText(color: Color(.systemRed)))
    }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LargeText&lt;/span&gt;: ViewModifier {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; color: Color
    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;(content: Content) -&amp;gt; some View {
        content
            .font(.largeTitle)
            .foregroundColor(color)
            .padding()
            .frame(maxWidth: .infinity, alignment: .leading)
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;カスタムスタイル&#34;&gt;カスタムスタイル&lt;/h1&gt;

&lt;p&gt;modifier と似ているが、特定のコンポーネントにはカスタムスタイルを定義する方法が提供されている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        Button(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ボタン&amp;#34;&lt;/span&gt;) { print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;タップ&amp;#34;&lt;/span&gt;) }
            .buttonStyle(MyButtonStyle())
    }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyButtonStyle&lt;/span&gt;: ButtonStyle {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;makeBody&lt;/span&gt;(configuration: &lt;span style=&#34;color:#66d9ef&#34;&gt;Self&lt;/span&gt;.Configuration) -&amp;gt; some View {
        configuration.label
            .padding()
            .foregroundColor(Color(.systemBlue))
            .overlay(
                RoundedRectangle(cornerRadius: &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
                    .stroke(Color(.systemBlue), lineWidth: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            )
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Button の場合は ButtonStyle がある。一見すると別に modifier でも問題じゃないかと思うが、ミソは&lt;code&gt;configuration&lt;/code&gt;の部分だ。 configuration.isPressedで、押されているのか、いないのかの状態がわかるので、ボタン押下時のスタイルも定義することができる。同様に、トグルにも ToggleStyle というものが提供されており、configuration.isOn でトグルの on/off 状態がわかるので、on/off でスタイルを変更することができる。ということで、ButtonやToggleのスタイルをまとめたいときはカスタムスタイルでまとめる。&lt;/p&gt;

&lt;h1 id=&#34;構造体でまとめる&#34;&gt;構造体でまとめる&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1008/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        List {
            HStack {
                Image(systemName: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;person.crop.circle.fill&amp;#34;&lt;/span&gt;)
                    .resizable()
                    .frame(width: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, height: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)
                    .padding()
                VStack(alignment: .leading) {
                    Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hoge Yamada&amp;#34;&lt;/span&gt;).font(.callout).fontWeight(.bold)
                    Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&amp;#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.&amp;#34;&lt;/span&gt;).lineLimit(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;).font(.caption)
                }
            }
            HStack {
                Image(systemName: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;person.crop.circle.fill&amp;#34;&lt;/span&gt;)
                    .resizable()
                    .frame(width: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, height: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)
                    .padding()
                VStack(alignment: .leading) {
                    Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fuga Yamada&amp;#34;&lt;/span&gt;).font(.callout).fontWeight(.bold)
                    Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&amp;#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.&amp;#34;&lt;/span&gt;).lineLimit(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;).font(.caption)
                }
            }
            HStack {
                Image(systemName: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;person.crop.circle.fill&amp;#34;&lt;/span&gt;)
                    .resizable()
                    .frame(width: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, height: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)
                    .padding()
                VStack(alignment: .leading) {
                    Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Piyo Yamada&amp;#34;&lt;/span&gt;).font(.callout).fontWeight(.bold)
                    Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&amp;#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.&amp;#34;&lt;/span&gt;).lineLimit(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;).font(.caption)
                }
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;受信メール一覧的なリストを作る場合、HStack でプロフ画像と文書を並べてとか一つ一つのリストアイテムを作っていく。まぁ愚直に書けば、上記みたいな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; friends = [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hoge Yamada&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fuga Yamada&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Piyo Yamada&amp;#34;&lt;/span&gt; ]
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        List {
            ForEach(friends, id: &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt;) { friend &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;
                ListItem(name: friend)
            }
        }
    }
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ListItem&lt;/span&gt;: View {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; name: String
        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
            HStack {
                Image(systemName: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;person.crop.circle.fill&amp;#34;&lt;/span&gt;)
                    .resizable()
                    .frame(width: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, height: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)
                    .padding()
                VStack(alignment: .leading) {
                    Text(name).font(.callout).fontWeight(.bold)
                    Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&amp;#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.&amp;#34;&lt;/span&gt;).lineLimit(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;).font(.caption)
                }
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HStack らへんを ListItem 構造体としてまとめるとこんな感じ。スタイルをまとめるというよりかは、ボタンなり、画像なりある程度の粒度をもったUIコンポーネントとしてまとめるといったことに近い。&lt;/p&gt;

&lt;p&gt;今作っているのは簡素な見た目のモックアプリなので、そこまでモディファイアをつなげるてスタイルを作り込んでいくことがないので、modifier はあんまり使わず、構造体でまとめて終わりって感じになっている。&lt;/p&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4815604061/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/416ZqsPCCjL._SX393_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;SwiftUI 徹底入門&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;金田 浩明&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;
</description>
        </item>
        
        <item>
            <title>SwiftUIでの色とか</title>
            <link>https://t32k.me/mol/log/color-swiftui/</link>
            <pubDate>Wed, 07 Oct 2020 00:00:00 UTC</pubDate>
            
            <guid>https://t32k.me/mol/log/color-swiftui/</guid>
            <description>&lt;p&gt;UIKitの&lt;code&gt;UIColor&lt;/code&gt;とSwiftUIの&lt;code&gt;Color&lt;/code&gt;は違うと気づいた最近。&lt;/p&gt;

&lt;p&gt;例えば、赤色を表示したいときは、SwiftUIでは &lt;code&gt;Color.red&lt;/code&gt; と書く。たまに&lt;code&gt;Color(.red)&lt;/code&gt; というのも見かけて、書き方の違いなんだろうか？と思ってたけど、全然違った。&lt;code&gt;Color(.red)&lt;/code&gt; は &lt;code&gt;Color(UIColor.red)&lt;/code&gt; の略した書き方で、&lt;code&gt;UIColor&lt;/code&gt; をSwiftUIの&lt;code&gt;Color&lt;/code&gt;として使う方法だった。&lt;/p&gt;

&lt;p&gt;ややこしいのは&lt;code&gt;Text(&amp;quot;hoge&amp;quot;).foregroundColor(.red)&lt;/code&gt;のようなケース。文字色を赤色にしたいとき、foregroundColorモディファイアは&lt;code&gt;Color&lt;/code&gt;が引数に来ると想定しているので、&lt;code&gt;foregroundColor(Color.red)&lt;/code&gt;と同じである。もし、UIColorの方の赤を指定したかったら、&lt;code&gt;foregroundColor(Color(.red))&lt;/code&gt;と書かなければならない。&lt;/p&gt;

&lt;p&gt;ちなみに、赤色としても微妙に違う。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1007/00.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
        HStack {
            ZStack {
                Rectangle().foregroundColor(Color(.red))
                Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UIColor&amp;#34;&lt;/span&gt;).foregroundColor(.white)
            }
            ZStack {
                Rectangle().foregroundColor(Color.red)
                Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SwiftUI&amp;#39;s Color&amp;#34;&lt;/span&gt;).foregroundColor(.white)
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;どうして、気づくの時間がかかったかというと、今作成しているのはモックアプリでシステムカラーしか使ってなかったためである。つまり、&lt;code&gt;Color(.    systemRed)&lt;/code&gt;のような書き方で統一していたというか、システムカラーは&lt;code&gt;UIColor&lt;/code&gt;なので、そう書かざるをえなかった。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1007/01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;システムカラーを使うと、ダークモードのときや、アクセシビリティモードのときに適切な色味に変換してくれるメリットがある。つまり、システムカラーさえ使っとけば、おーるおっけー。やったね 🤗&lt;/p&gt;

&lt;p&gt;気をつけなければならないのは、黒や白といったものである。コンポーネントの背景色を白色にしたいと思って、安易に &lt;code&gt;Color.white&lt;/code&gt; を使わない。当たり前だが&lt;code&gt;Color.white&lt;/code&gt; はダークモードのときも白色だがアプリ全体の背景色は黒色になる。そうしたとき、想定していない見た目になるかもしれな。そうゆうときは &lt;code&gt;Color(.systemBackground)&lt;/code&gt;を使うと良い。文字色も&lt;code&gt;Color(.label)&lt;/code&gt;を使うと、黒と白が反転して良い感じになる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://t32k.me/mol/mol/images/2020/1007/02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;濃淡を使い分けたかったら、&lt;code&gt;SystemGray&lt;/code&gt;を使うと良い。&lt;/p&gt;

&lt;p&gt;CSSだけど、&lt;a href=&#34;https://t32k.me/mol/mol/log/dive-into-the-dark-side/&#34;&gt;このブログをダークモードに対応&lt;/a&gt;したとき、めんどくさかったんだよなと思い出した。そういう意味では、ダークモードだけでなくアクセシビリティモードのときのカラーセットもはじめから用意してくれているiOS様様である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/color/&#34;&gt;Color - Visual Design - iOS - Human Interface Guidelines - Apple Developer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;__media&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4815604061/?tag=warikiru-22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
&lt;img src=&#34;https://images-na.ssl-images-amazon.com/images/I/416ZqsPCCjL._SX393_BO1,204,203,200_.jpg&#34; alt=&#34;&#34; class=&#34;__media__image&#34;&gt;
&lt;div class=&#34;__media__body&#34;&gt;
    &lt;div&gt;SwiftUI 徹底入門&lt;/div&gt;
    &lt;div class=&#34;__media__text&#34;&gt;金田 浩明&lt;/div&gt;
    &lt;div&gt;Amazon.co.jpで詳細を見る&lt;/div&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/div&gt;
</description>
        </item>
        
    </channel>
</rss>